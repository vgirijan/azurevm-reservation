import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DiskAccesses } from "../operationsInterfaces/index.js";
import { ComputeManagementClient } from "../computeManagementClient.js";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { DiskAccess, DiskAccessesListOptionalParams, DiskAccessesListByResourceGroupOptionalParams, PrivateEndpointConnection, DiskAccessesListPrivateEndpointConnectionsOptionalParams, DiskAccessesGetOptionalParams, DiskAccessesGetResponse, DiskAccessesCreateOrUpdateOptionalParams, DiskAccessesCreateOrUpdateResponse, DiskAccessUpdate, DiskAccessesUpdateOptionalParams, DiskAccessesUpdateResponse, DiskAccessesDeleteOptionalParams, DiskAccessesGetAPrivateEndpointConnectionOptionalParams, DiskAccessesGetAPrivateEndpointConnectionResponse, DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams, DiskAccessesUpdateAPrivateEndpointConnectionResponse, DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams, DiskAccessesGetPrivateLinkResourcesOptionalParams, DiskAccessesGetPrivateLinkResourcesResponse } from "../models/index.js";
/** Class containing DiskAccesses operations. */
export declare class DiskAccessesImpl implements DiskAccesses {
    private readonly client;
    /**
     * Initialize a new instance of the class DiskAccesses class.
     * @param client Reference to the service client
     */
    constructor(client: ComputeManagementClient);
    /**
     * Lists all the disk access resources under a subscription.
     * @param options The options parameters.
     */
    list(options?: DiskAccessesListOptionalParams): PagedAsyncIterableIterator<DiskAccess>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists all the disk access resources under a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DiskAccessesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DiskAccess>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List information about private endpoint connections under a disk access resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    listPrivateEndpointConnections(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesListPrivateEndpointConnectionsOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    private listPrivateEndpointConnectionsPagingPage;
    private listPrivateEndpointConnectionsPagingAll;
    /**
     * Lists all the disk access resources under a subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Lists all the disk access resources under a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Gets information about a disk access resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesGetOptionalParams): Promise<DiskAccessesGetResponse>;
    /**
     * Creates or updates a disk access resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Put disk access operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, diskAccessName: string, diskAccess: DiskAccess, options?: DiskAccessesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DiskAccessesCreateOrUpdateResponse>, DiskAccessesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a disk access resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Put disk access operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, diskAccessName: string, diskAccess: DiskAccess, options?: DiskAccessesCreateOrUpdateOptionalParams): Promise<DiskAccessesCreateOrUpdateResponse>;
    /**
     * Updates (patches) a disk access resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, diskAccessName: string, diskAccess: DiskAccessUpdate, options?: DiskAccessesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DiskAccessesUpdateResponse>, DiskAccessesUpdateResponse>>;
    /**
     * Updates (patches) a disk access resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, diskAccessName: string, diskAccess: DiskAccessUpdate, options?: DiskAccessesUpdateOptionalParams): Promise<DiskAccessesUpdateResponse>;
    /**
     * Deletes a disk access resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a disk access resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesDeleteOptionalParams): Promise<void>;
    /**
     * List information about private endpoint connections under a disk access resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    private _listPrivateEndpointConnections;
    /**
     * Gets information about a private endpoint connection under a disk access resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    getAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: DiskAccessesGetAPrivateEndpointConnectionOptionalParams): Promise<DiskAccessesGetAPrivateEndpointConnectionResponse>;
    /**
     * Approve or reject a private endpoint connection under disk access resource, this can't be used to
     * create a new private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection private endpoint connection object supplied in the body of the Put
     *                                  private endpoint connection operation.
     * @param options The options parameters.
     */
    beginUpdateAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams): Promise<SimplePollerLike<OperationState<DiskAccessesUpdateAPrivateEndpointConnectionResponse>, DiskAccessesUpdateAPrivateEndpointConnectionResponse>>;
    /**
     * Approve or reject a private endpoint connection under disk access resource, this can't be used to
     * create a new private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection private endpoint connection object supplied in the body of the Put
     *                                  private endpoint connection operation.
     * @param options The options parameters.
     */
    beginUpdateAPrivateEndpointConnectionAndWait(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams): Promise<DiskAccessesUpdateAPrivateEndpointConnectionResponse>;
    /**
     * Deletes a private endpoint connection under a disk access resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a private endpoint connection under a disk access resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAPrivateEndpointConnectionAndWait(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams): Promise<void>;
    /**
     * Gets the private link resources possible under disk access resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param options The options parameters.
     */
    getPrivateLinkResources(resourceGroupName: string, diskAccessName: string, options?: DiskAccessesGetPrivateLinkResourcesOptionalParams): Promise<DiskAccessesGetPrivateLinkResourcesResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListPrivateEndpointConnectionsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't be
     *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,
     *                       0-9, _ and -. The maximum name length is 80 characters.
     * @param nextLink The nextLink from the previous successful call to the ListPrivateEndpointConnections
     *                 method.
     * @param options The options parameters.
     */
    private _listPrivateEndpointConnectionsNext;
}
//# sourceMappingURL=diskAccesses.d.ts.map