{"version":3,"file":"cloudServicesUpdateDomain.js","sourceRoot":"","sources":["../../../src/operations/cloudServicesUpdateDomain.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { CloudServicesUpdateDomain } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { ComputeManagementClient } from \"../computeManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  UpdateDomain,\n  CloudServicesUpdateDomainListUpdateDomainsNextOptionalParams,\n  CloudServicesUpdateDomainListUpdateDomainsOptionalParams,\n  CloudServicesUpdateDomainListUpdateDomainsResponse,\n  CloudServicesUpdateDomainWalkUpdateDomainOptionalParams,\n  CloudServicesUpdateDomainGetUpdateDomainOptionalParams,\n  CloudServicesUpdateDomainGetUpdateDomainResponse,\n  CloudServicesUpdateDomainListUpdateDomainsNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing CloudServicesUpdateDomain operations. */\nexport class CloudServicesUpdateDomainImpl\n  implements CloudServicesUpdateDomain\n{\n  private readonly client: ComputeManagementClient;\n\n  /**\n   * Initialize a new instance of the class CloudServicesUpdateDomain class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ComputeManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets a list of all update domains in a cloud service.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  public listUpdateDomains(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServicesUpdateDomainListUpdateDomainsOptionalParams,\n  ): PagedAsyncIterableIterator<UpdateDomain> {\n    const iter = this.listUpdateDomainsPagingAll(\n      resourceGroupName,\n      cloudServiceName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listUpdateDomainsPagingPage(\n          resourceGroupName,\n          cloudServiceName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listUpdateDomainsPagingPage(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServicesUpdateDomainListUpdateDomainsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<UpdateDomain[]> {\n    let result: CloudServicesUpdateDomainListUpdateDomainsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listUpdateDomains(\n        resourceGroupName,\n        cloudServiceName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listUpdateDomainsNext(\n        resourceGroupName,\n        cloudServiceName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listUpdateDomainsPagingAll(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServicesUpdateDomainListUpdateDomainsOptionalParams,\n  ): AsyncIterableIterator<UpdateDomain> {\n    for await (const page of this.listUpdateDomainsPagingPage(\n      resourceGroupName,\n      cloudServiceName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Updates the role instances in the specified update domain.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are\n   *                     identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of\n   *                     1, and so on.\n   * @param options The options parameters.\n   */\n  async beginWalkUpdateDomain(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    updateDomain: number,\n    options?: CloudServicesUpdateDomainWalkUpdateDomainOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, cloudServiceName, updateDomain, options },\n      spec: walkUpdateDomainOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates the role instances in the specified update domain.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are\n   *                     identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of\n   *                     1, and so on.\n   * @param options The options parameters.\n   */\n  async beginWalkUpdateDomainAndWait(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    updateDomain: number,\n    options?: CloudServicesUpdateDomainWalkUpdateDomainOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginWalkUpdateDomain(\n      resourceGroupName,\n      cloudServiceName,\n      updateDomain,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the specified update domain of a cloud service. Use nextLink property in the response to get\n   * the next page of update domains. Do this till nextLink is null to fetch all the update domains.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are\n   *                     identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of\n   *                     1, and so on.\n   * @param options The options parameters.\n   */\n  getUpdateDomain(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    updateDomain: number,\n    options?: CloudServicesUpdateDomainGetUpdateDomainOptionalParams,\n  ): Promise<CloudServicesUpdateDomainGetUpdateDomainResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, cloudServiceName, updateDomain, options },\n      getUpdateDomainOperationSpec,\n    );\n  }\n\n  /**\n   * Gets a list of all update domains in a cloud service.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  private _listUpdateDomains(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServicesUpdateDomainListUpdateDomainsOptionalParams,\n  ): Promise<CloudServicesUpdateDomainListUpdateDomainsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, cloudServiceName, options },\n      listUpdateDomainsOperationSpec,\n    );\n  }\n\n  /**\n   * ListUpdateDomainsNext\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param nextLink The nextLink from the previous successful call to the ListUpdateDomains method.\n   * @param options The options parameters.\n   */\n  private _listUpdateDomainsNext(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    nextLink: string,\n    options?: CloudServicesUpdateDomainListUpdateDomainsNextOptionalParams,\n  ): Promise<CloudServicesUpdateDomainListUpdateDomainsNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, cloudServiceName, nextLink, options },\n      listUpdateDomainsNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst walkUpdateDomainOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains/{updateDomain}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters39,\n  queryParameters: [Parameters.apiVersion4],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName1,\n    Parameters.cloudServiceName,\n    Parameters.updateDomain,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getUpdateDomainOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains/{updateDomain}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UpdateDomain,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion4],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName1,\n    Parameters.cloudServiceName,\n    Parameters.updateDomain,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listUpdateDomainsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UpdateDomainListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion4],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName1,\n    Parameters.cloudServiceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listUpdateDomainsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UpdateDomainListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName1,\n    Parameters.cloudServiceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}