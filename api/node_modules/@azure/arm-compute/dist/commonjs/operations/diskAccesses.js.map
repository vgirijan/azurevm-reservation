{"version":3,"file":"diskAccesses.js","sourceRoot":"","sources":["../../../src/operations/diskAccesses.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { DiskAccesses } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { ComputeManagementClient } from \"../computeManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  DiskAccess,\n  DiskAccessesListNextOptionalParams,\n  DiskAccessesListOptionalParams,\n  DiskAccessesListResponse,\n  DiskAccessesListByResourceGroupNextOptionalParams,\n  DiskAccessesListByResourceGroupOptionalParams,\n  DiskAccessesListByResourceGroupResponse,\n  PrivateEndpointConnection,\n  DiskAccessesListPrivateEndpointConnectionsNextOptionalParams,\n  DiskAccessesListPrivateEndpointConnectionsOptionalParams,\n  DiskAccessesListPrivateEndpointConnectionsResponse,\n  DiskAccessesGetOptionalParams,\n  DiskAccessesGetResponse,\n  DiskAccessesCreateOrUpdateOptionalParams,\n  DiskAccessesCreateOrUpdateResponse,\n  DiskAccessUpdate,\n  DiskAccessesUpdateOptionalParams,\n  DiskAccessesUpdateResponse,\n  DiskAccessesDeleteOptionalParams,\n  DiskAccessesGetAPrivateEndpointConnectionOptionalParams,\n  DiskAccessesGetAPrivateEndpointConnectionResponse,\n  DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams,\n  DiskAccessesUpdateAPrivateEndpointConnectionResponse,\n  DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams,\n  DiskAccessesGetPrivateLinkResourcesOptionalParams,\n  DiskAccessesGetPrivateLinkResourcesResponse,\n  DiskAccessesListNextResponse,\n  DiskAccessesListByResourceGroupNextResponse,\n  DiskAccessesListPrivateEndpointConnectionsNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DiskAccesses operations. */\nexport class DiskAccessesImpl implements DiskAccesses {\n  private readonly client: ComputeManagementClient;\n\n  /**\n   * Initialize a new instance of the class DiskAccesses class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ComputeManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the disk access resources under a subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: DiskAccessesListOptionalParams,\n  ): PagedAsyncIterableIterator<DiskAccess> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: DiskAccessesListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DiskAccess[]> {\n    let result: DiskAccessesListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: DiskAccessesListOptionalParams,\n  ): AsyncIterableIterator<DiskAccess> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the disk access resources under a resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: DiskAccessesListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<DiskAccess> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: DiskAccessesListByResourceGroupOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DiskAccess[]> {\n    let result: DiskAccessesListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: DiskAccessesListByResourceGroupOptionalParams,\n  ): AsyncIterableIterator<DiskAccess> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List information about private endpoint connections under a disk access resource\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param options The options parameters.\n   */\n  public listPrivateEndpointConnections(\n    resourceGroupName: string,\n    diskAccessName: string,\n    options?: DiskAccessesListPrivateEndpointConnectionsOptionalParams,\n  ): PagedAsyncIterableIterator<PrivateEndpointConnection> {\n    const iter = this.listPrivateEndpointConnectionsPagingAll(\n      resourceGroupName,\n      diskAccessName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPrivateEndpointConnectionsPagingPage(\n          resourceGroupName,\n          diskAccessName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listPrivateEndpointConnectionsPagingPage(\n    resourceGroupName: string,\n    diskAccessName: string,\n    options?: DiskAccessesListPrivateEndpointConnectionsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<PrivateEndpointConnection[]> {\n    let result: DiskAccessesListPrivateEndpointConnectionsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listPrivateEndpointConnections(\n        resourceGroupName,\n        diskAccessName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listPrivateEndpointConnectionsNext(\n        resourceGroupName,\n        diskAccessName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPrivateEndpointConnectionsPagingAll(\n    resourceGroupName: string,\n    diskAccessName: string,\n    options?: DiskAccessesListPrivateEndpointConnectionsOptionalParams,\n  ): AsyncIterableIterator<PrivateEndpointConnection> {\n    for await (const page of this.listPrivateEndpointConnectionsPagingPage(\n      resourceGroupName,\n      diskAccessName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the disk access resources under a subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: DiskAccessesListOptionalParams,\n  ): Promise<DiskAccessesListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Lists all the disk access resources under a resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: DiskAccessesListByResourceGroupOptionalParams,\n  ): Promise<DiskAccessesListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec,\n    );\n  }\n\n  /**\n   * Gets information about a disk access resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    diskAccessName: string,\n    options?: DiskAccessesGetOptionalParams,\n  ): Promise<DiskAccessesGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, diskAccessName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Creates or updates a disk access resource\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param diskAccess disk access object supplied in the body of the Put disk access operation.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    diskAccessName: string,\n    diskAccess: DiskAccess,\n    options?: DiskAccessesCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DiskAccessesCreateOrUpdateResponse>,\n      DiskAccessesCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<DiskAccessesCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, diskAccessName, diskAccess, options },\n      spec: createOrUpdateOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      DiskAccessesCreateOrUpdateResponse,\n      OperationState<DiskAccessesCreateOrUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates a disk access resource\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param diskAccess disk access object supplied in the body of the Put disk access operation.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    diskAccessName: string,\n    diskAccess: DiskAccess,\n    options?: DiskAccessesCreateOrUpdateOptionalParams,\n  ): Promise<DiskAccessesCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      diskAccessName,\n      diskAccess,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates (patches) a disk access resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param diskAccess disk access object supplied in the body of the Patch disk access operation.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    diskAccessName: string,\n    diskAccess: DiskAccessUpdate,\n    options?: DiskAccessesUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DiskAccessesUpdateResponse>,\n      DiskAccessesUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<DiskAccessesUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, diskAccessName, diskAccess, options },\n      spec: updateOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      DiskAccessesUpdateResponse,\n      OperationState<DiskAccessesUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates (patches) a disk access resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param diskAccess disk access object supplied in the body of the Patch disk access operation.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    diskAccessName: string,\n    diskAccess: DiskAccessUpdate,\n    options?: DiskAccessesUpdateOptionalParams,\n  ): Promise<DiskAccessesUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      diskAccessName,\n      diskAccess,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a disk access resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    diskAccessName: string,\n    options?: DiskAccessesDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, diskAccessName, options },\n      spec: deleteOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a disk access resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    diskAccessName: string,\n    options?: DiskAccessesDeleteOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      diskAccessName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List information about private endpoint connections under a disk access resource\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param options The options parameters.\n   */\n  private _listPrivateEndpointConnections(\n    resourceGroupName: string,\n    diskAccessName: string,\n    options?: DiskAccessesListPrivateEndpointConnectionsOptionalParams,\n  ): Promise<DiskAccessesListPrivateEndpointConnectionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, diskAccessName, options },\n      listPrivateEndpointConnectionsOperationSpec,\n    );\n  }\n\n  /**\n   * Gets information about a private endpoint connection under a disk access resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  getAPrivateEndpointConnection(\n    resourceGroupName: string,\n    diskAccessName: string,\n    privateEndpointConnectionName: string,\n    options?: DiskAccessesGetAPrivateEndpointConnectionOptionalParams,\n  ): Promise<DiskAccessesGetAPrivateEndpointConnectionResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        diskAccessName,\n        privateEndpointConnectionName,\n        options,\n      },\n      getAPrivateEndpointConnectionOperationSpec,\n    );\n  }\n\n  /**\n   * Approve or reject a private endpoint connection under disk access resource, this can't be used to\n   * create a new private endpoint connection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param privateEndpointConnection private endpoint connection object supplied in the body of the Put\n   *                                  private endpoint connection operation.\n   * @param options The options parameters.\n   */\n  async beginUpdateAPrivateEndpointConnection(\n    resourceGroupName: string,\n    diskAccessName: string,\n    privateEndpointConnectionName: string,\n    privateEndpointConnection: PrivateEndpointConnection,\n    options?: DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DiskAccessesUpdateAPrivateEndpointConnectionResponse>,\n      DiskAccessesUpdateAPrivateEndpointConnectionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<DiskAccessesUpdateAPrivateEndpointConnectionResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        diskAccessName,\n        privateEndpointConnectionName,\n        privateEndpointConnection,\n        options,\n      },\n      spec: updateAPrivateEndpointConnectionOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      DiskAccessesUpdateAPrivateEndpointConnectionResponse,\n      OperationState<DiskAccessesUpdateAPrivateEndpointConnectionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Approve or reject a private endpoint connection under disk access resource, this can't be used to\n   * create a new private endpoint connection.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param privateEndpointConnection private endpoint connection object supplied in the body of the Put\n   *                                  private endpoint connection operation.\n   * @param options The options parameters.\n   */\n  async beginUpdateAPrivateEndpointConnectionAndWait(\n    resourceGroupName: string,\n    diskAccessName: string,\n    privateEndpointConnectionName: string,\n    privateEndpointConnection: PrivateEndpointConnection,\n    options?: DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams,\n  ): Promise<DiskAccessesUpdateAPrivateEndpointConnectionResponse> {\n    const poller = await this.beginUpdateAPrivateEndpointConnection(\n      resourceGroupName,\n      diskAccessName,\n      privateEndpointConnectionName,\n      privateEndpointConnection,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a private endpoint connection under a disk access resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  async beginDeleteAPrivateEndpointConnection(\n    resourceGroupName: string,\n    diskAccessName: string,\n    privateEndpointConnectionName: string,\n    options?: DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        diskAccessName,\n        privateEndpointConnectionName,\n        options,\n      },\n      spec: deleteAPrivateEndpointConnectionOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a private endpoint connection under a disk access resource.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  async beginDeleteAPrivateEndpointConnectionAndWait(\n    resourceGroupName: string,\n    diskAccessName: string,\n    privateEndpointConnectionName: string,\n    options?: DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDeleteAPrivateEndpointConnection(\n      resourceGroupName,\n      diskAccessName,\n      privateEndpointConnectionName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the private link resources possible under disk access resource\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param options The options parameters.\n   */\n  getPrivateLinkResources(\n    resourceGroupName: string,\n    diskAccessName: string,\n    options?: DiskAccessesGetPrivateLinkResourcesOptionalParams,\n  ): Promise<DiskAccessesGetPrivateLinkResourcesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, diskAccessName, options },\n      getPrivateLinkResourcesOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: DiskAccessesListNextOptionalParams,\n  ): Promise<DiskAccessesListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: DiskAccessesListByResourceGroupNextOptionalParams,\n  ): Promise<DiskAccessesListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListPrivateEndpointConnectionsNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param diskAccessName The name of the disk access resource that is being created. The name can't be\n   *                       changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z,\n   *                       0-9, _ and -. The maximum name length is 80 characters.\n   * @param nextLink The nextLink from the previous successful call to the ListPrivateEndpointConnections\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listPrivateEndpointConnectionsNext(\n    resourceGroupName: string,\n    diskAccessName: string,\n    nextLink: string,\n    options?: DiskAccessesListPrivateEndpointConnectionsNextOptionalParams,\n  ): Promise<DiskAccessesListPrivateEndpointConnectionsNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, diskAccessName, nextLink, options },\n      listPrivateEndpointConnectionsNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskAccesses\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskAccessList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskAccessList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.diskAccessName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    201: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    202: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    204: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.diskAccess,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.diskAccessName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    201: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    202: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    204: {\n      bodyMapper: Mappers.DiskAccess,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.diskAccess1,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.diskAccessName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.diskAccessName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listPrivateEndpointConnectionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnectionListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.diskAccessName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnection,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.diskAccessName,\n    Parameters.privateEndpointConnectionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst updateAPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n    httpMethod: \"PUT\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.PrivateEndpointConnection,\n      },\n      201: {\n        bodyMapper: Mappers.PrivateEndpointConnection,\n      },\n      202: {\n        bodyMapper: Mappers.PrivateEndpointConnection,\n      },\n      204: {\n        bodyMapper: Mappers.PrivateEndpointConnection,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    requestBody: Parameters.privateEndpointConnection,\n    queryParameters: [Parameters.apiVersion1],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.diskAccessName,\n      Parameters.privateEndpointConnectionName,\n    ],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n  };\nconst deleteAPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n    httpMethod: \"DELETE\",\n    responses: {\n      200: {},\n      201: {},\n      202: {},\n      204: {},\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    queryParameters: [Parameters.apiVersion1],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.diskAccessName,\n      Parameters.privateEndpointConnectionName,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getPrivateLinkResourcesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privatelinkresources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResourceListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.diskAccessName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskAccessList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskAccessList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listPrivateEndpointConnectionsNextOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.PrivateEndpointConnectionListResult,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    urlParameters: [\n      Parameters.$host,\n      Parameters.nextLink,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.diskAccessName,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\n"]}