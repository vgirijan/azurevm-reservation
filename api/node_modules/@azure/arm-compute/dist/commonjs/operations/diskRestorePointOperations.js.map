{"version":3,"file":"diskRestorePointOperations.js","sourceRoot":"","sources":["../../../src/operations/diskRestorePointOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { DiskRestorePointOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { ComputeManagementClient } from \"../computeManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  DiskRestorePoint,\n  DiskRestorePointListByRestorePointNextOptionalParams,\n  DiskRestorePointListByRestorePointOptionalParams,\n  DiskRestorePointListByRestorePointResponse,\n  DiskRestorePointGetOptionalParams,\n  DiskRestorePointGetResponse,\n  GrantAccessData,\n  DiskRestorePointGrantAccessOptionalParams,\n  DiskRestorePointGrantAccessResponse,\n  DiskRestorePointRevokeAccessOptionalParams,\n  DiskRestorePointListByRestorePointNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DiskRestorePointOperations operations. */\nexport class DiskRestorePointOperationsImpl\n  implements DiskRestorePointOperations\n{\n  private readonly client: ComputeManagementClient;\n\n  /**\n   * Initialize a new instance of the class DiskRestorePointOperations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ComputeManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists diskRestorePoints under a vmRestorePoint.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param restorePointCollectionName The name of the restore point collection that the disk restore\n   *                                   point belongs.\n   * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.\n   * @param options The options parameters.\n   */\n  public listByRestorePoint(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    options?: DiskRestorePointListByRestorePointOptionalParams,\n  ): PagedAsyncIterableIterator<DiskRestorePoint> {\n    const iter = this.listByRestorePointPagingAll(\n      resourceGroupName,\n      restorePointCollectionName,\n      vmRestorePointName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByRestorePointPagingPage(\n          resourceGroupName,\n          restorePointCollectionName,\n          vmRestorePointName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listByRestorePointPagingPage(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    options?: DiskRestorePointListByRestorePointOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DiskRestorePoint[]> {\n    let result: DiskRestorePointListByRestorePointResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByRestorePoint(\n        resourceGroupName,\n        restorePointCollectionName,\n        vmRestorePointName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByRestorePointNext(\n        resourceGroupName,\n        restorePointCollectionName,\n        vmRestorePointName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByRestorePointPagingAll(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    options?: DiskRestorePointListByRestorePointOptionalParams,\n  ): AsyncIterableIterator<DiskRestorePoint> {\n    for await (const page of this.listByRestorePointPagingPage(\n      resourceGroupName,\n      restorePointCollectionName,\n      vmRestorePointName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists diskRestorePoints under a vmRestorePoint.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param restorePointCollectionName The name of the restore point collection that the disk restore\n   *                                   point belongs.\n   * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.\n   * @param options The options parameters.\n   */\n  private _listByRestorePoint(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    options?: DiskRestorePointListByRestorePointOptionalParams,\n  ): Promise<DiskRestorePointListByRestorePointResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        restorePointCollectionName,\n        vmRestorePointName,\n        options,\n      },\n      listByRestorePointOperationSpec,\n    );\n  }\n\n  /**\n   * Get disk restorePoint resource\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param restorePointCollectionName The name of the restore point collection that the disk restore\n   *                                   point belongs.\n   * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.\n   * @param diskRestorePointName The name of the DiskRestorePoint\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    diskRestorePointName: string,\n    options?: DiskRestorePointGetOptionalParams,\n  ): Promise<DiskRestorePointGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        restorePointCollectionName,\n        vmRestorePointName,\n        diskRestorePointName,\n        options,\n      },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Grants access to a diskRestorePoint.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param restorePointCollectionName The name of the restore point collection that the disk restore\n   *                                   point belongs.\n   * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.\n   * @param diskRestorePointName The name of the DiskRestorePoint\n   * @param grantAccessData Access data object supplied in the body of the get disk access operation.\n   * @param options The options parameters.\n   */\n  async beginGrantAccess(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    diskRestorePointName: string,\n    grantAccessData: GrantAccessData,\n    options?: DiskRestorePointGrantAccessOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DiskRestorePointGrantAccessResponse>,\n      DiskRestorePointGrantAccessResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<DiskRestorePointGrantAccessResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        restorePointCollectionName,\n        vmRestorePointName,\n        diskRestorePointName,\n        grantAccessData,\n        options,\n      },\n      spec: grantAccessOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      DiskRestorePointGrantAccessResponse,\n      OperationState<DiskRestorePointGrantAccessResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Grants access to a diskRestorePoint.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param restorePointCollectionName The name of the restore point collection that the disk restore\n   *                                   point belongs.\n   * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.\n   * @param diskRestorePointName The name of the DiskRestorePoint\n   * @param grantAccessData Access data object supplied in the body of the get disk access operation.\n   * @param options The options parameters.\n   */\n  async beginGrantAccessAndWait(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    diskRestorePointName: string,\n    grantAccessData: GrantAccessData,\n    options?: DiskRestorePointGrantAccessOptionalParams,\n  ): Promise<DiskRestorePointGrantAccessResponse> {\n    const poller = await this.beginGrantAccess(\n      resourceGroupName,\n      restorePointCollectionName,\n      vmRestorePointName,\n      diskRestorePointName,\n      grantAccessData,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Revokes access to a diskRestorePoint.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param restorePointCollectionName The name of the restore point collection that the disk restore\n   *                                   point belongs.\n   * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.\n   * @param diskRestorePointName The name of the DiskRestorePoint\n   * @param options The options parameters.\n   */\n  async beginRevokeAccess(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    diskRestorePointName: string,\n    options?: DiskRestorePointRevokeAccessOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        restorePointCollectionName,\n        vmRestorePointName,\n        diskRestorePointName,\n        options,\n      },\n      spec: revokeAccessOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Revokes access to a diskRestorePoint.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param restorePointCollectionName The name of the restore point collection that the disk restore\n   *                                   point belongs.\n   * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.\n   * @param diskRestorePointName The name of the DiskRestorePoint\n   * @param options The options parameters.\n   */\n  async beginRevokeAccessAndWait(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    diskRestorePointName: string,\n    options?: DiskRestorePointRevokeAccessOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginRevokeAccess(\n      resourceGroupName,\n      restorePointCollectionName,\n      vmRestorePointName,\n      diskRestorePointName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListByRestorePointNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param restorePointCollectionName The name of the restore point collection that the disk restore\n   *                                   point belongs.\n   * @param vmRestorePointName The name of the vm restore point that the disk disk restore point belongs.\n   * @param nextLink The nextLink from the previous successful call to the ListByRestorePoint method.\n   * @param options The options parameters.\n   */\n  private _listByRestorePointNext(\n    resourceGroupName: string,\n    restorePointCollectionName: string,\n    vmRestorePointName: string,\n    nextLink: string,\n    options?: DiskRestorePointListByRestorePointNextOptionalParams,\n  ): Promise<DiskRestorePointListByRestorePointNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        restorePointCollectionName,\n        vmRestorePointName,\n        nextLink,\n        options,\n      },\n      listByRestorePointNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listByRestorePointOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskRestorePointList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.restorePointCollectionName,\n    Parameters.vmRestorePointName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskRestorePoint,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.restorePointCollectionName,\n    Parameters.vmRestorePointName,\n    Parameters.diskRestorePointName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst grantAccessOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}/beginGetAccess\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AccessUri,\n    },\n    201: {\n      bodyMapper: Mappers.AccessUri,\n    },\n    202: {\n      bodyMapper: Mappers.AccessUri,\n    },\n    204: {\n      bodyMapper: Mappers.AccessUri,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.grantAccessData,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.restorePointCollectionName,\n    Parameters.vmRestorePointName,\n    Parameters.diskRestorePointName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst revokeAccessOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}/endGetAccess\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.restorePointCollectionName,\n    Parameters.vmRestorePointName,\n    Parameters.diskRestorePointName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByRestorePointNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiskRestorePointList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.restorePointCollectionName,\n    Parameters.vmRestorePointName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}