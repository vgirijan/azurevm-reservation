/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Origin} that the service accepts. */
export var KnownOrigin;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(KnownOrigin || (KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
export var KnownActionType;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(KnownActionType || (KnownActionType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link ExpandTypesForGetCapacityReservationGroups} that the service accepts. */
export var KnownExpandTypesForGetCapacityReservationGroups;
(function (KnownExpandTypesForGetCapacityReservationGroups) {
    /** VirtualMachineScaleSetVMsRef */
    KnownExpandTypesForGetCapacityReservationGroups["VirtualMachineScaleSetVMsRef"] = "virtualMachineScaleSetVMs/$ref";
    /** VirtualMachinesRef */
    KnownExpandTypesForGetCapacityReservationGroups["VirtualMachinesRef"] = "virtualMachines/$ref";
})(KnownExpandTypesForGetCapacityReservationGroups || (KnownExpandTypesForGetCapacityReservationGroups = {}));
/** Known values of {@link ResourceIdOptionsForGetCapacityReservationGroups} that the service accepts. */
export var KnownResourceIdOptionsForGetCapacityReservationGroups;
(function (KnownResourceIdOptionsForGetCapacityReservationGroups) {
    /** CreatedInSubscription */
    KnownResourceIdOptionsForGetCapacityReservationGroups["CreatedInSubscription"] = "CreatedInSubscription";
    /** SharedWithSubscription */
    KnownResourceIdOptionsForGetCapacityReservationGroups["SharedWithSubscription"] = "SharedWithSubscription";
    /** All */
    KnownResourceIdOptionsForGetCapacityReservationGroups["All"] = "All";
})(KnownResourceIdOptionsForGetCapacityReservationGroups || (KnownResourceIdOptionsForGetCapacityReservationGroups = {}));
/** Known values of {@link StorageAccountTypes} that the service accepts. */
export var KnownStorageAccountTypes;
(function (KnownStorageAccountTypes) {
    /** StandardLRS */
    KnownStorageAccountTypes["StandardLRS"] = "Standard_LRS";
    /** PremiumLRS */
    KnownStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    /** StandardSSDLRS */
    KnownStorageAccountTypes["StandardSSDLRS"] = "StandardSSD_LRS";
    /** UltraSSDLRS */
    KnownStorageAccountTypes["UltraSSDLRS"] = "UltraSSD_LRS";
    /** PremiumZRS */
    KnownStorageAccountTypes["PremiumZRS"] = "Premium_ZRS";
    /** StandardSSDZRS */
    KnownStorageAccountTypes["StandardSSDZRS"] = "StandardSSD_ZRS";
    /** PremiumV2LRS */
    KnownStorageAccountTypes["PremiumV2LRS"] = "PremiumV2_LRS";
})(KnownStorageAccountTypes || (KnownStorageAccountTypes = {}));
/** Known values of {@link HyperVGenerationTypes} that the service accepts. */
export var KnownHyperVGenerationTypes;
(function (KnownHyperVGenerationTypes) {
    /** V1 */
    KnownHyperVGenerationTypes["V1"] = "V1";
    /** V2 */
    KnownHyperVGenerationTypes["V2"] = "V2";
})(KnownHyperVGenerationTypes || (KnownHyperVGenerationTypes = {}));
/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export var KnownExtendedLocationTypes;
(function (KnownExtendedLocationTypes) {
    /** EdgeZone */
    KnownExtendedLocationTypes["EdgeZone"] = "EdgeZone";
})(KnownExtendedLocationTypes || (KnownExtendedLocationTypes = {}));
/** Known values of {@link VmDiskTypes} that the service accepts. */
export var KnownVmDiskTypes;
(function (KnownVmDiskTypes) {
    /** None */
    KnownVmDiskTypes["None"] = "None";
    /** Unmanaged */
    KnownVmDiskTypes["Unmanaged"] = "Unmanaged";
})(KnownVmDiskTypes || (KnownVmDiskTypes = {}));
/** Known values of {@link ArchitectureTypes} that the service accepts. */
export var KnownArchitectureTypes;
(function (KnownArchitectureTypes) {
    /** X64 */
    KnownArchitectureTypes["X64"] = "x64";
    /** Arm64 */
    KnownArchitectureTypes["Arm64"] = "Arm64";
})(KnownArchitectureTypes || (KnownArchitectureTypes = {}));
/** Known values of {@link ImageState} that the service accepts. */
export var KnownImageState;
(function (KnownImageState) {
    /** Active */
    KnownImageState["Active"] = "Active";
    /** ScheduledForDeprecation */
    KnownImageState["ScheduledForDeprecation"] = "ScheduledForDeprecation";
    /** Deprecated */
    KnownImageState["Deprecated"] = "Deprecated";
})(KnownImageState || (KnownImageState = {}));
/** Known values of {@link AlternativeType} that the service accepts. */
export var KnownAlternativeType;
(function (KnownAlternativeType) {
    /** None */
    KnownAlternativeType["None"] = "None";
    /** Offer */
    KnownAlternativeType["Offer"] = "Offer";
    /** Plan */
    KnownAlternativeType["Plan"] = "Plan";
})(KnownAlternativeType || (KnownAlternativeType = {}));
/** Known values of {@link RepairAction} that the service accepts. */
export var KnownRepairAction;
(function (KnownRepairAction) {
    /** Replace */
    KnownRepairAction["Replace"] = "Replace";
    /** Restart */
    KnownRepairAction["Restart"] = "Restart";
    /** Reimage */
    KnownRepairAction["Reimage"] = "Reimage";
})(KnownRepairAction || (KnownRepairAction = {}));
/** Known values of {@link WindowsVMGuestPatchMode} that the service accepts. */
export var KnownWindowsVMGuestPatchMode;
(function (KnownWindowsVMGuestPatchMode) {
    /** Manual */
    KnownWindowsVMGuestPatchMode["Manual"] = "Manual";
    /** AutomaticByOS */
    KnownWindowsVMGuestPatchMode["AutomaticByOS"] = "AutomaticByOS";
    /** AutomaticByPlatform */
    KnownWindowsVMGuestPatchMode["AutomaticByPlatform"] = "AutomaticByPlatform";
})(KnownWindowsVMGuestPatchMode || (KnownWindowsVMGuestPatchMode = {}));
/** Known values of {@link WindowsPatchAssessmentMode} that the service accepts. */
export var KnownWindowsPatchAssessmentMode;
(function (KnownWindowsPatchAssessmentMode) {
    /** ImageDefault */
    KnownWindowsPatchAssessmentMode["ImageDefault"] = "ImageDefault";
    /** AutomaticByPlatform */
    KnownWindowsPatchAssessmentMode["AutomaticByPlatform"] = "AutomaticByPlatform";
})(KnownWindowsPatchAssessmentMode || (KnownWindowsPatchAssessmentMode = {}));
/** Known values of {@link WindowsVMGuestPatchAutomaticByPlatformRebootSetting} that the service accepts. */
export var KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting;
(function (KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting) {
    /** Unknown */
    KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting["Unknown"] = "Unknown";
    /** IfRequired */
    KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting["IfRequired"] = "IfRequired";
    /** Never */
    KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting["Never"] = "Never";
    /** Always */
    KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting["Always"] = "Always";
})(KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting || (KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting = {}));
/** Known values of {@link LinuxVMGuestPatchMode} that the service accepts. */
export var KnownLinuxVMGuestPatchMode;
(function (KnownLinuxVMGuestPatchMode) {
    /** ImageDefault */
    KnownLinuxVMGuestPatchMode["ImageDefault"] = "ImageDefault";
    /** AutomaticByPlatform */
    KnownLinuxVMGuestPatchMode["AutomaticByPlatform"] = "AutomaticByPlatform";
})(KnownLinuxVMGuestPatchMode || (KnownLinuxVMGuestPatchMode = {}));
/** Known values of {@link LinuxPatchAssessmentMode} that the service accepts. */
export var KnownLinuxPatchAssessmentMode;
(function (KnownLinuxPatchAssessmentMode) {
    /** ImageDefault */
    KnownLinuxPatchAssessmentMode["ImageDefault"] = "ImageDefault";
    /** AutomaticByPlatform */
    KnownLinuxPatchAssessmentMode["AutomaticByPlatform"] = "AutomaticByPlatform";
})(KnownLinuxPatchAssessmentMode || (KnownLinuxPatchAssessmentMode = {}));
/** Known values of {@link LinuxVMGuestPatchAutomaticByPlatformRebootSetting} that the service accepts. */
export var KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting;
(function (KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting) {
    /** Unknown */
    KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting["Unknown"] = "Unknown";
    /** IfRequired */
    KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting["IfRequired"] = "IfRequired";
    /** Never */
    KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting["Never"] = "Never";
    /** Always */
    KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting["Always"] = "Always";
})(KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting || (KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting = {}));
/** Known values of {@link DiskCreateOptionTypes} that the service accepts. */
export var KnownDiskCreateOptionTypes;
(function (KnownDiskCreateOptionTypes) {
    /** FromImage */
    KnownDiskCreateOptionTypes["FromImage"] = "FromImage";
    /** Empty */
    KnownDiskCreateOptionTypes["Empty"] = "Empty";
    /** Attach */
    KnownDiskCreateOptionTypes["Attach"] = "Attach";
    /** Copy */
    KnownDiskCreateOptionTypes["Copy"] = "Copy";
    /** Restore */
    KnownDiskCreateOptionTypes["Restore"] = "Restore";
})(KnownDiskCreateOptionTypes || (KnownDiskCreateOptionTypes = {}));
/** Known values of {@link DiffDiskOptions} that the service accepts. */
export var KnownDiffDiskOptions;
(function (KnownDiffDiskOptions) {
    /** Local */
    KnownDiffDiskOptions["Local"] = "Local";
})(KnownDiffDiskOptions || (KnownDiffDiskOptions = {}));
/** Known values of {@link DiffDiskPlacement} that the service accepts. */
export var KnownDiffDiskPlacement;
(function (KnownDiffDiskPlacement) {
    /** CacheDisk */
    KnownDiffDiskPlacement["CacheDisk"] = "CacheDisk";
    /** ResourceDisk */
    KnownDiffDiskPlacement["ResourceDisk"] = "ResourceDisk";
    /** NvmeDisk */
    KnownDiffDiskPlacement["NvmeDisk"] = "NvmeDisk";
})(KnownDiffDiskPlacement || (KnownDiffDiskPlacement = {}));
/** Known values of {@link SecurityEncryptionTypes} that the service accepts. */
export var KnownSecurityEncryptionTypes;
(function (KnownSecurityEncryptionTypes) {
    /** VMGuestStateOnly */
    KnownSecurityEncryptionTypes["VMGuestStateOnly"] = "VMGuestStateOnly";
    /** DiskWithVMGuestState */
    KnownSecurityEncryptionTypes["DiskWithVMGuestState"] = "DiskWithVMGuestState";
    /** NonPersistedTPM */
    KnownSecurityEncryptionTypes["NonPersistedTPM"] = "NonPersistedTPM";
})(KnownSecurityEncryptionTypes || (KnownSecurityEncryptionTypes = {}));
/** Known values of {@link DiskDeleteOptionTypes} that the service accepts. */
export var KnownDiskDeleteOptionTypes;
(function (KnownDiskDeleteOptionTypes) {
    /** Delete */
    KnownDiskDeleteOptionTypes["Delete"] = "Delete";
    /** Detach */
    KnownDiskDeleteOptionTypes["Detach"] = "Detach";
})(KnownDiskDeleteOptionTypes || (KnownDiskDeleteOptionTypes = {}));
/** Known values of {@link DiskControllerTypes} that the service accepts. */
export var KnownDiskControllerTypes;
(function (KnownDiskControllerTypes) {
    /** Scsi */
    KnownDiskControllerTypes["Scsi"] = "SCSI";
    /** NVMe */
    KnownDiskControllerTypes["NVMe"] = "NVMe";
})(KnownDiskControllerTypes || (KnownDiskControllerTypes = {}));
/** Known values of {@link DomainNameLabelScopeTypes} that the service accepts. */
export var KnownDomainNameLabelScopeTypes;
(function (KnownDomainNameLabelScopeTypes) {
    /** TenantReuse */
    KnownDomainNameLabelScopeTypes["TenantReuse"] = "TenantReuse";
    /** SubscriptionReuse */
    KnownDomainNameLabelScopeTypes["SubscriptionReuse"] = "SubscriptionReuse";
    /** ResourceGroupReuse */
    KnownDomainNameLabelScopeTypes["ResourceGroupReuse"] = "ResourceGroupReuse";
    /** NoReuse */
    KnownDomainNameLabelScopeTypes["NoReuse"] = "NoReuse";
})(KnownDomainNameLabelScopeTypes || (KnownDomainNameLabelScopeTypes = {}));
/** Known values of {@link IPVersion} that the service accepts. */
export var KnownIPVersion;
(function (KnownIPVersion) {
    /** IPv4 */
    KnownIPVersion["IPv4"] = "IPv4";
    /** IPv6 */
    KnownIPVersion["IPv6"] = "IPv6";
})(KnownIPVersion || (KnownIPVersion = {}));
/** Known values of {@link DeleteOptions} that the service accepts. */
export var KnownDeleteOptions;
(function (KnownDeleteOptions) {
    /** Delete */
    KnownDeleteOptions["Delete"] = "Delete";
    /** Detach */
    KnownDeleteOptions["Detach"] = "Detach";
})(KnownDeleteOptions || (KnownDeleteOptions = {}));
/** Known values of {@link PublicIPAddressSkuName} that the service accepts. */
export var KnownPublicIPAddressSkuName;
(function (KnownPublicIPAddressSkuName) {
    /** Basic */
    KnownPublicIPAddressSkuName["Basic"] = "Basic";
    /** Standard */
    KnownPublicIPAddressSkuName["Standard"] = "Standard";
})(KnownPublicIPAddressSkuName || (KnownPublicIPAddressSkuName = {}));
/** Known values of {@link PublicIPAddressSkuTier} that the service accepts. */
export var KnownPublicIPAddressSkuTier;
(function (KnownPublicIPAddressSkuTier) {
    /** Regional */
    KnownPublicIPAddressSkuTier["Regional"] = "Regional";
    /** Global */
    KnownPublicIPAddressSkuTier["Global"] = "Global";
})(KnownPublicIPAddressSkuTier || (KnownPublicIPAddressSkuTier = {}));
/** Known values of {@link NetworkInterfaceAuxiliaryMode} that the service accepts. */
export var KnownNetworkInterfaceAuxiliaryMode;
(function (KnownNetworkInterfaceAuxiliaryMode) {
    /** None */
    KnownNetworkInterfaceAuxiliaryMode["None"] = "None";
    /** AcceleratedConnections */
    KnownNetworkInterfaceAuxiliaryMode["AcceleratedConnections"] = "AcceleratedConnections";
    /** Floating */
    KnownNetworkInterfaceAuxiliaryMode["Floating"] = "Floating";
})(KnownNetworkInterfaceAuxiliaryMode || (KnownNetworkInterfaceAuxiliaryMode = {}));
/** Known values of {@link NetworkInterfaceAuxiliarySku} that the service accepts. */
export var KnownNetworkInterfaceAuxiliarySku;
(function (KnownNetworkInterfaceAuxiliarySku) {
    /** None */
    KnownNetworkInterfaceAuxiliarySku["None"] = "None";
    /** A1 */
    KnownNetworkInterfaceAuxiliarySku["A1"] = "A1";
    /** A2 */
    KnownNetworkInterfaceAuxiliarySku["A2"] = "A2";
    /** A4 */
    KnownNetworkInterfaceAuxiliarySku["A4"] = "A4";
    /** A8 */
    KnownNetworkInterfaceAuxiliarySku["A8"] = "A8";
})(KnownNetworkInterfaceAuxiliarySku || (KnownNetworkInterfaceAuxiliarySku = {}));
/** Known values of {@link NetworkApiVersion} that the service accepts. */
export var KnownNetworkApiVersion;
(function (KnownNetworkApiVersion) {
    /** TwoThousandTwenty1101 */
    KnownNetworkApiVersion["TwoThousandTwenty1101"] = "2020-11-01";
    /** TwoThousandTwentyTwo1101 */
    KnownNetworkApiVersion["TwoThousandTwentyTwo1101"] = "2022-11-01";
})(KnownNetworkApiVersion || (KnownNetworkApiVersion = {}));
/** Known values of {@link SecurityTypes} that the service accepts. */
export var KnownSecurityTypes;
(function (KnownSecurityTypes) {
    /** TrustedLaunch */
    KnownSecurityTypes["TrustedLaunch"] = "TrustedLaunch";
    /** ConfidentialVM */
    KnownSecurityTypes["ConfidentialVM"] = "ConfidentialVM";
})(KnownSecurityTypes || (KnownSecurityTypes = {}));
/** Known values of {@link Mode} that the service accepts. */
export var KnownMode;
(function (KnownMode) {
    /** Audit */
    KnownMode["Audit"] = "Audit";
    /** Enforce */
    KnownMode["Enforce"] = "Enforce";
})(KnownMode || (KnownMode = {}));
/** Known values of {@link Modes} that the service accepts. */
export var KnownModes;
(function (KnownModes) {
    /** Audit */
    KnownModes["Audit"] = "Audit";
    /** Enforce */
    KnownModes["Enforce"] = "Enforce";
    /** Disabled */
    KnownModes["Disabled"] = "Disabled";
})(KnownModes || (KnownModes = {}));
/** Known values of {@link VirtualMachinePriorityTypes} that the service accepts. */
export var KnownVirtualMachinePriorityTypes;
(function (KnownVirtualMachinePriorityTypes) {
    /** Regular */
    KnownVirtualMachinePriorityTypes["Regular"] = "Regular";
    /** Low */
    KnownVirtualMachinePriorityTypes["Low"] = "Low";
    /** Spot */
    KnownVirtualMachinePriorityTypes["Spot"] = "Spot";
})(KnownVirtualMachinePriorityTypes || (KnownVirtualMachinePriorityTypes = {}));
/** Known values of {@link VirtualMachineEvictionPolicyTypes} that the service accepts. */
export var KnownVirtualMachineEvictionPolicyTypes;
(function (KnownVirtualMachineEvictionPolicyTypes) {
    /** Deallocate */
    KnownVirtualMachineEvictionPolicyTypes["Deallocate"] = "Deallocate";
    /** Delete */
    KnownVirtualMachineEvictionPolicyTypes["Delete"] = "Delete";
})(KnownVirtualMachineEvictionPolicyTypes || (KnownVirtualMachineEvictionPolicyTypes = {}));
/** Known values of {@link VirtualMachineScaleSetScaleInRules} that the service accepts. */
export var KnownVirtualMachineScaleSetScaleInRules;
(function (KnownVirtualMachineScaleSetScaleInRules) {
    /** Default */
    KnownVirtualMachineScaleSetScaleInRules["Default"] = "Default";
    /** OldestVM */
    KnownVirtualMachineScaleSetScaleInRules["OldestVM"] = "OldestVM";
    /** NewestVM */
    KnownVirtualMachineScaleSetScaleInRules["NewestVM"] = "NewestVM";
})(KnownVirtualMachineScaleSetScaleInRules || (KnownVirtualMachineScaleSetScaleInRules = {}));
/** Known values of {@link OrchestrationMode} that the service accepts. */
export var KnownOrchestrationMode;
(function (KnownOrchestrationMode) {
    /** Uniform */
    KnownOrchestrationMode["Uniform"] = "Uniform";
    /** Flexible */
    KnownOrchestrationMode["Flexible"] = "Flexible";
})(KnownOrchestrationMode || (KnownOrchestrationMode = {}));
/** Known values of {@link RebalanceStrategy} that the service accepts. */
export var KnownRebalanceStrategy;
(function (KnownRebalanceStrategy) {
    /** Recreate */
    KnownRebalanceStrategy["Recreate"] = "Recreate";
})(KnownRebalanceStrategy || (KnownRebalanceStrategy = {}));
/** Known values of {@link RebalanceBehavior} that the service accepts. */
export var KnownRebalanceBehavior;
(function (KnownRebalanceBehavior) {
    /** CreateBeforeDelete */
    KnownRebalanceBehavior["CreateBeforeDelete"] = "CreateBeforeDelete";
})(KnownRebalanceBehavior || (KnownRebalanceBehavior = {}));
/** Known values of {@link ZonalPlatformFaultDomainAlignMode} that the service accepts. */
export var KnownZonalPlatformFaultDomainAlignMode;
(function (KnownZonalPlatformFaultDomainAlignMode) {
    /** Aligned */
    KnownZonalPlatformFaultDomainAlignMode["Aligned"] = "Aligned";
    /** Unaligned */
    KnownZonalPlatformFaultDomainAlignMode["Unaligned"] = "Unaligned";
})(KnownZonalPlatformFaultDomainAlignMode || (KnownZonalPlatformFaultDomainAlignMode = {}));
/** Known values of {@link AllocationStrategy} that the service accepts. */
export var KnownAllocationStrategy;
(function (KnownAllocationStrategy) {
    /** LowestPrice */
    KnownAllocationStrategy["LowestPrice"] = "LowestPrice";
    /** CapacityOptimized */
    KnownAllocationStrategy["CapacityOptimized"] = "CapacityOptimized";
    /** Prioritized */
    KnownAllocationStrategy["Prioritized"] = "Prioritized";
})(KnownAllocationStrategy || (KnownAllocationStrategy = {}));
/** Known values of {@link VirtualMachineSizeTypes} that the service accepts. */
export var KnownVirtualMachineSizeTypes;
(function (KnownVirtualMachineSizeTypes) {
    /** BasicA0 */
    KnownVirtualMachineSizeTypes["BasicA0"] = "Basic_A0";
    /** BasicA1 */
    KnownVirtualMachineSizeTypes["BasicA1"] = "Basic_A1";
    /** BasicA2 */
    KnownVirtualMachineSizeTypes["BasicA2"] = "Basic_A2";
    /** BasicA3 */
    KnownVirtualMachineSizeTypes["BasicA3"] = "Basic_A3";
    /** BasicA4 */
    KnownVirtualMachineSizeTypes["BasicA4"] = "Basic_A4";
    /** StandardA0 */
    KnownVirtualMachineSizeTypes["StandardA0"] = "Standard_A0";
    /** StandardA1 */
    KnownVirtualMachineSizeTypes["StandardA1"] = "Standard_A1";
    /** StandardA2 */
    KnownVirtualMachineSizeTypes["StandardA2"] = "Standard_A2";
    /** StandardA3 */
    KnownVirtualMachineSizeTypes["StandardA3"] = "Standard_A3";
    /** StandardA4 */
    KnownVirtualMachineSizeTypes["StandardA4"] = "Standard_A4";
    /** StandardA5 */
    KnownVirtualMachineSizeTypes["StandardA5"] = "Standard_A5";
    /** StandardA6 */
    KnownVirtualMachineSizeTypes["StandardA6"] = "Standard_A6";
    /** StandardA7 */
    KnownVirtualMachineSizeTypes["StandardA7"] = "Standard_A7";
    /** StandardA8 */
    KnownVirtualMachineSizeTypes["StandardA8"] = "Standard_A8";
    /** StandardA9 */
    KnownVirtualMachineSizeTypes["StandardA9"] = "Standard_A9";
    /** StandardA10 */
    KnownVirtualMachineSizeTypes["StandardA10"] = "Standard_A10";
    /** StandardA11 */
    KnownVirtualMachineSizeTypes["StandardA11"] = "Standard_A11";
    /** StandardA1V2 */
    KnownVirtualMachineSizeTypes["StandardA1V2"] = "Standard_A1_v2";
    /** StandardA2V2 */
    KnownVirtualMachineSizeTypes["StandardA2V2"] = "Standard_A2_v2";
    /** StandardA4V2 */
    KnownVirtualMachineSizeTypes["StandardA4V2"] = "Standard_A4_v2";
    /** StandardA8V2 */
    KnownVirtualMachineSizeTypes["StandardA8V2"] = "Standard_A8_v2";
    /** StandardA2MV2 */
    KnownVirtualMachineSizeTypes["StandardA2MV2"] = "Standard_A2m_v2";
    /** StandardA4MV2 */
    KnownVirtualMachineSizeTypes["StandardA4MV2"] = "Standard_A4m_v2";
    /** StandardA8MV2 */
    KnownVirtualMachineSizeTypes["StandardA8MV2"] = "Standard_A8m_v2";
    /** StandardB1S */
    KnownVirtualMachineSizeTypes["StandardB1S"] = "Standard_B1s";
    /** StandardB1Ms */
    KnownVirtualMachineSizeTypes["StandardB1Ms"] = "Standard_B1ms";
    /** StandardB2S */
    KnownVirtualMachineSizeTypes["StandardB2S"] = "Standard_B2s";
    /** StandardB2Ms */
    KnownVirtualMachineSizeTypes["StandardB2Ms"] = "Standard_B2ms";
    /** StandardB4Ms */
    KnownVirtualMachineSizeTypes["StandardB4Ms"] = "Standard_B4ms";
    /** StandardB8Ms */
    KnownVirtualMachineSizeTypes["StandardB8Ms"] = "Standard_B8ms";
    /** StandardD1 */
    KnownVirtualMachineSizeTypes["StandardD1"] = "Standard_D1";
    /** StandardD2 */
    KnownVirtualMachineSizeTypes["StandardD2"] = "Standard_D2";
    /** StandardD3 */
    KnownVirtualMachineSizeTypes["StandardD3"] = "Standard_D3";
    /** StandardD4 */
    KnownVirtualMachineSizeTypes["StandardD4"] = "Standard_D4";
    /** StandardD11 */
    KnownVirtualMachineSizeTypes["StandardD11"] = "Standard_D11";
    /** StandardD12 */
    KnownVirtualMachineSizeTypes["StandardD12"] = "Standard_D12";
    /** StandardD13 */
    KnownVirtualMachineSizeTypes["StandardD13"] = "Standard_D13";
    /** StandardD14 */
    KnownVirtualMachineSizeTypes["StandardD14"] = "Standard_D14";
    /** StandardD1V2 */
    KnownVirtualMachineSizeTypes["StandardD1V2"] = "Standard_D1_v2";
    /** StandardD2V2 */
    KnownVirtualMachineSizeTypes["StandardD2V2"] = "Standard_D2_v2";
    /** StandardD3V2 */
    KnownVirtualMachineSizeTypes["StandardD3V2"] = "Standard_D3_v2";
    /** StandardD4V2 */
    KnownVirtualMachineSizeTypes["StandardD4V2"] = "Standard_D4_v2";
    /** StandardD5V2 */
    KnownVirtualMachineSizeTypes["StandardD5V2"] = "Standard_D5_v2";
    /** StandardD2V3 */
    KnownVirtualMachineSizeTypes["StandardD2V3"] = "Standard_D2_v3";
    /** StandardD4V3 */
    KnownVirtualMachineSizeTypes["StandardD4V3"] = "Standard_D4_v3";
    /** StandardD8V3 */
    KnownVirtualMachineSizeTypes["StandardD8V3"] = "Standard_D8_v3";
    /** StandardD16V3 */
    KnownVirtualMachineSizeTypes["StandardD16V3"] = "Standard_D16_v3";
    /** StandardD32V3 */
    KnownVirtualMachineSizeTypes["StandardD32V3"] = "Standard_D32_v3";
    /** StandardD64V3 */
    KnownVirtualMachineSizeTypes["StandardD64V3"] = "Standard_D64_v3";
    /** StandardD2SV3 */
    KnownVirtualMachineSizeTypes["StandardD2SV3"] = "Standard_D2s_v3";
    /** StandardD4SV3 */
    KnownVirtualMachineSizeTypes["StandardD4SV3"] = "Standard_D4s_v3";
    /** StandardD8SV3 */
    KnownVirtualMachineSizeTypes["StandardD8SV3"] = "Standard_D8s_v3";
    /** StandardD16SV3 */
    KnownVirtualMachineSizeTypes["StandardD16SV3"] = "Standard_D16s_v3";
    /** StandardD32SV3 */
    KnownVirtualMachineSizeTypes["StandardD32SV3"] = "Standard_D32s_v3";
    /** StandardD64SV3 */
    KnownVirtualMachineSizeTypes["StandardD64SV3"] = "Standard_D64s_v3";
    /** StandardD11V2 */
    KnownVirtualMachineSizeTypes["StandardD11V2"] = "Standard_D11_v2";
    /** StandardD12V2 */
    KnownVirtualMachineSizeTypes["StandardD12V2"] = "Standard_D12_v2";
    /** StandardD13V2 */
    KnownVirtualMachineSizeTypes["StandardD13V2"] = "Standard_D13_v2";
    /** StandardD14V2 */
    KnownVirtualMachineSizeTypes["StandardD14V2"] = "Standard_D14_v2";
    /** StandardD15V2 */
    KnownVirtualMachineSizeTypes["StandardD15V2"] = "Standard_D15_v2";
    /** StandardDS1 */
    KnownVirtualMachineSizeTypes["StandardDS1"] = "Standard_DS1";
    /** StandardDS2 */
    KnownVirtualMachineSizeTypes["StandardDS2"] = "Standard_DS2";
    /** StandardDS3 */
    KnownVirtualMachineSizeTypes["StandardDS3"] = "Standard_DS3";
    /** StandardDS4 */
    KnownVirtualMachineSizeTypes["StandardDS4"] = "Standard_DS4";
    /** StandardDS11 */
    KnownVirtualMachineSizeTypes["StandardDS11"] = "Standard_DS11";
    /** StandardDS12 */
    KnownVirtualMachineSizeTypes["StandardDS12"] = "Standard_DS12";
    /** StandardDS13 */
    KnownVirtualMachineSizeTypes["StandardDS13"] = "Standard_DS13";
    /** StandardDS14 */
    KnownVirtualMachineSizeTypes["StandardDS14"] = "Standard_DS14";
    /** StandardDS1V2 */
    KnownVirtualMachineSizeTypes["StandardDS1V2"] = "Standard_DS1_v2";
    /** StandardDS2V2 */
    KnownVirtualMachineSizeTypes["StandardDS2V2"] = "Standard_DS2_v2";
    /** StandardDS3V2 */
    KnownVirtualMachineSizeTypes["StandardDS3V2"] = "Standard_DS3_v2";
    /** StandardDS4V2 */
    KnownVirtualMachineSizeTypes["StandardDS4V2"] = "Standard_DS4_v2";
    /** StandardDS5V2 */
    KnownVirtualMachineSizeTypes["StandardDS5V2"] = "Standard_DS5_v2";
    /** StandardDS11V2 */
    KnownVirtualMachineSizeTypes["StandardDS11V2"] = "Standard_DS11_v2";
    /** StandardDS12V2 */
    KnownVirtualMachineSizeTypes["StandardDS12V2"] = "Standard_DS12_v2";
    /** StandardDS13V2 */
    KnownVirtualMachineSizeTypes["StandardDS13V2"] = "Standard_DS13_v2";
    /** StandardDS14V2 */
    KnownVirtualMachineSizeTypes["StandardDS14V2"] = "Standard_DS14_v2";
    /** StandardDS15V2 */
    KnownVirtualMachineSizeTypes["StandardDS15V2"] = "Standard_DS15_v2";
    /** StandardDS134V2 */
    KnownVirtualMachineSizeTypes["StandardDS134V2"] = "Standard_DS13-4_v2";
    /** StandardDS132V2 */
    KnownVirtualMachineSizeTypes["StandardDS132V2"] = "Standard_DS13-2_v2";
    /** StandardDS148V2 */
    KnownVirtualMachineSizeTypes["StandardDS148V2"] = "Standard_DS14-8_v2";
    /** StandardDS144V2 */
    KnownVirtualMachineSizeTypes["StandardDS144V2"] = "Standard_DS14-4_v2";
    /** StandardE2V3 */
    KnownVirtualMachineSizeTypes["StandardE2V3"] = "Standard_E2_v3";
    /** StandardE4V3 */
    KnownVirtualMachineSizeTypes["StandardE4V3"] = "Standard_E4_v3";
    /** StandardE8V3 */
    KnownVirtualMachineSizeTypes["StandardE8V3"] = "Standard_E8_v3";
    /** StandardE16V3 */
    KnownVirtualMachineSizeTypes["StandardE16V3"] = "Standard_E16_v3";
    /** StandardE32V3 */
    KnownVirtualMachineSizeTypes["StandardE32V3"] = "Standard_E32_v3";
    /** StandardE64V3 */
    KnownVirtualMachineSizeTypes["StandardE64V3"] = "Standard_E64_v3";
    /** StandardE2SV3 */
    KnownVirtualMachineSizeTypes["StandardE2SV3"] = "Standard_E2s_v3";
    /** StandardE4SV3 */
    KnownVirtualMachineSizeTypes["StandardE4SV3"] = "Standard_E4s_v3";
    /** StandardE8SV3 */
    KnownVirtualMachineSizeTypes["StandardE8SV3"] = "Standard_E8s_v3";
    /** StandardE16SV3 */
    KnownVirtualMachineSizeTypes["StandardE16SV3"] = "Standard_E16s_v3";
    /** StandardE32SV3 */
    KnownVirtualMachineSizeTypes["StandardE32SV3"] = "Standard_E32s_v3";
    /** StandardE64SV3 */
    KnownVirtualMachineSizeTypes["StandardE64SV3"] = "Standard_E64s_v3";
    /** StandardE3216V3 */
    KnownVirtualMachineSizeTypes["StandardE3216V3"] = "Standard_E32-16_v3";
    /** StandardE328SV3 */
    KnownVirtualMachineSizeTypes["StandardE328SV3"] = "Standard_E32-8s_v3";
    /** StandardE6432SV3 */
    KnownVirtualMachineSizeTypes["StandardE6432SV3"] = "Standard_E64-32s_v3";
    /** StandardE6416SV3 */
    KnownVirtualMachineSizeTypes["StandardE6416SV3"] = "Standard_E64-16s_v3";
    /** StandardF1 */
    KnownVirtualMachineSizeTypes["StandardF1"] = "Standard_F1";
    /** StandardF2 */
    KnownVirtualMachineSizeTypes["StandardF2"] = "Standard_F2";
    /** StandardF4 */
    KnownVirtualMachineSizeTypes["StandardF4"] = "Standard_F4";
    /** StandardF8 */
    KnownVirtualMachineSizeTypes["StandardF8"] = "Standard_F8";
    /** StandardF16 */
    KnownVirtualMachineSizeTypes["StandardF16"] = "Standard_F16";
    /** StandardF1S */
    KnownVirtualMachineSizeTypes["StandardF1S"] = "Standard_F1s";
    /** StandardF2S */
    KnownVirtualMachineSizeTypes["StandardF2S"] = "Standard_F2s";
    /** StandardF4S */
    KnownVirtualMachineSizeTypes["StandardF4S"] = "Standard_F4s";
    /** StandardF8S */
    KnownVirtualMachineSizeTypes["StandardF8S"] = "Standard_F8s";
    /** StandardF16S */
    KnownVirtualMachineSizeTypes["StandardF16S"] = "Standard_F16s";
    /** StandardF2SV2 */
    KnownVirtualMachineSizeTypes["StandardF2SV2"] = "Standard_F2s_v2";
    /** StandardF4SV2 */
    KnownVirtualMachineSizeTypes["StandardF4SV2"] = "Standard_F4s_v2";
    /** StandardF8SV2 */
    KnownVirtualMachineSizeTypes["StandardF8SV2"] = "Standard_F8s_v2";
    /** StandardF16SV2 */
    KnownVirtualMachineSizeTypes["StandardF16SV2"] = "Standard_F16s_v2";
    /** StandardF32SV2 */
    KnownVirtualMachineSizeTypes["StandardF32SV2"] = "Standard_F32s_v2";
    /** StandardF64SV2 */
    KnownVirtualMachineSizeTypes["StandardF64SV2"] = "Standard_F64s_v2";
    /** StandardF72SV2 */
    KnownVirtualMachineSizeTypes["StandardF72SV2"] = "Standard_F72s_v2";
    /** StandardG1 */
    KnownVirtualMachineSizeTypes["StandardG1"] = "Standard_G1";
    /** StandardG2 */
    KnownVirtualMachineSizeTypes["StandardG2"] = "Standard_G2";
    /** StandardG3 */
    KnownVirtualMachineSizeTypes["StandardG3"] = "Standard_G3";
    /** StandardG4 */
    KnownVirtualMachineSizeTypes["StandardG4"] = "Standard_G4";
    /** StandardG5 */
    KnownVirtualMachineSizeTypes["StandardG5"] = "Standard_G5";
    /** StandardGS1 */
    KnownVirtualMachineSizeTypes["StandardGS1"] = "Standard_GS1";
    /** StandardGS2 */
    KnownVirtualMachineSizeTypes["StandardGS2"] = "Standard_GS2";
    /** StandardGS3 */
    KnownVirtualMachineSizeTypes["StandardGS3"] = "Standard_GS3";
    /** StandardGS4 */
    KnownVirtualMachineSizeTypes["StandardGS4"] = "Standard_GS4";
    /** StandardGS5 */
    KnownVirtualMachineSizeTypes["StandardGS5"] = "Standard_GS5";
    /** StandardGS48 */
    KnownVirtualMachineSizeTypes["StandardGS48"] = "Standard_GS4-8";
    /** StandardGS44 */
    KnownVirtualMachineSizeTypes["StandardGS44"] = "Standard_GS4-4";
    /** StandardGS516 */
    KnownVirtualMachineSizeTypes["StandardGS516"] = "Standard_GS5-16";
    /** StandardGS58 */
    KnownVirtualMachineSizeTypes["StandardGS58"] = "Standard_GS5-8";
    /** StandardH8 */
    KnownVirtualMachineSizeTypes["StandardH8"] = "Standard_H8";
    /** StandardH16 */
    KnownVirtualMachineSizeTypes["StandardH16"] = "Standard_H16";
    /** StandardH8M */
    KnownVirtualMachineSizeTypes["StandardH8M"] = "Standard_H8m";
    /** StandardH16M */
    KnownVirtualMachineSizeTypes["StandardH16M"] = "Standard_H16m";
    /** StandardH16R */
    KnownVirtualMachineSizeTypes["StandardH16R"] = "Standard_H16r";
    /** StandardH16Mr */
    KnownVirtualMachineSizeTypes["StandardH16Mr"] = "Standard_H16mr";
    /** StandardL4S */
    KnownVirtualMachineSizeTypes["StandardL4S"] = "Standard_L4s";
    /** StandardL8S */
    KnownVirtualMachineSizeTypes["StandardL8S"] = "Standard_L8s";
    /** StandardL16S */
    KnownVirtualMachineSizeTypes["StandardL16S"] = "Standard_L16s";
    /** StandardL32S */
    KnownVirtualMachineSizeTypes["StandardL32S"] = "Standard_L32s";
    /** StandardM64S */
    KnownVirtualMachineSizeTypes["StandardM64S"] = "Standard_M64s";
    /** StandardM64Ms */
    KnownVirtualMachineSizeTypes["StandardM64Ms"] = "Standard_M64ms";
    /** StandardM128S */
    KnownVirtualMachineSizeTypes["StandardM128S"] = "Standard_M128s";
    /** StandardM128Ms */
    KnownVirtualMachineSizeTypes["StandardM128Ms"] = "Standard_M128ms";
    /** StandardM6432Ms */
    KnownVirtualMachineSizeTypes["StandardM6432Ms"] = "Standard_M64-32ms";
    /** StandardM6416Ms */
    KnownVirtualMachineSizeTypes["StandardM6416Ms"] = "Standard_M64-16ms";
    /** StandardM12864Ms */
    KnownVirtualMachineSizeTypes["StandardM12864Ms"] = "Standard_M128-64ms";
    /** StandardM12832Ms */
    KnownVirtualMachineSizeTypes["StandardM12832Ms"] = "Standard_M128-32ms";
    /** StandardNC6 */
    KnownVirtualMachineSizeTypes["StandardNC6"] = "Standard_NC6";
    /** StandardNC12 */
    KnownVirtualMachineSizeTypes["StandardNC12"] = "Standard_NC12";
    /** StandardNC24 */
    KnownVirtualMachineSizeTypes["StandardNC24"] = "Standard_NC24";
    /** StandardNC24R */
    KnownVirtualMachineSizeTypes["StandardNC24R"] = "Standard_NC24r";
    /** StandardNC6SV2 */
    KnownVirtualMachineSizeTypes["StandardNC6SV2"] = "Standard_NC6s_v2";
    /** StandardNC12SV2 */
    KnownVirtualMachineSizeTypes["StandardNC12SV2"] = "Standard_NC12s_v2";
    /** StandardNC24SV2 */
    KnownVirtualMachineSizeTypes["StandardNC24SV2"] = "Standard_NC24s_v2";
    /** StandardNC24RsV2 */
    KnownVirtualMachineSizeTypes["StandardNC24RsV2"] = "Standard_NC24rs_v2";
    /** StandardNC6SV3 */
    KnownVirtualMachineSizeTypes["StandardNC6SV3"] = "Standard_NC6s_v3";
    /** StandardNC12SV3 */
    KnownVirtualMachineSizeTypes["StandardNC12SV3"] = "Standard_NC12s_v3";
    /** StandardNC24SV3 */
    KnownVirtualMachineSizeTypes["StandardNC24SV3"] = "Standard_NC24s_v3";
    /** StandardNC24RsV3 */
    KnownVirtualMachineSizeTypes["StandardNC24RsV3"] = "Standard_NC24rs_v3";
    /** StandardND6S */
    KnownVirtualMachineSizeTypes["StandardND6S"] = "Standard_ND6s";
    /** StandardND12S */
    KnownVirtualMachineSizeTypes["StandardND12S"] = "Standard_ND12s";
    /** StandardND24S */
    KnownVirtualMachineSizeTypes["StandardND24S"] = "Standard_ND24s";
    /** StandardND24Rs */
    KnownVirtualMachineSizeTypes["StandardND24Rs"] = "Standard_ND24rs";
    /** StandardNV6 */
    KnownVirtualMachineSizeTypes["StandardNV6"] = "Standard_NV6";
    /** StandardNV12 */
    KnownVirtualMachineSizeTypes["StandardNV12"] = "Standard_NV12";
    /** StandardNV24 */
    KnownVirtualMachineSizeTypes["StandardNV24"] = "Standard_NV24";
})(KnownVirtualMachineSizeTypes || (KnownVirtualMachineSizeTypes = {}));
/** Known values of {@link DiskDetachOptionTypes} that the service accepts. */
export var KnownDiskDetachOptionTypes;
(function (KnownDiskDetachOptionTypes) {
    /** ForceDetach */
    KnownDiskDetachOptionTypes["ForceDetach"] = "ForceDetach";
})(KnownDiskDetachOptionTypes || (KnownDiskDetachOptionTypes = {}));
/** Known values of {@link IPVersions} that the service accepts. */
export var KnownIPVersions;
(function (KnownIPVersions) {
    /** IPv4 */
    KnownIPVersions["IPv4"] = "IPv4";
    /** IPv6 */
    KnownIPVersions["IPv6"] = "IPv6";
})(KnownIPVersions || (KnownIPVersions = {}));
/** Known values of {@link PublicIPAllocationMethod} that the service accepts. */
export var KnownPublicIPAllocationMethod;
(function (KnownPublicIPAllocationMethod) {
    /** Dynamic */
    KnownPublicIPAllocationMethod["Dynamic"] = "Dynamic";
    /** Static */
    KnownPublicIPAllocationMethod["Static"] = "Static";
})(KnownPublicIPAllocationMethod || (KnownPublicIPAllocationMethod = {}));
/** Known values of {@link HyperVGenerationType} that the service accepts. */
export var KnownHyperVGenerationType;
(function (KnownHyperVGenerationType) {
    /** V1 */
    KnownHyperVGenerationType["V1"] = "V1";
    /** V2 */
    KnownHyperVGenerationType["V2"] = "V2";
})(KnownHyperVGenerationType || (KnownHyperVGenerationType = {}));
/** Known values of {@link PatchOperationStatus} that the service accepts. */
export var KnownPatchOperationStatus;
(function (KnownPatchOperationStatus) {
    /** Unknown */
    KnownPatchOperationStatus["Unknown"] = "Unknown";
    /** InProgress */
    KnownPatchOperationStatus["InProgress"] = "InProgress";
    /** Failed */
    KnownPatchOperationStatus["Failed"] = "Failed";
    /** Succeeded */
    KnownPatchOperationStatus["Succeeded"] = "Succeeded";
    /** CompletedWithWarnings */
    KnownPatchOperationStatus["CompletedWithWarnings"] = "CompletedWithWarnings";
})(KnownPatchOperationStatus || (KnownPatchOperationStatus = {}));
/** Known values of {@link ZonePlacementPolicyType} that the service accepts. */
export var KnownZonePlacementPolicyType;
(function (KnownZonePlacementPolicyType) {
    /** Any */
    KnownZonePlacementPolicyType["Any"] = "Any";
})(KnownZonePlacementPolicyType || (KnownZonePlacementPolicyType = {}));
/** Known values of {@link ProximityPlacementGroupType} that the service accepts. */
export var KnownProximityPlacementGroupType;
(function (KnownProximityPlacementGroupType) {
    /** Standard */
    KnownProximityPlacementGroupType["Standard"] = "Standard";
    /** Ultra */
    KnownProximityPlacementGroupType["Ultra"] = "Ultra";
})(KnownProximityPlacementGroupType || (KnownProximityPlacementGroupType = {}));
/** Known values of {@link OperatingSystemType} that the service accepts. */
export var KnownOperatingSystemType;
(function (KnownOperatingSystemType) {
    /** Windows */
    KnownOperatingSystemType["Windows"] = "Windows";
    /** Linux */
    KnownOperatingSystemType["Linux"] = "Linux";
})(KnownOperatingSystemType || (KnownOperatingSystemType = {}));
/** Known values of {@link RestorePointEncryptionType} that the service accepts. */
export var KnownRestorePointEncryptionType;
(function (KnownRestorePointEncryptionType) {
    /** Disk Restore Point is encrypted at rest with Platform managed key. */
    KnownRestorePointEncryptionType["EncryptionAtRestWithPlatformKey"] = "EncryptionAtRestWithPlatformKey";
    /** Disk Restore Point is encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
    KnownRestorePointEncryptionType["EncryptionAtRestWithCustomerKey"] = "EncryptionAtRestWithCustomerKey";
    /** Disk Restore Point is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
    KnownRestorePointEncryptionType["EncryptionAtRestWithPlatformAndCustomerKeys"] = "EncryptionAtRestWithPlatformAndCustomerKeys";
})(KnownRestorePointEncryptionType || (KnownRestorePointEncryptionType = {}));
/** Known values of {@link ConsistencyModeTypes} that the service accepts. */
export var KnownConsistencyModeTypes;
(function (KnownConsistencyModeTypes) {
    /** CrashConsistent */
    KnownConsistencyModeTypes["CrashConsistent"] = "CrashConsistent";
    /** FileSystemConsistent */
    KnownConsistencyModeTypes["FileSystemConsistent"] = "FileSystemConsistent";
    /** ApplicationConsistent */
    KnownConsistencyModeTypes["ApplicationConsistent"] = "ApplicationConsistent";
})(KnownConsistencyModeTypes || (KnownConsistencyModeTypes = {}));
/** Known values of {@link ExpandTypesForListVMs} that the service accepts. */
export var KnownExpandTypesForListVMs;
(function (KnownExpandTypesForListVMs) {
    /** InstanceView */
    KnownExpandTypesForListVMs["InstanceView"] = "instanceView";
})(KnownExpandTypesForListVMs || (KnownExpandTypesForListVMs = {}));
/** Known values of {@link CapacityReservationGroupInstanceViewTypes} that the service accepts. */
export var KnownCapacityReservationGroupInstanceViewTypes;
(function (KnownCapacityReservationGroupInstanceViewTypes) {
    /** InstanceView */
    KnownCapacityReservationGroupInstanceViewTypes["InstanceView"] = "instanceView";
})(KnownCapacityReservationGroupInstanceViewTypes || (KnownCapacityReservationGroupInstanceViewTypes = {}));
/** Known values of {@link CapacityReservationInstanceViewTypes} that the service accepts. */
export var KnownCapacityReservationInstanceViewTypes;
(function (KnownCapacityReservationInstanceViewTypes) {
    /** InstanceView */
    KnownCapacityReservationInstanceViewTypes["InstanceView"] = "instanceView";
})(KnownCapacityReservationInstanceViewTypes || (KnownCapacityReservationInstanceViewTypes = {}));
/** Known values of {@link RestorePointCollectionExpandOptions} that the service accepts. */
export var KnownRestorePointCollectionExpandOptions;
(function (KnownRestorePointCollectionExpandOptions) {
    /** RestorePoints */
    KnownRestorePointCollectionExpandOptions["RestorePoints"] = "restorePoints";
})(KnownRestorePointCollectionExpandOptions || (KnownRestorePointCollectionExpandOptions = {}));
/** Known values of {@link RestorePointExpandOptions} that the service accepts. */
export var KnownRestorePointExpandOptions;
(function (KnownRestorePointExpandOptions) {
    /** InstanceView */
    KnownRestorePointExpandOptions["InstanceView"] = "instanceView";
})(KnownRestorePointExpandOptions || (KnownRestorePointExpandOptions = {}));
/** Known values of {@link SshEncryptionTypes} that the service accepts. */
export var KnownSshEncryptionTypes;
(function (KnownSshEncryptionTypes) {
    /** RSA */
    KnownSshEncryptionTypes["RSA"] = "RSA";
    /** Ed25519 */
    KnownSshEncryptionTypes["Ed25519"] = "Ed25519";
})(KnownSshEncryptionTypes || (KnownSshEncryptionTypes = {}));
/** Known values of {@link ExpandTypesForGetVMScaleSets} that the service accepts. */
export var KnownExpandTypesForGetVMScaleSets;
(function (KnownExpandTypesForGetVMScaleSets) {
    /** UserData */
    KnownExpandTypesForGetVMScaleSets["UserData"] = "userData";
})(KnownExpandTypesForGetVMScaleSets || (KnownExpandTypesForGetVMScaleSets = {}));
/** Known values of {@link OrchestrationServiceNames} that the service accepts. */
export var KnownOrchestrationServiceNames;
(function (KnownOrchestrationServiceNames) {
    /** AutomaticRepairs */
    KnownOrchestrationServiceNames["AutomaticRepairs"] = "AutomaticRepairs";
})(KnownOrchestrationServiceNames || (KnownOrchestrationServiceNames = {}));
/** Known values of {@link OrchestrationServiceState} that the service accepts. */
export var KnownOrchestrationServiceState;
(function (KnownOrchestrationServiceState) {
    /** NotRunning */
    KnownOrchestrationServiceState["NotRunning"] = "NotRunning";
    /** Running */
    KnownOrchestrationServiceState["Running"] = "Running";
    /** Suspended */
    KnownOrchestrationServiceState["Suspended"] = "Suspended";
})(KnownOrchestrationServiceState || (KnownOrchestrationServiceState = {}));
/** Known values of {@link OrchestrationServiceStateAction} that the service accepts. */
export var KnownOrchestrationServiceStateAction;
(function (KnownOrchestrationServiceStateAction) {
    /** Resume */
    KnownOrchestrationServiceStateAction["Resume"] = "Resume";
    /** Suspend */
    KnownOrchestrationServiceStateAction["Suspend"] = "Suspend";
})(KnownOrchestrationServiceStateAction || (KnownOrchestrationServiceStateAction = {}));
/** Known values of {@link HyperVGeneration} that the service accepts. */
export var KnownHyperVGeneration;
(function (KnownHyperVGeneration) {
    /** V1 */
    KnownHyperVGeneration["V1"] = "V1";
    /** V2 */
    KnownHyperVGeneration["V2"] = "V2";
})(KnownHyperVGeneration || (KnownHyperVGeneration = {}));
/** Known values of {@link ResilientVMDeletionStatus} that the service accepts. */
export var KnownResilientVMDeletionStatus;
(function (KnownResilientVMDeletionStatus) {
    /** Enabled */
    KnownResilientVMDeletionStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownResilientVMDeletionStatus["Disabled"] = "Disabled";
    /** InProgress */
    KnownResilientVMDeletionStatus["InProgress"] = "InProgress";
    /** Failed */
    KnownResilientVMDeletionStatus["Failed"] = "Failed";
})(KnownResilientVMDeletionStatus || (KnownResilientVMDeletionStatus = {}));
/** Known values of {@link ExecutionState} that the service accepts. */
export var KnownExecutionState;
(function (KnownExecutionState) {
    /** Unknown */
    KnownExecutionState["Unknown"] = "Unknown";
    /** Pending */
    KnownExecutionState["Pending"] = "Pending";
    /** Running */
    KnownExecutionState["Running"] = "Running";
    /** Failed */
    KnownExecutionState["Failed"] = "Failed";
    /** Succeeded */
    KnownExecutionState["Succeeded"] = "Succeeded";
    /** TimedOut */
    KnownExecutionState["TimedOut"] = "TimedOut";
    /** Canceled */
    KnownExecutionState["Canceled"] = "Canceled";
})(KnownExecutionState || (KnownExecutionState = {}));
/** Known values of {@link ExpandTypeForListVMs} that the service accepts. */
export var KnownExpandTypeForListVMs;
(function (KnownExpandTypeForListVMs) {
    /** InstanceView */
    KnownExpandTypeForListVMs["InstanceView"] = "instanceView";
})(KnownExpandTypeForListVMs || (KnownExpandTypeForListVMs = {}));
/** Known values of {@link VMGuestPatchRebootBehavior} that the service accepts. */
export var KnownVMGuestPatchRebootBehavior;
(function (KnownVMGuestPatchRebootBehavior) {
    /** Unknown */
    KnownVMGuestPatchRebootBehavior["Unknown"] = "Unknown";
    /** NeverReboots */
    KnownVMGuestPatchRebootBehavior["NeverReboots"] = "NeverReboots";
    /** AlwaysRequiresReboot */
    KnownVMGuestPatchRebootBehavior["AlwaysRequiresReboot"] = "AlwaysRequiresReboot";
    /** CanRequestReboot */
    KnownVMGuestPatchRebootBehavior["CanRequestReboot"] = "CanRequestReboot";
})(KnownVMGuestPatchRebootBehavior || (KnownVMGuestPatchRebootBehavior = {}));
/** Known values of {@link PatchAssessmentState} that the service accepts. */
export var KnownPatchAssessmentState;
(function (KnownPatchAssessmentState) {
    /** Unknown */
    KnownPatchAssessmentState["Unknown"] = "Unknown";
    /** Available */
    KnownPatchAssessmentState["Available"] = "Available";
})(KnownPatchAssessmentState || (KnownPatchAssessmentState = {}));
/** Known values of {@link VMGuestPatchRebootSetting} that the service accepts. */
export var KnownVMGuestPatchRebootSetting;
(function (KnownVMGuestPatchRebootSetting) {
    /** IfRequired */
    KnownVMGuestPatchRebootSetting["IfRequired"] = "IfRequired";
    /** Never */
    KnownVMGuestPatchRebootSetting["Never"] = "Never";
    /** Always */
    KnownVMGuestPatchRebootSetting["Always"] = "Always";
})(KnownVMGuestPatchRebootSetting || (KnownVMGuestPatchRebootSetting = {}));
/** Known values of {@link VMGuestPatchClassificationWindows} that the service accepts. */
export var KnownVMGuestPatchClassificationWindows;
(function (KnownVMGuestPatchClassificationWindows) {
    /** Critical */
    KnownVMGuestPatchClassificationWindows["Critical"] = "Critical";
    /** Security */
    KnownVMGuestPatchClassificationWindows["Security"] = "Security";
    /** UpdateRollUp */
    KnownVMGuestPatchClassificationWindows["UpdateRollUp"] = "UpdateRollUp";
    /** FeaturePack */
    KnownVMGuestPatchClassificationWindows["FeaturePack"] = "FeaturePack";
    /** ServicePack */
    KnownVMGuestPatchClassificationWindows["ServicePack"] = "ServicePack";
    /** Definition */
    KnownVMGuestPatchClassificationWindows["Definition"] = "Definition";
    /** Tools */
    KnownVMGuestPatchClassificationWindows["Tools"] = "Tools";
    /** Updates */
    KnownVMGuestPatchClassificationWindows["Updates"] = "Updates";
})(KnownVMGuestPatchClassificationWindows || (KnownVMGuestPatchClassificationWindows = {}));
/** Known values of {@link VMGuestPatchClassificationLinux} that the service accepts. */
export var KnownVMGuestPatchClassificationLinux;
(function (KnownVMGuestPatchClassificationLinux) {
    /** Critical */
    KnownVMGuestPatchClassificationLinux["Critical"] = "Critical";
    /** Security */
    KnownVMGuestPatchClassificationLinux["Security"] = "Security";
    /** Other */
    KnownVMGuestPatchClassificationLinux["Other"] = "Other";
})(KnownVMGuestPatchClassificationLinux || (KnownVMGuestPatchClassificationLinux = {}));
/** Known values of {@link VMGuestPatchRebootStatus} that the service accepts. */
export var KnownVMGuestPatchRebootStatus;
(function (KnownVMGuestPatchRebootStatus) {
    /** Unknown */
    KnownVMGuestPatchRebootStatus["Unknown"] = "Unknown";
    /** NotNeeded */
    KnownVMGuestPatchRebootStatus["NotNeeded"] = "NotNeeded";
    /** Required */
    KnownVMGuestPatchRebootStatus["Required"] = "Required";
    /** Started */
    KnownVMGuestPatchRebootStatus["Started"] = "Started";
    /** Failed */
    KnownVMGuestPatchRebootStatus["Failed"] = "Failed";
    /** Completed */
    KnownVMGuestPatchRebootStatus["Completed"] = "Completed";
})(KnownVMGuestPatchRebootStatus || (KnownVMGuestPatchRebootStatus = {}));
/** Known values of {@link PatchInstallationState} that the service accepts. */
export var KnownPatchInstallationState;
(function (KnownPatchInstallationState) {
    /** Unknown */
    KnownPatchInstallationState["Unknown"] = "Unknown";
    /** Installed */
    KnownPatchInstallationState["Installed"] = "Installed";
    /** Failed */
    KnownPatchInstallationState["Failed"] = "Failed";
    /** Excluded */
    KnownPatchInstallationState["Excluded"] = "Excluded";
    /** NotSelected */
    KnownPatchInstallationState["NotSelected"] = "NotSelected";
    /** Pending */
    KnownPatchInstallationState["Pending"] = "Pending";
})(KnownPatchInstallationState || (KnownPatchInstallationState = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export var KnownPrivateEndpointServiceConnectionStatus;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(KnownPrivateEndpointServiceConnectionStatus || (KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export var KnownPrivateEndpointConnectionProvisioningState;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(KnownPrivateEndpointConnectionProvisioningState || (KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link DiskEncryptionSetType} that the service accepts. */
export var KnownDiskEncryptionSetType;
(function (KnownDiskEncryptionSetType) {
    /** Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
    KnownDiskEncryptionSetType["EncryptionAtRestWithCustomerKey"] = "EncryptionAtRestWithCustomerKey";
    /** Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
    KnownDiskEncryptionSetType["EncryptionAtRestWithPlatformAndCustomerKeys"] = "EncryptionAtRestWithPlatformAndCustomerKeys";
    /** Confidential VM supported disk and VM guest state would be encrypted with customer managed key. */
    KnownDiskEncryptionSetType["ConfidentialVmEncryptedWithCustomerKey"] = "ConfidentialVmEncryptedWithCustomerKey";
})(KnownDiskEncryptionSetType || (KnownDiskEncryptionSetType = {}));
/** Known values of {@link DiskEncryptionSetIdentityType} that the service accepts. */
export var KnownDiskEncryptionSetIdentityType;
(function (KnownDiskEncryptionSetIdentityType) {
    /** SystemAssigned */
    KnownDiskEncryptionSetIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownDiskEncryptionSetIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAssignedUserAssigned */
    KnownDiskEncryptionSetIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
    /** None */
    KnownDiskEncryptionSetIdentityType["None"] = "None";
})(KnownDiskEncryptionSetIdentityType || (KnownDiskEncryptionSetIdentityType = {}));
/** Known values of {@link Architecture} that the service accepts. */
export var KnownArchitecture;
(function (KnownArchitecture) {
    /** X64 */
    KnownArchitecture["X64"] = "x64";
    /** Arm64 */
    KnownArchitecture["Arm64"] = "Arm64";
})(KnownArchitecture || (KnownArchitecture = {}));
/** Known values of {@link SupportedSecurityOption} that the service accepts. */
export var KnownSupportedSecurityOption;
(function (KnownSupportedSecurityOption) {
    /** The disk supports creating Trusted Launch VMs. */
    KnownSupportedSecurityOption["TrustedLaunchSupported"] = "TrustedLaunchSupported";
    /** The disk supports creating both Trusted Launch and Confidential VMs. */
    KnownSupportedSecurityOption["TrustedLaunchAndConfidentialVMSupported"] = "TrustedLaunchAndConfidentialVMSupported";
})(KnownSupportedSecurityOption || (KnownSupportedSecurityOption = {}));
/** Known values of {@link DiskCreateOption} that the service accepts. */
export var KnownDiskCreateOption;
(function (KnownDiskCreateOption) {
    /** Create an empty data disk of a size given by diskSizeGB. */
    KnownDiskCreateOption["Empty"] = "Empty";
    /** Disk will be attached to a VM. */
    KnownDiskCreateOption["Attach"] = "Attach";
    /** Create a new disk from a platform image specified by the given imageReference or galleryImageReference. */
    KnownDiskCreateOption["FromImage"] = "FromImage";
    /** Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId. */
    KnownDiskCreateOption["Import"] = "Import";
    /** Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId. */
    KnownDiskCreateOption["Copy"] = "Copy";
    /** Create a new disk by copying from a backup recovery point. */
    KnownDiskCreateOption["Restore"] = "Restore";
    /** Create a new disk by obtaining a write token and using it to directly upload the contents of the disk. */
    KnownDiskCreateOption["Upload"] = "Upload";
    /** Create a new disk by using a deep copy process, where the resource creation is considered complete only after all data has been copied from the source. */
    KnownDiskCreateOption["CopyStart"] = "CopyStart";
    /** Similar to Import create option. Create a new Trusted Launch VM or Confidential VM supported disk by importing additional blobs for VM guest state specified by securityDataUri and VM metadata specified by securityMetadataUri in storage account specified by storageAccountId. The VM metadata is optional and only required for certain Confidential VM configurations and not required for Trusted Launch VM. */
    KnownDiskCreateOption["ImportSecure"] = "ImportSecure";
    /** Similar to Upload create option. Create a new Trusted Launch VM or Confidential VM supported disk and upload using write token in disk, VM guest state and VM metadata. The VM metadata is optional and only required for certain Confidential VM configurations and not required for Trusted Launch VM. */
    KnownDiskCreateOption["UploadPreparedSecure"] = "UploadPreparedSecure";
    /** Create a new disk by exporting from elastic san volume snapshot */
    KnownDiskCreateOption["CopyFromSanSnapshot"] = "CopyFromSanSnapshot";
})(KnownDiskCreateOption || (KnownDiskCreateOption = {}));
/** Known values of {@link ProvisionedBandwidthCopyOption} that the service accepts. */
export var KnownProvisionedBandwidthCopyOption;
(function (KnownProvisionedBandwidthCopyOption) {
    /** None */
    KnownProvisionedBandwidthCopyOption["None"] = "None";
    /** Enhanced */
    KnownProvisionedBandwidthCopyOption["Enhanced"] = "Enhanced";
})(KnownProvisionedBandwidthCopyOption || (KnownProvisionedBandwidthCopyOption = {}));
/** Known values of {@link DiskState} that the service accepts. */
export var KnownDiskState;
(function (KnownDiskState) {
    /** The disk is not being used and can be attached to a VM. */
    KnownDiskState["Unattached"] = "Unattached";
    /** The disk is currently attached to a running VM. */
    KnownDiskState["Attached"] = "Attached";
    /** The disk is attached to a stopped-deallocated VM. */
    KnownDiskState["Reserved"] = "Reserved";
    /** The disk is attached to a VM which is in hibernated state. */
    KnownDiskState["Frozen"] = "Frozen";
    /** The disk currently has an Active SAS Uri associated with it. */
    KnownDiskState["ActiveSAS"] = "ActiveSAS";
    /** The disk is attached to a VM in hibernated state and has an active SAS URI associated with it. */
    KnownDiskState["ActiveSASFrozen"] = "ActiveSASFrozen";
    /** A disk is ready to be created by upload by requesting a write token. */
    KnownDiskState["ReadyToUpload"] = "ReadyToUpload";
    /** A disk is created for upload and a write token has been issued for uploading to it. */
    KnownDiskState["ActiveUpload"] = "ActiveUpload";
})(KnownDiskState || (KnownDiskState = {}));
/** Known values of {@link EncryptionType} that the service accepts. */
export var KnownEncryptionType;
(function (KnownEncryptionType) {
    /** Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets. */
    KnownEncryptionType["EncryptionAtRestWithPlatformKey"] = "EncryptionAtRestWithPlatformKey";
    /** Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
    KnownEncryptionType["EncryptionAtRestWithCustomerKey"] = "EncryptionAtRestWithCustomerKey";
    /** Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
    KnownEncryptionType["EncryptionAtRestWithPlatformAndCustomerKeys"] = "EncryptionAtRestWithPlatformAndCustomerKeys";
})(KnownEncryptionType || (KnownEncryptionType = {}));
/** Known values of {@link NetworkAccessPolicy} that the service accepts. */
export var KnownNetworkAccessPolicy;
(function (KnownNetworkAccessPolicy) {
    /** The disk can be exported or uploaded to from any network. */
    KnownNetworkAccessPolicy["AllowAll"] = "AllowAll";
    /** The disk can be exported or uploaded to using a DiskAccess resource's private endpoints. */
    KnownNetworkAccessPolicy["AllowPrivate"] = "AllowPrivate";
    /** The disk cannot be exported. */
    KnownNetworkAccessPolicy["DenyAll"] = "DenyAll";
})(KnownNetworkAccessPolicy || (KnownNetworkAccessPolicy = {}));
/** Known values of {@link DiskSecurityTypes} that the service accepts. */
export var KnownDiskSecurityTypes;
(function (KnownDiskSecurityTypes) {
    /** Trusted Launch provides security features such as secure boot and virtual Trusted Platform Module (vTPM) */
    KnownDiskSecurityTypes["TrustedLaunch"] = "TrustedLaunch";
    /** Indicates Confidential VM disk with only VM guest state encrypted */
    KnownDiskSecurityTypes["ConfidentialVMVmguestStateOnlyEncryptedWithPlatformKey"] = "ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey";
    /** Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a platform managed key */
    KnownDiskSecurityTypes["ConfidentialVMDiskEncryptedWithPlatformKey"] = "ConfidentialVM_DiskEncryptedWithPlatformKey";
    /** Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a customer managed key */
    KnownDiskSecurityTypes["ConfidentialVMDiskEncryptedWithCustomerKey"] = "ConfidentialVM_DiskEncryptedWithCustomerKey";
    /** Indicates Confidential VM disk with a ephemeral vTPM. vTPM state is not persisted across VM reboots. */
    KnownDiskSecurityTypes["ConfidentialVMNonPersistedTPM"] = "ConfidentialVM_NonPersistedTPM";
})(KnownDiskSecurityTypes || (KnownDiskSecurityTypes = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export var KnownPublicNetworkAccess;
(function (KnownPublicNetworkAccess) {
    /** You can generate a SAS URI to access the underlying data of the disk publicly on the internet when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** You cannot access the underlying data of the disk publicly on the internet even when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
/** Known values of {@link DataAccessAuthMode} that the service accepts. */
export var KnownDataAccessAuthMode;
(function (KnownDataAccessAuthMode) {
    /** When export\/upload URL is used, the system checks if the user has an identity in Azure Active Directory and has necessary permissions to export\/upload the data. Please refer to aka.ms\/DisksAzureADAuth. */
    KnownDataAccessAuthMode["AzureActiveDirectory"] = "AzureActiveDirectory";
    /** No additional authentication would be performed when accessing export\/upload URL. */
    KnownDataAccessAuthMode["None"] = "None";
})(KnownDataAccessAuthMode || (KnownDataAccessAuthMode = {}));
/** Known values of {@link AvailabilityPolicyDiskDelay} that the service accepts. */
export var KnownAvailabilityPolicyDiskDelay;
(function (KnownAvailabilityPolicyDiskDelay) {
    /** Defaults to behavior without av policy specified, which is VM restart upon slow disk io. */
    KnownAvailabilityPolicyDiskDelay["None"] = "None";
    /** Upon a disk io failure or slow response, try detaching then reattaching the disk. */
    KnownAvailabilityPolicyDiskDelay["AutomaticReattach"] = "AutomaticReattach";
})(KnownAvailabilityPolicyDiskDelay || (KnownAvailabilityPolicyDiskDelay = {}));
/** Known values of {@link DiskStorageAccountTypes} that the service accepts. */
export var KnownDiskStorageAccountTypes;
(function (KnownDiskStorageAccountTypes) {
    /** Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access. */
    KnownDiskStorageAccountTypes["StandardLRS"] = "Standard_LRS";
    /** Premium SSD locally redundant storage. Best for production and performance sensitive workloads. */
    KnownDiskStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    /** Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev\/test. */
    KnownDiskStorageAccountTypes["StandardSSDLRS"] = "StandardSSD_LRS";
    /** Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads. */
    KnownDiskStorageAccountTypes["UltraSSDLRS"] = "UltraSSD_LRS";
    /** Premium SSD zone redundant storage. Best for the production workloads that need storage resiliency against zone failures. */
    KnownDiskStorageAccountTypes["PremiumZRS"] = "Premium_ZRS";
    /** Standard SSD zone redundant storage. Best for web servers, lightly used enterprise applications and dev\/test that need storage resiliency against zone failures. */
    KnownDiskStorageAccountTypes["StandardSSDZRS"] = "StandardSSD_ZRS";
    /** Premium SSD v2 locally redundant storage. Best for production and performance-sensitive workloads that consistently require low latency and high IOPS and throughput. */
    KnownDiskStorageAccountTypes["PremiumV2LRS"] = "PremiumV2_LRS";
})(KnownDiskStorageAccountTypes || (KnownDiskStorageAccountTypes = {}));
/** Known values of {@link CopyCompletionErrorReason} that the service accepts. */
export var KnownCopyCompletionErrorReason;
(function (KnownCopyCompletionErrorReason) {
    /** Indicates that the source snapshot was deleted while the background copy of the resource created via CopyStart operation was in progress. */
    KnownCopyCompletionErrorReason["CopySourceNotFound"] = "CopySourceNotFound";
})(KnownCopyCompletionErrorReason || (KnownCopyCompletionErrorReason = {}));
/** Known values of {@link SnapshotAccessState} that the service accepts. */
export var KnownSnapshotAccessState;
(function (KnownSnapshotAccessState) {
    /** Default value. */
    KnownSnapshotAccessState["Unknown"] = "Unknown";
    /** The snapshot cannot be used for restore, copy or download to offline. */
    KnownSnapshotAccessState["Pending"] = "Pending";
    /** The snapshot can be used for restore, copy to different region, and download to offline. */
    KnownSnapshotAccessState["Available"] = "Available";
    /** The snapshot can be used for restoring disks with fast performance but cannot be copied or downloaded. */
    KnownSnapshotAccessState["InstantAccess"] = "InstantAccess";
    /** The snapshot can be used for restoring disks with fast performance, copied and downloaded. */
    KnownSnapshotAccessState["AvailableWithInstantAccess"] = "AvailableWithInstantAccess";
})(KnownSnapshotAccessState || (KnownSnapshotAccessState = {}));
/** Known values of {@link SnapshotStorageAccountTypes} that the service accepts. */
export var KnownSnapshotStorageAccountTypes;
(function (KnownSnapshotStorageAccountTypes) {
    /** Standard HDD locally redundant storage */
    KnownSnapshotStorageAccountTypes["StandardLRS"] = "Standard_LRS";
    /** Premium SSD locally redundant storage */
    KnownSnapshotStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    /** Standard zone redundant storage */
    KnownSnapshotStorageAccountTypes["StandardZRS"] = "Standard_ZRS";
})(KnownSnapshotStorageAccountTypes || (KnownSnapshotStorageAccountTypes = {}));
/** Known values of {@link AccessLevel} that the service accepts. */
export var KnownAccessLevel;
(function (KnownAccessLevel) {
    /** None */
    KnownAccessLevel["None"] = "None";
    /** Read */
    KnownAccessLevel["Read"] = "Read";
    /** Write */
    KnownAccessLevel["Write"] = "Write";
})(KnownAccessLevel || (KnownAccessLevel = {}));
/** Known values of {@link FileFormat} that the service accepts. */
export var KnownFileFormat;
(function (KnownFileFormat) {
    /** A VHD file is a disk image file in the Virtual Hard Disk file format. */
    KnownFileFormat["VHD"] = "VHD";
    /** A VHDX file is a disk image file in the Virtual Hard Disk v2 file format. */
    KnownFileFormat["Vhdx"] = "VHDX";
})(KnownFileFormat || (KnownFileFormat = {}));
/** Known values of {@link ExtendedLocationType} that the service accepts. */
export var KnownExtendedLocationType;
(function (KnownExtendedLocationType) {
    /** EdgeZone */
    KnownExtendedLocationType["EdgeZone"] = "EdgeZone";
})(KnownExtendedLocationType || (KnownExtendedLocationType = {}));
/** Known values of {@link GalleryProvisioningState} that the service accepts. */
export var KnownGalleryProvisioningState;
(function (KnownGalleryProvisioningState) {
    /** Creating */
    KnownGalleryProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownGalleryProvisioningState["Updating"] = "Updating";
    /** Failed */
    KnownGalleryProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownGalleryProvisioningState["Succeeded"] = "Succeeded";
    /** Deleting */
    KnownGalleryProvisioningState["Deleting"] = "Deleting";
    /** Migrating */
    KnownGalleryProvisioningState["Migrating"] = "Migrating";
})(KnownGalleryProvisioningState || (KnownGalleryProvisioningState = {}));
/** Known values of {@link GallerySharingPermissionTypes} that the service accepts. */
export var KnownGallerySharingPermissionTypes;
(function (KnownGallerySharingPermissionTypes) {
    /** Private */
    KnownGallerySharingPermissionTypes["Private"] = "Private";
    /** Groups */
    KnownGallerySharingPermissionTypes["Groups"] = "Groups";
    /** Community */
    KnownGallerySharingPermissionTypes["Community"] = "Community";
})(KnownGallerySharingPermissionTypes || (KnownGallerySharingPermissionTypes = {}));
/** Known values of {@link SharingProfileGroupTypes} that the service accepts. */
export var KnownSharingProfileGroupTypes;
(function (KnownSharingProfileGroupTypes) {
    /** Subscriptions */
    KnownSharingProfileGroupTypes["Subscriptions"] = "Subscriptions";
    /** AADTenants */
    KnownSharingProfileGroupTypes["AADTenants"] = "AADTenants";
})(KnownSharingProfileGroupTypes || (KnownSharingProfileGroupTypes = {}));
/** Known values of {@link SharingState} that the service accepts. */
export var KnownSharingState;
(function (KnownSharingState) {
    /** Succeeded */
    KnownSharingState["Succeeded"] = "Succeeded";
    /** InProgress */
    KnownSharingState["InProgress"] = "InProgress";
    /** Failed */
    KnownSharingState["Failed"] = "Failed";
    /** Unknown */
    KnownSharingState["Unknown"] = "Unknown";
})(KnownSharingState || (KnownSharingState = {}));
/** Known values of {@link UefiSignatureTemplateName} that the service accepts. */
export var KnownUefiSignatureTemplateName;
(function (KnownUefiSignatureTemplateName) {
    /** NoSignatureTemplate */
    KnownUefiSignatureTemplateName["NoSignatureTemplate"] = "NoSignatureTemplate";
    /** MicrosoftUefiCertificateAuthorityTemplate */
    KnownUefiSignatureTemplateName["MicrosoftUefiCertificateAuthorityTemplate"] = "MicrosoftUefiCertificateAuthorityTemplate";
    /** MicrosoftWindowsTemplate */
    KnownUefiSignatureTemplateName["MicrosoftWindowsTemplate"] = "MicrosoftWindowsTemplate";
})(KnownUefiSignatureTemplateName || (KnownUefiSignatureTemplateName = {}));
/** Known values of {@link UefiKeyType} that the service accepts. */
export var KnownUefiKeyType;
(function (KnownUefiKeyType) {
    /** Sha256 */
    KnownUefiKeyType["Sha256"] = "sha256";
    /** X509 */
    KnownUefiKeyType["X509"] = "x509";
})(KnownUefiKeyType || (KnownUefiKeyType = {}));
/** Known values of {@link SharedGalleryHostCaching} that the service accepts. */
export var KnownSharedGalleryHostCaching;
(function (KnownSharedGalleryHostCaching) {
    /** None */
    KnownSharedGalleryHostCaching["None"] = "None";
    /** ReadOnly */
    KnownSharedGalleryHostCaching["ReadOnly"] = "ReadOnly";
    /** ReadWrite */
    KnownSharedGalleryHostCaching["ReadWrite"] = "ReadWrite";
})(KnownSharedGalleryHostCaching || (KnownSharedGalleryHostCaching = {}));
/** Known values of {@link SharedToValues} that the service accepts. */
export var KnownSharedToValues;
(function (KnownSharedToValues) {
    /** Tenant */
    KnownSharedToValues["Tenant"] = "tenant";
})(KnownSharedToValues || (KnownSharedToValues = {}));
/** Known values of {@link SelectPermissions} that the service accepts. */
export var KnownSelectPermissions;
(function (KnownSelectPermissions) {
    /** Permissions */
    KnownSelectPermissions["Permissions"] = "Permissions";
})(KnownSelectPermissions || (KnownSelectPermissions = {}));
/** Known values of {@link GalleryExpandParams} that the service accepts. */
export var KnownGalleryExpandParams;
(function (KnownGalleryExpandParams) {
    /** SharingProfileGroups */
    KnownGalleryExpandParams["SharingProfileGroups"] = "SharingProfile/Groups";
})(KnownGalleryExpandParams || (KnownGalleryExpandParams = {}));
/** Known values of {@link GalleryApplicationScriptRebootBehavior} that the service accepts. */
export var KnownGalleryApplicationScriptRebootBehavior;
(function (KnownGalleryApplicationScriptRebootBehavior) {
    /** None */
    KnownGalleryApplicationScriptRebootBehavior["None"] = "None";
    /** Rerun */
    KnownGalleryApplicationScriptRebootBehavior["Rerun"] = "Rerun";
})(KnownGalleryApplicationScriptRebootBehavior || (KnownGalleryApplicationScriptRebootBehavior = {}));
/** Known values of {@link StorageAccountType} that the service accepts. */
export var KnownStorageAccountType;
(function (KnownStorageAccountType) {
    /** StandardLRS */
    KnownStorageAccountType["StandardLRS"] = "Standard_LRS";
    /** StandardZRS */
    KnownStorageAccountType["StandardZRS"] = "Standard_ZRS";
    /** PremiumLRS */
    KnownStorageAccountType["PremiumLRS"] = "Premium_LRS";
    /** PremiumV2LRS */
    KnownStorageAccountType["PremiumV2LRS"] = "PremiumV2_LRS";
})(KnownStorageAccountType || (KnownStorageAccountType = {}));
/** Known values of {@link ConfidentialVMEncryptionType} that the service accepts. */
export var KnownConfidentialVMEncryptionType;
(function (KnownConfidentialVMEncryptionType) {
    /** EncryptedVMGuestStateOnlyWithPmk */
    KnownConfidentialVMEncryptionType["EncryptedVMGuestStateOnlyWithPmk"] = "EncryptedVMGuestStateOnlyWithPmk";
    /** EncryptedWithPmk */
    KnownConfidentialVMEncryptionType["EncryptedWithPmk"] = "EncryptedWithPmk";
    /** EncryptedWithCmk */
    KnownConfidentialVMEncryptionType["EncryptedWithCmk"] = "EncryptedWithCmk";
    /** NonPersistedTPM */
    KnownConfidentialVMEncryptionType["NonPersistedTPM"] = "NonPersistedTPM";
})(KnownConfidentialVMEncryptionType || (KnownConfidentialVMEncryptionType = {}));
/** Known values of {@link ReplicationMode} that the service accepts. */
export var KnownReplicationMode;
(function (KnownReplicationMode) {
    /** Full */
    KnownReplicationMode["Full"] = "Full";
    /** Shallow */
    KnownReplicationMode["Shallow"] = "Shallow";
})(KnownReplicationMode || (KnownReplicationMode = {}));
/** Known values of {@link GalleryExtendedLocationType} that the service accepts. */
export var KnownGalleryExtendedLocationType;
(function (KnownGalleryExtendedLocationType) {
    /** EdgeZone */
    KnownGalleryExtendedLocationType["EdgeZone"] = "EdgeZone";
    /** Unknown */
    KnownGalleryExtendedLocationType["Unknown"] = "Unknown";
})(KnownGalleryExtendedLocationType || (KnownGalleryExtendedLocationType = {}));
/** Known values of {@link EdgeZoneStorageAccountType} that the service accepts. */
export var KnownEdgeZoneStorageAccountType;
(function (KnownEdgeZoneStorageAccountType) {
    /** StandardLRS */
    KnownEdgeZoneStorageAccountType["StandardLRS"] = "Standard_LRS";
    /** StandardZRS */
    KnownEdgeZoneStorageAccountType["StandardZRS"] = "Standard_ZRS";
    /** StandardSSDLRS */
    KnownEdgeZoneStorageAccountType["StandardSSDLRS"] = "StandardSSD_LRS";
    /** PremiumLRS */
    KnownEdgeZoneStorageAccountType["PremiumLRS"] = "Premium_LRS";
})(KnownEdgeZoneStorageAccountType || (KnownEdgeZoneStorageAccountType = {}));
/** Known values of {@link AggregatedReplicationState} that the service accepts. */
export var KnownAggregatedReplicationState;
(function (KnownAggregatedReplicationState) {
    /** Unknown */
    KnownAggregatedReplicationState["Unknown"] = "Unknown";
    /** InProgress */
    KnownAggregatedReplicationState["InProgress"] = "InProgress";
    /** Completed */
    KnownAggregatedReplicationState["Completed"] = "Completed";
    /** Failed */
    KnownAggregatedReplicationState["Failed"] = "Failed";
})(KnownAggregatedReplicationState || (KnownAggregatedReplicationState = {}));
/** Known values of {@link ReplicationState} that the service accepts. */
export var KnownReplicationState;
(function (KnownReplicationState) {
    /** Unknown */
    KnownReplicationState["Unknown"] = "Unknown";
    /** Replicating */
    KnownReplicationState["Replicating"] = "Replicating";
    /** Completed */
    KnownReplicationState["Completed"] = "Completed";
    /** Failed */
    KnownReplicationState["Failed"] = "Failed";
})(KnownReplicationState || (KnownReplicationState = {}));
/** Known values of {@link ReplicationStatusTypes} that the service accepts. */
export var KnownReplicationStatusTypes;
(function (KnownReplicationStatusTypes) {
    /** ReplicationStatus */
    KnownReplicationStatusTypes["ReplicationStatus"] = "ReplicationStatus";
    /** UefiSettings */
    KnownReplicationStatusTypes["UefiSettings"] = "UefiSettings";
})(KnownReplicationStatusTypes || (KnownReplicationStatusTypes = {}));
/** Known values of {@link PolicyViolationCategory} that the service accepts. */
export var KnownPolicyViolationCategory;
(function (KnownPolicyViolationCategory) {
    /** Other */
    KnownPolicyViolationCategory["Other"] = "Other";
    /** ImageFlaggedUnsafe */
    KnownPolicyViolationCategory["ImageFlaggedUnsafe"] = "ImageFlaggedUnsafe";
    /** CopyrightValidation */
    KnownPolicyViolationCategory["CopyrightValidation"] = "CopyrightValidation";
    /** IpTheft */
    KnownPolicyViolationCategory["IpTheft"] = "IpTheft";
})(KnownPolicyViolationCategory || (KnownPolicyViolationCategory = {}));
/** Known values of {@link ValidationStatus} that the service accepts. */
export var KnownValidationStatus;
(function (KnownValidationStatus) {
    /** Unknown */
    KnownValidationStatus["Unknown"] = "Unknown";
    /** Failed */
    KnownValidationStatus["Failed"] = "Failed";
    /** Succeeded */
    KnownValidationStatus["Succeeded"] = "Succeeded";
})(KnownValidationStatus || (KnownValidationStatus = {}));
/** Known values of {@link AccessControlRulesMode} that the service accepts. */
export var KnownAccessControlRulesMode;
(function (KnownAccessControlRulesMode) {
    /** Audit */
    KnownAccessControlRulesMode["Audit"] = "Audit";
    /** Enforce */
    KnownAccessControlRulesMode["Enforce"] = "Enforce";
    /** Disabled */
    KnownAccessControlRulesMode["Disabled"] = "Disabled";
})(KnownAccessControlRulesMode || (KnownAccessControlRulesMode = {}));
/** Known values of {@link EndpointAccess} that the service accepts. */
export var KnownEndpointAccess;
(function (KnownEndpointAccess) {
    /** Allow */
    KnownEndpointAccess["Allow"] = "Allow";
    /** Deny */
    KnownEndpointAccess["Deny"] = "Deny";
})(KnownEndpointAccess || (KnownEndpointAccess = {}));
/** Known values of {@link SharingUpdateOperationTypes} that the service accepts. */
export var KnownSharingUpdateOperationTypes;
(function (KnownSharingUpdateOperationTypes) {
    /** Add */
    KnownSharingUpdateOperationTypes["Add"] = "Add";
    /** Remove */
    KnownSharingUpdateOperationTypes["Remove"] = "Remove";
    /** Reset */
    KnownSharingUpdateOperationTypes["Reset"] = "Reset";
    /** EnableCommunity */
    KnownSharingUpdateOperationTypes["EnableCommunity"] = "EnableCommunity";
})(KnownSharingUpdateOperationTypes || (KnownSharingUpdateOperationTypes = {}));
/** Known values of {@link SoftDeletedArtifactTypes} that the service accepts. */
export var KnownSoftDeletedArtifactTypes;
(function (KnownSoftDeletedArtifactTypes) {
    /** Images */
    KnownSoftDeletedArtifactTypes["Images"] = "Images";
})(KnownSoftDeletedArtifactTypes || (KnownSoftDeletedArtifactTypes = {}));
/** Known values of {@link CloudServiceUpgradeMode} that the service accepts. */
export var KnownCloudServiceUpgradeMode;
(function (KnownCloudServiceUpgradeMode) {
    /** Auto */
    KnownCloudServiceUpgradeMode["Auto"] = "Auto";
    /** Manual */
    KnownCloudServiceUpgradeMode["Manual"] = "Manual";
    /** Simultaneous */
    KnownCloudServiceUpgradeMode["Simultaneous"] = "Simultaneous";
})(KnownCloudServiceUpgradeMode || (KnownCloudServiceUpgradeMode = {}));
/** Known values of {@link CloudServiceSlotType} that the service accepts. */
export var KnownCloudServiceSlotType;
(function (KnownCloudServiceSlotType) {
    /** Production */
    KnownCloudServiceSlotType["Production"] = "Production";
    /** Staging */
    KnownCloudServiceSlotType["Staging"] = "Staging";
})(KnownCloudServiceSlotType || (KnownCloudServiceSlotType = {}));
/** Known values of {@link AvailabilitySetSkuTypes} that the service accepts. */
export var KnownAvailabilitySetSkuTypes;
(function (KnownAvailabilitySetSkuTypes) {
    /** Classic */
    KnownAvailabilitySetSkuTypes["Classic"] = "Classic";
    /** Aligned */
    KnownAvailabilitySetSkuTypes["Aligned"] = "Aligned";
})(KnownAvailabilitySetSkuTypes || (KnownAvailabilitySetSkuTypes = {}));
//# sourceMappingURL=index.js.map