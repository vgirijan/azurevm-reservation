/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AvailabilitySet as AvailabilitySetMapper, AvailabilitySetUpdate as AvailabilitySetUpdateMapper, ConvertToVirtualMachineScaleSetInput as ConvertToVirtualMachineScaleSetInputMapper, MigrateToVirtualMachineScaleSetInput as MigrateToVirtualMachineScaleSetInputMapper, CapacityReservationGroup as CapacityReservationGroupMapper, CapacityReservationGroupUpdate as CapacityReservationGroupUpdateMapper, DedicatedHostGroup as DedicatedHostGroupMapper, DedicatedHostGroupUpdate as DedicatedHostGroupUpdateMapper, Image as ImageMapper, ImageUpdate as ImageUpdateMapper, RequestRateByIntervalInput as RequestRateByIntervalInputMapper, ThrottledRequestsInput as ThrottledRequestsInputMapper, VirtualMachineRunCommand as VirtualMachineRunCommandMapper, VirtualMachineRunCommandUpdate as VirtualMachineRunCommandUpdateMapper, VirtualMachineScaleSet as VirtualMachineScaleSetMapper, VirtualMachineScaleSetUpdate as VirtualMachineScaleSetUpdateMapper, VirtualMachineScaleSetVMInstanceIDs as VirtualMachineScaleSetVMInstanceIDsMapper, VMScaleSetConvertToSinglePlacementGroupInput as VMScaleSetConvertToSinglePlacementGroupInputMapper, VirtualMachineScaleSetVMInstanceRequiredIDs as VirtualMachineScaleSetVMInstanceRequiredIDsMapper, VirtualMachineScaleSetReimageParameters as VirtualMachineScaleSetReimageParametersMapper, OrchestrationServiceStateInput as OrchestrationServiceStateInputMapper, VirtualMachine as VirtualMachineMapper, VirtualMachineUpdate as VirtualMachineUpdateMapper, AttachDetachDataDisksRequest as AttachDetachDataDisksRequestMapper, VirtualMachineCaptureParameters as VirtualMachineCaptureParametersMapper, VirtualMachineInstallPatchesParameters as VirtualMachineInstallPatchesParametersMapper, MigrateVMToVirtualMachineScaleSetInput as MigrateVMToVirtualMachineScaleSetInputMapper, VirtualMachineReimageParameters as VirtualMachineReimageParametersMapper, RunCommandInput as RunCommandInputMapper, ProximityPlacementGroup as ProximityPlacementGroupMapper, ProximityPlacementGroupUpdate as ProximityPlacementGroupUpdateMapper, RestorePointCollection as RestorePointCollectionMapper, RestorePointCollectionUpdate as RestorePointCollectionUpdateMapper, SshPublicKeyResource as SshPublicKeyResourceMapper, SshPublicKeyUpdateResource as SshPublicKeyUpdateResourceMapper, SshGenerateKeyPairInputParameters as SshGenerateKeyPairInputParametersMapper, CapacityReservation as CapacityReservationMapper, CapacityReservationUpdate as CapacityReservationUpdateMapper, DedicatedHost as DedicatedHostMapper, DedicatedHostUpdate as DedicatedHostUpdateMapper, RestorePoint as RestorePointMapper, VirtualMachineScaleSetExtension as VirtualMachineScaleSetExtensionMapper, VirtualMachineScaleSetExtensionUpdate as VirtualMachineScaleSetExtensionUpdateMapper, VirtualMachineScaleSetVM as VirtualMachineScaleSetVMMapper, VirtualMachineScaleSetVMReimageParameters as VirtualMachineScaleSetVMReimageParametersMapper, VirtualMachineScaleSetVMExtension as VirtualMachineScaleSetVMExtensionMapper, VirtualMachineScaleSetVMExtensionUpdate as VirtualMachineScaleSetVMExtensionUpdateMapper, VirtualMachineExtension as VirtualMachineExtensionMapper, VirtualMachineExtensionUpdate as VirtualMachineExtensionUpdateMapper, DiskAccess as DiskAccessMapper, DiskAccessUpdate as DiskAccessUpdateMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, DiskEncryptionSet as DiskEncryptionSetMapper, DiskEncryptionSetUpdate as DiskEncryptionSetUpdateMapper, Disk as DiskMapper, DiskUpdate as DiskUpdateMapper, GrantAccessData as GrantAccessDataMapper, Snapshot as SnapshotMapper, SnapshotUpdate as SnapshotUpdateMapper, Gallery as GalleryMapper, GalleryUpdate as GalleryUpdateMapper, GalleryApplication as GalleryApplicationMapper, GalleryApplicationUpdate as GalleryApplicationUpdateMapper, GalleryApplicationVersion as GalleryApplicationVersionMapper, GalleryApplicationVersionUpdate as GalleryApplicationVersionUpdateMapper, GalleryImage as GalleryImageMapper, GalleryImageUpdate as GalleryImageUpdateMapper, GalleryImageVersion as GalleryImageVersionMapper, GalleryImageVersionUpdate as GalleryImageVersionUpdateMapper, GalleryInVMAccessControlProfile as GalleryInVMAccessControlProfileMapper, GalleryInVMAccessControlProfileUpdate as GalleryInVMAccessControlProfileUpdateMapper, GalleryInVMAccessControlProfileVersion as GalleryInVMAccessControlProfileVersionMapper, GalleryInVMAccessControlProfileVersionUpdate as GalleryInVMAccessControlProfileVersionUpdateMapper, SharingUpdate as SharingUpdateMapper, CloudService as CloudServiceMapper, CloudServiceUpdate as CloudServiceUpdateMapper, RoleInstances as RoleInstancesMapper, UpdateDomain as UpdateDomainMapper, } from "../models/mappers.js";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const availabilitySetName = {
    parameterPath: "availabilitySetName",
    mapper: {
        serializedName: "availabilitySetName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const parameters = {
    parameterPath: "parameters",
    mapper: AvailabilitySetMapper,
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: AvailabilitySetUpdateMapper,
};
export const parameters2 = {
    parameterPath: ["options", "parameters"],
    mapper: ConvertToVirtualMachineScaleSetInputMapper,
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: MigrateToVirtualMachineScaleSetInputMapper,
};
export const expand1 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const resourceIdsOnly = {
    parameterPath: ["options", "resourceIdsOnly"],
    mapper: {
        serializedName: "resourceIdsOnly",
        type: {
            name: "String",
        },
    },
};
export const capacityReservationGroupName = {
    parameterPath: "capacityReservationGroupName",
    mapper: {
        serializedName: "capacityReservationGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand2 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: CapacityReservationGroupMapper,
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: CapacityReservationGroupUpdateMapper,
};
export const hostGroupName = {
    parameterPath: "hostGroupName",
    mapper: {
        serializedName: "hostGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand3 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "Enum",
            allowedValues: ["instanceView", "userData", "resiliencyView"],
        },
    },
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: DedicatedHostGroupMapper,
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: DedicatedHostGroupUpdateMapper,
};
export const imageName = {
    parameterPath: "imageName",
    mapper: {
        serializedName: "imageName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: ImageMapper,
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: ImageUpdateMapper,
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const edgeZone = {
    parameterPath: "edgeZone",
    mapper: {
        serializedName: "edgeZone",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const publisherName = {
    parameterPath: "publisherName",
    mapper: {
        serializedName: "publisherName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const offer = {
    parameterPath: "offer",
    mapper: {
        serializedName: "offer",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const skus = {
    parameterPath: "skus",
    mapper: {
        serializedName: "skus",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number",
        },
    },
};
export const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String",
        },
    },
};
export const version = {
    parameterPath: "version",
    mapper: {
        serializedName: "version",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand4 = {
    parameterPath: "expand",
    mapper: {
        serializedName: "$expand",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: RequestRateByIntervalInputMapper,
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: ThrottledRequestsInputMapper,
};
export const typeParam = {
    parameterPath: "typeParam",
    mapper: {
        serializedName: "type",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String",
        },
    },
};
export const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json, text/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const commandId = {
    parameterPath: "commandId",
    mapper: {
        serializedName: "commandId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const vmName = {
    parameterPath: "vmName",
    mapper: {
        serializedName: "vmName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const runCommandName = {
    parameterPath: "runCommandName",
    mapper: {
        serializedName: "runCommandName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const runCommand = {
    parameterPath: "runCommand",
    mapper: VirtualMachineRunCommandMapper,
};
export const runCommand1 = {
    parameterPath: "runCommand",
    mapper: VirtualMachineRunCommandUpdateMapper,
};
export const vmScaleSetName = {
    parameterPath: "vmScaleSetName",
    mapper: {
        serializedName: "vmScaleSetName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand5 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const parameters12 = {
    parameterPath: "parameters",
    mapper: VirtualMachineScaleSetMapper,
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
export const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String",
        },
    },
};
export const parameters13 = {
    parameterPath: "parameters",
    mapper: VirtualMachineScaleSetUpdateMapper,
};
export const forceDeletion = {
    parameterPath: ["options", "forceDeletion"],
    mapper: {
        serializedName: "forceDeletion",
        type: {
            name: "Boolean",
        },
    },
};
export const vmInstanceIDs = {
    parameterPath: ["options", "vmInstanceIDs"],
    mapper: VirtualMachineScaleSetVMInstanceIDsMapper,
};
export const parameters14 = {
    parameterPath: "parameters",
    mapper: VMScaleSetConvertToSinglePlacementGroupInputMapper,
};
export const hibernate = {
    parameterPath: ["options", "hibernate"],
    mapper: {
        serializedName: "hibernate",
        type: {
            name: "Boolean",
        },
    },
};
export const vmInstanceIDs1 = {
    parameterPath: "vmInstanceIDs",
    mapper: VirtualMachineScaleSetVMInstanceRequiredIDsMapper,
};
export const platformUpdateDomain = {
    parameterPath: "platformUpdateDomain",
    mapper: {
        serializedName: "platformUpdateDomain",
        required: true,
        type: {
            name: "Number",
        },
    },
};
export const zone = {
    parameterPath: ["options", "zone"],
    mapper: {
        serializedName: "zone",
        type: {
            name: "String",
        },
    },
};
export const placementGroupId = {
    parameterPath: ["options", "placementGroupId"],
    mapper: {
        serializedName: "placementGroupId",
        type: {
            name: "String",
        },
    },
};
export const skipShutdown = {
    parameterPath: ["options", "skipShutdown"],
    mapper: {
        serializedName: "skipShutdown",
        type: {
            name: "Boolean",
        },
    },
};
export const vmScaleSetReimageInput = {
    parameterPath: ["options", "vmScaleSetReimageInput"],
    mapper: VirtualMachineScaleSetReimageParametersMapper,
};
export const parameters15 = {
    parameterPath: "parameters",
    mapper: OrchestrationServiceStateInputMapper,
};
export const statusOnly = {
    parameterPath: ["options", "statusOnly"],
    mapper: {
        serializedName: "statusOnly",
        type: {
            name: "String",
        },
    },
};
export const expand6 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const expand7 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const parameters16 = {
    parameterPath: "parameters",
    mapper: VirtualMachineMapper,
};
export const parameters17 = {
    parameterPath: "parameters",
    mapper: VirtualMachineUpdateMapper,
};
export const parameters18 = {
    parameterPath: "parameters",
    mapper: AttachDetachDataDisksRequestMapper,
};
export const parameters19 = {
    parameterPath: "parameters",
    mapper: VirtualMachineCaptureParametersMapper,
};
export const installPatchesInput = {
    parameterPath: "installPatchesInput",
    mapper: VirtualMachineInstallPatchesParametersMapper,
};
export const parameters20 = {
    parameterPath: ["options", "parameters"],
    mapper: MigrateVMToVirtualMachineScaleSetInputMapper,
};
export const parameters21 = {
    parameterPath: ["options", "parameters"],
    mapper: VirtualMachineReimageParametersMapper,
};
export const sasUriExpirationTimeInMinutes = {
    parameterPath: ["options", "sasUriExpirationTimeInMinutes"],
    mapper: {
        serializedName: "sasUriExpirationTimeInMinutes",
        type: {
            name: "Number",
        },
    },
};
export const parameters22 = {
    parameterPath: "parameters",
    mapper: RunCommandInputMapper,
};
export const proximityPlacementGroupName = {
    parameterPath: "proximityPlacementGroupName",
    mapper: {
        serializedName: "proximityPlacementGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const includeColocationStatus = {
    parameterPath: ["options", "includeColocationStatus"],
    mapper: {
        serializedName: "includeColocationStatus",
        type: {
            name: "String",
        },
    },
};
export const parameters23 = {
    parameterPath: "parameters",
    mapper: ProximityPlacementGroupMapper,
};
export const parameters24 = {
    parameterPath: "parameters",
    mapper: ProximityPlacementGroupUpdateMapper,
};
export const restorePointCollectionName = {
    parameterPath: "restorePointCollectionName",
    mapper: {
        serializedName: "restorePointCollectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand8 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const parameters25 = {
    parameterPath: "parameters",
    mapper: RestorePointCollectionMapper,
};
export const parameters26 = {
    parameterPath: "parameters",
    mapper: RestorePointCollectionUpdateMapper,
};
export const sshPublicKeyName = {
    parameterPath: "sshPublicKeyName",
    mapper: {
        serializedName: "sshPublicKeyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters27 = {
    parameterPath: "parameters",
    mapper: SshPublicKeyResourceMapper,
};
export const parameters28 = {
    parameterPath: "parameters",
    mapper: SshPublicKeyUpdateResourceMapper,
};
export const parameters29 = {
    parameterPath: ["options", "parameters"],
    mapper: SshGenerateKeyPairInputParametersMapper,
};
export const capacityReservationName = {
    parameterPath: "capacityReservationName",
    mapper: {
        serializedName: "capacityReservationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand9 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const parameters30 = {
    parameterPath: "parameters",
    mapper: CapacityReservationMapper,
};
export const parameters31 = {
    parameterPath: "parameters",
    mapper: CapacityReservationUpdateMapper,
};
export const hostName = {
    parameterPath: "hostName",
    mapper: {
        serializedName: "hostName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters32 = {
    parameterPath: "parameters",
    mapper: DedicatedHostMapper,
};
export const parameters33 = {
    parameterPath: "parameters",
    mapper: DedicatedHostUpdateMapper,
};
export const restorePointName = {
    parameterPath: "restorePointName",
    mapper: {
        serializedName: "restorePointName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand10 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const parameters34 = {
    parameterPath: "parameters",
    mapper: RestorePointMapper,
};
export const vmssExtensionName = {
    parameterPath: "vmssExtensionName",
    mapper: {
        serializedName: "vmssExtensionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const extensionParameters = {
    parameterPath: "extensionParameters",
    mapper: VirtualMachineScaleSetExtensionMapper,
};
export const extensionParameters1 = {
    parameterPath: "extensionParameters",
    mapper: VirtualMachineScaleSetExtensionUpdateMapper,
};
export const virtualMachineScaleSetName = {
    parameterPath: "virtualMachineScaleSetName",
    mapper: {
        serializedName: "virtualMachineScaleSetName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const select = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$select",
        type: {
            name: "String",
        },
    },
};
export const instanceId = {
    parameterPath: "instanceId",
    mapper: {
        serializedName: "instanceId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters35 = {
    parameterPath: "parameters",
    mapper: VirtualMachineScaleSetVMMapper,
};
export const vmScaleSetVMReimageInput = {
    parameterPath: ["options", "vmScaleSetVMReimageInput"],
    mapper: VirtualMachineScaleSetVMReimageParametersMapper,
};
export const vmExtensionName = {
    parameterPath: "vmExtensionName",
    mapper: {
        serializedName: "vmExtensionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const extensionParameters2 = {
    parameterPath: "extensionParameters",
    mapper: VirtualMachineScaleSetVMExtensionMapper,
};
export const extensionParameters3 = {
    parameterPath: "extensionParameters",
    mapper: VirtualMachineScaleSetVMExtensionUpdateMapper,
};
export const extensionParameters4 = {
    parameterPath: "extensionParameters",
    mapper: VirtualMachineExtensionMapper,
};
export const extensionParameters5 = {
    parameterPath: "extensionParameters",
    mapper: VirtualMachineExtensionUpdateMapper,
};
export const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2025-01-02",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const diskAccessName = {
    parameterPath: "diskAccessName",
    mapper: {
        serializedName: "diskAccessName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const diskAccess = {
    parameterPath: "diskAccess",
    mapper: DiskAccessMapper,
};
export const diskAccess1 = {
    parameterPath: "diskAccess",
    mapper: DiskAccessUpdateMapper,
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper,
};
export const diskEncryptionSetName = {
    parameterPath: "diskEncryptionSetName",
    mapper: {
        serializedName: "diskEncryptionSetName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const diskEncryptionSet = {
    parameterPath: "diskEncryptionSet",
    mapper: DiskEncryptionSetMapper,
};
export const diskEncryptionSet1 = {
    parameterPath: "diskEncryptionSet",
    mapper: DiskEncryptionSetUpdateMapper,
};
export const diskName = {
    parameterPath: "diskName",
    mapper: {
        serializedName: "diskName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const disk = {
    parameterPath: "disk",
    mapper: DiskMapper,
};
export const disk1 = {
    parameterPath: "disk",
    mapper: DiskUpdateMapper,
};
export const grantAccessData = {
    parameterPath: "grantAccessData",
    mapper: GrantAccessDataMapper,
};
export const snapshotName = {
    parameterPath: "snapshotName",
    mapper: {
        serializedName: "snapshotName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const snapshot = {
    parameterPath: "snapshot",
    mapper: SnapshotMapper,
};
export const snapshot1 = {
    parameterPath: "snapshot",
    mapper: SnapshotUpdateMapper,
};
export const vmRestorePointName = {
    parameterPath: "vmRestorePointName",
    mapper: {
        serializedName: "vmRestorePointName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const diskRestorePointName = {
    parameterPath: "diskRestorePointName",
    mapper: {
        serializedName: "diskRestorePointName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const apiVersion2 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const includeExtendedLocations = {
    parameterPath: ["options", "includeExtendedLocations"],
    mapper: {
        serializedName: "includeExtendedLocations",
        type: {
            name: "String",
        },
    },
};
export const apiVersion3 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-03-03",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const galleryName = {
    parameterPath: "galleryName",
    mapper: {
        serializedName: "galleryName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const select1 = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$select",
        type: {
            name: "String",
        },
    },
};
export const expand11 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const gallery = {
    parameterPath: "gallery",
    mapper: GalleryMapper,
};
export const gallery1 = {
    parameterPath: "gallery",
    mapper: GalleryUpdateMapper,
};
export const publicGalleryName = {
    parameterPath: "publicGalleryName",
    mapper: {
        serializedName: "publicGalleryName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const galleryImageName = {
    parameterPath: "galleryImageName",
    mapper: {
        serializedName: "galleryImageName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const galleryImageVersionName = {
    parameterPath: "galleryImageVersionName",
    mapper: {
        serializedName: "galleryImageVersionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const sharedTo = {
    parameterPath: ["options", "sharedTo"],
    mapper: {
        serializedName: "sharedTo",
        type: {
            name: "String",
        },
    },
};
export const galleryUniqueName = {
    parameterPath: "galleryUniqueName",
    mapper: {
        serializedName: "galleryUniqueName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const galleryApplicationName = {
    parameterPath: "galleryApplicationName",
    mapper: {
        serializedName: "galleryApplicationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const galleryApplication = {
    parameterPath: "galleryApplication",
    mapper: GalleryApplicationMapper,
};
export const galleryApplication1 = {
    parameterPath: "galleryApplication",
    mapper: GalleryApplicationUpdateMapper,
};
export const galleryApplicationVersionName = {
    parameterPath: "galleryApplicationVersionName",
    mapper: {
        serializedName: "galleryApplicationVersionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const expand12 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const galleryApplicationVersion = {
    parameterPath: "galleryApplicationVersion",
    mapper: GalleryApplicationVersionMapper,
};
export const galleryApplicationVersion1 = {
    parameterPath: "galleryApplicationVersion",
    mapper: GalleryApplicationVersionUpdateMapper,
};
export const galleryImage = {
    parameterPath: "galleryImage",
    mapper: GalleryImageMapper,
};
export const galleryImage1 = {
    parameterPath: "galleryImage",
    mapper: GalleryImageUpdateMapper,
};
export const galleryImageVersion = {
    parameterPath: "galleryImageVersion",
    mapper: GalleryImageVersionMapper,
};
export const galleryImageVersion1 = {
    parameterPath: "galleryImageVersion",
    mapper: GalleryImageVersionUpdateMapper,
};
export const inVMAccessControlProfileName = {
    parameterPath: "inVMAccessControlProfileName",
    mapper: {
        serializedName: "inVMAccessControlProfileName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const galleryInVMAccessControlProfile = {
    parameterPath: "galleryInVMAccessControlProfile",
    mapper: GalleryInVMAccessControlProfileMapper,
};
export const galleryInVMAccessControlProfile1 = {
    parameterPath: "galleryInVMAccessControlProfile",
    mapper: GalleryInVMAccessControlProfileUpdateMapper,
};
export const inVMAccessControlProfileVersionName = {
    parameterPath: "inVMAccessControlProfileVersionName",
    mapper: {
        serializedName: "inVMAccessControlProfileVersionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const galleryInVMAccessControlProfileVersion = {
    parameterPath: "galleryInVMAccessControlProfileVersion",
    mapper: GalleryInVMAccessControlProfileVersionMapper,
};
export const galleryInVMAccessControlProfileVersion1 = {
    parameterPath: "galleryInVMAccessControlProfileVersion",
    mapper: GalleryInVMAccessControlProfileVersionUpdateMapper,
};
export const sharingUpdate = {
    parameterPath: "sharingUpdate",
    mapper: SharingUpdateMapper,
};
export const artifactType = {
    parameterPath: "artifactType",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+([_]?[a-zA-Z0-9]+)*$"),
        },
        serializedName: "artifactType",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const artifactName = {
    parameterPath: "artifactName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+([_]?[a-zA-Z0-9]+)*$"),
        },
        serializedName: "artifactName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const roleInstanceName = {
    parameterPath: "roleInstanceName",
    mapper: {
        serializedName: "roleInstanceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const resourceGroupName1 = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const cloudServiceName = {
    parameterPath: "cloudServiceName",
    mapper: {
        serializedName: "cloudServiceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const apiVersion4 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-11-04",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/x-rdp",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const roleName = {
    parameterPath: "roleName",
    mapper: {
        serializedName: "roleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters36 = {
    parameterPath: ["options", "parameters"],
    mapper: CloudServiceMapper,
};
export const parameters37 = {
    parameterPath: ["options", "parameters"],
    mapper: CloudServiceUpdateMapper,
};
export const parameters38 = {
    parameterPath: ["options", "parameters"],
    mapper: RoleInstancesMapper,
};
export const parameters39 = {
    parameterPath: ["options", "parameters"],
    mapper: UpdateDomainMapper,
};
export const updateDomain = {
    parameterPath: "updateDomain",
    mapper: {
        serializedName: "updateDomain",
        required: true,
        type: {
            name: "Number",
        },
    },
};
export const location1 = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const osVersionName = {
    parameterPath: "osVersionName",
    mapper: {
        serializedName: "osVersionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const osFamilyName = {
    parameterPath: "osFamilyName",
    mapper: {
        serializedName: "osFamilyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
//# sourceMappingURL=parameters.js.map