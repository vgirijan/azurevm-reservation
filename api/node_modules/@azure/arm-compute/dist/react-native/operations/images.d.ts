import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Images } from "../operationsInterfaces/index.js";
import { ComputeManagementClient } from "../computeManagementClient.js";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Image, ImagesListOptionalParams, ImagesListByResourceGroupOptionalParams, ImagesGetOptionalParams, ImagesGetResponse, ImagesCreateOrUpdateOptionalParams, ImagesCreateOrUpdateResponse, ImageUpdate, ImagesUpdateOptionalParams, ImagesUpdateResponse, ImagesDeleteOptionalParams } from "../models/index.js";
/** Class containing Images operations. */
export declare class ImagesImpl implements Images {
    private readonly client;
    /**
     * Initialize a new instance of the class Images class.
     * @param client Reference to the service client
     */
    constructor(client: ComputeManagementClient);
    /**
     * Gets the list of Images in the subscription. Use nextLink property in the response to get the next
     * page of Images. Do this till nextLink is null to fetch all the Images.
     * @param options The options parameters.
     */
    list(options?: ImagesListOptionalParams): PagedAsyncIterableIterator<Image>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets the list of images under a resource group. Use nextLink property in the response to get the
     * next page of Images. Do this till nextLink is null to fetch all the Images.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ImagesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Image>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Gets the list of Images in the subscription. Use nextLink property in the response to get the next
     * page of Images. Do this till nextLink is null to fetch all the Images.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets the list of images under a resource group. Use nextLink property in the response to get the
     * next page of Images. Do this till nextLink is null to fetch all the Images.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Gets an image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param imageName The name of the image.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, imageName: string, options?: ImagesGetOptionalParams): Promise<ImagesGetResponse>;
    /**
     * Create or update an image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param imageName The name of the image.
     * @param parameters Parameters supplied to the Create Image operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, imageName: string, parameters: Image, options?: ImagesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ImagesCreateOrUpdateResponse>, ImagesCreateOrUpdateResponse>>;
    /**
     * Create or update an image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param imageName The name of the image.
     * @param parameters Parameters supplied to the Create Image operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, imageName: string, parameters: Image, options?: ImagesCreateOrUpdateOptionalParams): Promise<ImagesCreateOrUpdateResponse>;
    /**
     * Update an image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param imageName The name of the image.
     * @param parameters Parameters supplied to the Update Image operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, imageName: string, parameters: ImageUpdate, options?: ImagesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ImagesUpdateResponse>, ImagesUpdateResponse>>;
    /**
     * Update an image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param imageName The name of the image.
     * @param parameters Parameters supplied to the Update Image operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, imageName: string, parameters: ImageUpdate, options?: ImagesUpdateOptionalParams): Promise<ImagesUpdateResponse>;
    /**
     * Deletes an Image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param imageName The name of the image.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, imageName: string, options?: ImagesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an Image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param imageName The name of the image.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, imageName: string, options?: ImagesDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=images.d.ts.map