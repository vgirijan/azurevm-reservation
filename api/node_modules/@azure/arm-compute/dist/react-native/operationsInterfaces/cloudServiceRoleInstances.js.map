{"version":3,"file":"cloudServiceRoleInstances.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/cloudServiceRoleInstances.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  RoleInstance,\n  CloudServiceRoleInstancesListOptionalParams,\n  CloudServiceRoleInstancesDeleteOptionalParams,\n  CloudServiceRoleInstancesGetOptionalParams,\n  CloudServiceRoleInstancesGetResponse,\n  CloudServiceRoleInstancesGetInstanceViewOptionalParams,\n  CloudServiceRoleInstancesGetInstanceViewResponse,\n  CloudServiceRoleInstancesRestartOptionalParams,\n  CloudServiceRoleInstancesReimageOptionalParams,\n  CloudServiceRoleInstancesRebuildOptionalParams,\n  CloudServiceRoleInstancesGetRemoteDesktopFileOptionalParams,\n  CloudServiceRoleInstancesGetRemoteDesktopFileResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a CloudServiceRoleInstances. */\nexport interface CloudServiceRoleInstances {\n  /**\n   * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get\n   * the next page of role instances. Do this till nextLink is null to fetch all the role instances.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesListOptionalParams,\n  ): PagedAsyncIterableIterator<RoleInstance>;\n  /**\n   * Deletes a role instance from a cloud service.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes a role instance from a cloud service.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets a role instance from a cloud service.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  get(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesGetOptionalParams,\n  ): Promise<CloudServiceRoleInstancesGetResponse>;\n  /**\n   * Retrieves information about the run-time state of a role instance in a cloud service.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  getInstanceView(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesGetInstanceViewOptionalParams,\n  ): Promise<CloudServiceRoleInstancesGetInstanceViewResponse>;\n  /**\n   * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud\n   * service.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  beginRestart(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesRestartOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud\n   * service.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  beginRestartAndWait(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesRestartOptionalParams,\n  ): Promise<void>;\n  /**\n   * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web\n   * roles or worker roles.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  beginReimage(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesReimageOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web\n   * roles or worker roles.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  beginReimageAndWait(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesReimageOptionalParams,\n  ): Promise<void>;\n  /**\n   * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web\n   * roles or worker roles and initializes the storage resources that are used by them. If you do not\n   * want to initialize storage resources, you can use Reimage Role Instance.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  beginRebuild(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesRebuildOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web\n   * roles or worker roles and initializes the storage resources that are used by them. If you do not\n   * want to initialize storage resources, you can use Reimage Role Instance.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  beginRebuildAndWait(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesRebuildOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets a remote desktop file for a role instance in a cloud service.\n   * @param roleInstanceName Name of the role instance.\n   * @param resourceGroupName Name of the resource group.\n   * @param cloudServiceName Name of the cloud service.\n   * @param options The options parameters.\n   */\n  getRemoteDesktopFile(\n    roleInstanceName: string,\n    resourceGroupName: string,\n    cloudServiceName: string,\n    options?: CloudServiceRoleInstancesGetRemoteDesktopFileOptionalParams,\n  ): Promise<CloudServiceRoleInstancesGetRemoteDesktopFileResponse>;\n}\n"]}