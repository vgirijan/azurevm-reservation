import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Reservation } from "../operationsInterfaces";
import { AzureReservationAPI } from "../azureReservationAPI";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ReservationResponse, ReservationListOptionalParams, ReservationListRevisionsOptionalParams, ReservationListAllOptionalParams, AvailableScopeRequest, ReservationAvailableScopesOptionalParams, ReservationAvailableScopesResponse, SplitRequest, ReservationSplitOptionalParams, ReservationSplitResponse, MergeRequest, ReservationMergeOptionalParams, ReservationMergeResponse, ReservationGetOptionalParams, ReservationGetResponse, Patch, ReservationUpdateOptionalParams, ReservationUpdateResponse, ReservationArchiveOptionalParams, ReservationUnarchiveOptionalParams } from "../models";
/** Class containing Reservation operations. */
export declare class ReservationImpl implements Reservation {
    private readonly client;
    /**
     * Initialize a new instance of the class Reservation class.
     * @param client Reference to the service client
     */
    constructor(client: AzureReservationAPI);
    /**
     * List `Reservation`s within a single `ReservationOrder`.
     * @param reservationOrderId Order Id of the reservation
     * @param options The options parameters.
     */
    list(reservationOrderId: string, options?: ReservationListOptionalParams): PagedAsyncIterableIterator<ReservationResponse>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List of all the revisions for the `Reservation`.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    listRevisions(reservationOrderId: string, reservationId: string, options?: ReservationListRevisionsOptionalParams): PagedAsyncIterableIterator<ReservationResponse>;
    private listRevisionsPagingPage;
    private listRevisionsPagingAll;
    /**
     * List the reservations and the roll up counts of reservations group by provisioning states that the
     * user has access to in the current tenant.
     * @param options The options parameters.
     */
    listAll(options?: ReservationListAllOptionalParams): PagedAsyncIterableIterator<ReservationResponse>;
    private listAllPagingPage;
    private listAllPagingAll;
    /**
     * Check whether the scopes from request is valid for `Reservation`.
     *
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param body Scopes to be checked for eligibility.
     * @param options The options parameters.
     */
    beginAvailableScopes(reservationOrderId: string, reservationId: string, body: AvailableScopeRequest, options?: ReservationAvailableScopesOptionalParams): Promise<SimplePollerLike<OperationState<ReservationAvailableScopesResponse>, ReservationAvailableScopesResponse>>;
    /**
     * Check whether the scopes from request is valid for `Reservation`.
     *
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param body Scopes to be checked for eligibility.
     * @param options The options parameters.
     */
    beginAvailableScopesAndWait(reservationOrderId: string, reservationId: string, body: AvailableScopeRequest, options?: ReservationAvailableScopesOptionalParams): Promise<ReservationAvailableScopesResponse>;
    /**
     * Split a `Reservation` into two `Reservation`s with specified quantity distribution.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed to Split a reservation item
     * @param options The options parameters.
     */
    beginSplit(reservationOrderId: string, body: SplitRequest, options?: ReservationSplitOptionalParams): Promise<SimplePollerLike<OperationState<ReservationSplitResponse>, ReservationSplitResponse>>;
    /**
     * Split a `Reservation` into two `Reservation`s with specified quantity distribution.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed to Split a reservation item
     * @param options The options parameters.
     */
    beginSplitAndWait(reservationOrderId: string, body: SplitRequest, options?: ReservationSplitOptionalParams): Promise<ReservationSplitResponse>;
    /**
     * Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged
     * must have same properties.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for commercial request for a reservation
     * @param options The options parameters.
     */
    beginMerge(reservationOrderId: string, body: MergeRequest, options?: ReservationMergeOptionalParams): Promise<SimplePollerLike<OperationState<ReservationMergeResponse>, ReservationMergeResponse>>;
    /**
     * Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged
     * must have same properties.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for commercial request for a reservation
     * @param options The options parameters.
     */
    beginMergeAndWait(reservationOrderId: string, body: MergeRequest, options?: ReservationMergeOptionalParams): Promise<ReservationMergeResponse>;
    /**
     * List `Reservation`s within a single `ReservationOrder`.
     * @param reservationOrderId Order Id of the reservation
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get specific `Reservation` details.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    get(reservationOrderId: string, reservationId: string, options?: ReservationGetOptionalParams): Promise<ReservationGetResponse>;
    /**
     * Updates the applied scopes of the `Reservation`.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param parameters Information needed to patch a reservation item
     * @param options The options parameters.
     */
    beginUpdate(reservationOrderId: string, reservationId: string, parameters: Patch, options?: ReservationUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ReservationUpdateResponse>, ReservationUpdateResponse>>;
    /**
     * Updates the applied scopes of the `Reservation`.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param parameters Information needed to patch a reservation item
     * @param options The options parameters.
     */
    beginUpdateAndWait(reservationOrderId: string, reservationId: string, parameters: Patch, options?: ReservationUpdateOptionalParams): Promise<ReservationUpdateResponse>;
    /**
     * Archiving a `Reservation` moves it to `Archived` state.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    archive(reservationOrderId: string, reservationId: string, options?: ReservationArchiveOptionalParams): Promise<void>;
    /**
     * Restores a `Reservation` to the state it was before archiving.
     *
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    unarchive(reservationOrderId: string, reservationId: string, options?: ReservationUnarchiveOptionalParams): Promise<void>;
    /**
     * List of all the revisions for the `Reservation`.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    private _listRevisions;
    /**
     * List the reservations and the roll up counts of reservations group by provisioning states that the
     * user has access to in the current tenant.
     * @param options The options parameters.
     */
    private _listAll;
    /**
     * ListNext
     * @param reservationOrderId Order Id of the reservation
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListRevisionsNext
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param nextLink The nextLink from the previous successful call to the ListRevisions method.
     * @param options The options parameters.
     */
    private _listRevisionsNext;
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    private _listAllNext;
}
//# sourceMappingURL=reservation.d.ts.map