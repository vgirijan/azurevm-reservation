'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ErrorResponseCode} that the service accepts. */
exports.KnownErrorResponseCode = void 0;
(function (KnownErrorResponseCode) {
    /** NotSpecified */
    KnownErrorResponseCode["NotSpecified"] = "NotSpecified";
    /** InternalServerError */
    KnownErrorResponseCode["InternalServerError"] = "InternalServerError";
    /** ServerTimeout */
    KnownErrorResponseCode["ServerTimeout"] = "ServerTimeout";
    /** AuthorizationFailed */
    KnownErrorResponseCode["AuthorizationFailed"] = "AuthorizationFailed";
    /** BadRequest */
    KnownErrorResponseCode["BadRequest"] = "BadRequest";
    /** ClientCertificateThumbprintNotSet */
    KnownErrorResponseCode["ClientCertificateThumbprintNotSet"] = "ClientCertificateThumbprintNotSet";
    /** InvalidRequestContent */
    KnownErrorResponseCode["InvalidRequestContent"] = "InvalidRequestContent";
    /** OperationFailed */
    KnownErrorResponseCode["OperationFailed"] = "OperationFailed";
    /** HttpMethodNotSupported */
    KnownErrorResponseCode["HttpMethodNotSupported"] = "HttpMethodNotSupported";
    /** InvalidRequestUri */
    KnownErrorResponseCode["InvalidRequestUri"] = "InvalidRequestUri";
    /** MissingTenantId */
    KnownErrorResponseCode["MissingTenantId"] = "MissingTenantId";
    /** InvalidTenantId */
    KnownErrorResponseCode["InvalidTenantId"] = "InvalidTenantId";
    /** InvalidReservationOrderId */
    KnownErrorResponseCode["InvalidReservationOrderId"] = "InvalidReservationOrderId";
    /** InvalidReservationId */
    KnownErrorResponseCode["InvalidReservationId"] = "InvalidReservationId";
    /** ReservationIdNotInReservationOrder */
    KnownErrorResponseCode["ReservationIdNotInReservationOrder"] = "ReservationIdNotInReservationOrder";
    /** ReservationOrderNotFound */
    KnownErrorResponseCode["ReservationOrderNotFound"] = "ReservationOrderNotFound";
    /** InvalidSubscriptionId */
    KnownErrorResponseCode["InvalidSubscriptionId"] = "InvalidSubscriptionId";
    /** InvalidAccessToken */
    KnownErrorResponseCode["InvalidAccessToken"] = "InvalidAccessToken";
    /** InvalidLocationId */
    KnownErrorResponseCode["InvalidLocationId"] = "InvalidLocationId";
    /** UnauthenticatedRequestsThrottled */
    KnownErrorResponseCode["UnauthenticatedRequestsThrottled"] = "UnauthenticatedRequestsThrottled";
    /** InvalidHealthCheckType */
    KnownErrorResponseCode["InvalidHealthCheckType"] = "InvalidHealthCheckType";
    /** Forbidden */
    KnownErrorResponseCode["Forbidden"] = "Forbidden";
    /** BillingScopeIdCannotBeChanged */
    KnownErrorResponseCode["BillingScopeIdCannotBeChanged"] = "BillingScopeIdCannotBeChanged";
    /** AppliedScopesNotAssociatedWithCommerceAccount */
    KnownErrorResponseCode["AppliedScopesNotAssociatedWithCommerceAccount"] = "AppliedScopesNotAssociatedWithCommerceAccount";
    /** PatchValuesSameAsExisting */
    KnownErrorResponseCode["PatchValuesSameAsExisting"] = "PatchValuesSameAsExisting";
    /** RoleAssignmentCreationFailed */
    KnownErrorResponseCode["RoleAssignmentCreationFailed"] = "RoleAssignmentCreationFailed";
    /** ReservationOrderCreationFailed */
    KnownErrorResponseCode["ReservationOrderCreationFailed"] = "ReservationOrderCreationFailed";
    /** ReservationOrderNotEnabled */
    KnownErrorResponseCode["ReservationOrderNotEnabled"] = "ReservationOrderNotEnabled";
    /** CapacityUpdateScopesFailed */
    KnownErrorResponseCode["CapacityUpdateScopesFailed"] = "CapacityUpdateScopesFailed";
    /** UnsupportedReservationTerm */
    KnownErrorResponseCode["UnsupportedReservationTerm"] = "UnsupportedReservationTerm";
    /** ReservationOrderIdAlreadyExists */
    KnownErrorResponseCode["ReservationOrderIdAlreadyExists"] = "ReservationOrderIdAlreadyExists";
    /** RiskCheckFailed */
    KnownErrorResponseCode["RiskCheckFailed"] = "RiskCheckFailed";
    /** CreateQuoteFailed */
    KnownErrorResponseCode["CreateQuoteFailed"] = "CreateQuoteFailed";
    /** ActivateQuoteFailed */
    KnownErrorResponseCode["ActivateQuoteFailed"] = "ActivateQuoteFailed";
    /** NonsupportedAccountId */
    KnownErrorResponseCode["NonsupportedAccountId"] = "NonsupportedAccountId";
    /** PaymentInstrumentNotFound */
    KnownErrorResponseCode["PaymentInstrumentNotFound"] = "PaymentInstrumentNotFound";
    /** MissingAppliedScopesForSingle */
    KnownErrorResponseCode["MissingAppliedScopesForSingle"] = "MissingAppliedScopesForSingle";
    /** NoValidReservationsToReRate */
    KnownErrorResponseCode["NoValidReservationsToReRate"] = "NoValidReservationsToReRate";
    /** ReRateOnlyAllowedForEA */
    KnownErrorResponseCode["ReRateOnlyAllowedForEA"] = "ReRateOnlyAllowedForEA";
    /** OperationCannotBePerformedInCurrentState */
    KnownErrorResponseCode["OperationCannotBePerformedInCurrentState"] = "OperationCannotBePerformedInCurrentState";
    /** InvalidSingleAppliedScopesCount */
    KnownErrorResponseCode["InvalidSingleAppliedScopesCount"] = "InvalidSingleAppliedScopesCount";
    /** InvalidFulfillmentRequestParameters */
    KnownErrorResponseCode["InvalidFulfillmentRequestParameters"] = "InvalidFulfillmentRequestParameters";
    /** NotSupportedCountry */
    KnownErrorResponseCode["NotSupportedCountry"] = "NotSupportedCountry";
    /** InvalidRefundQuantity */
    KnownErrorResponseCode["InvalidRefundQuantity"] = "InvalidRefundQuantity";
    /** PurchaseError */
    KnownErrorResponseCode["PurchaseError"] = "PurchaseError";
    /** BillingCustomerInputError */
    KnownErrorResponseCode["BillingCustomerInputError"] = "BillingCustomerInputError";
    /** BillingPaymentInstrumentSoftError */
    KnownErrorResponseCode["BillingPaymentInstrumentSoftError"] = "BillingPaymentInstrumentSoftError";
    /** BillingPaymentInstrumentHardError */
    KnownErrorResponseCode["BillingPaymentInstrumentHardError"] = "BillingPaymentInstrumentHardError";
    /** BillingTransientError */
    KnownErrorResponseCode["BillingTransientError"] = "BillingTransientError";
    /** BillingError */
    KnownErrorResponseCode["BillingError"] = "BillingError";
    /** FulfillmentConfigurationError */
    KnownErrorResponseCode["FulfillmentConfigurationError"] = "FulfillmentConfigurationError";
    /** FulfillmentOutOfStockError */
    KnownErrorResponseCode["FulfillmentOutOfStockError"] = "FulfillmentOutOfStockError";
    /** FulfillmentTransientError */
    KnownErrorResponseCode["FulfillmentTransientError"] = "FulfillmentTransientError";
    /** FulfillmentError */
    KnownErrorResponseCode["FulfillmentError"] = "FulfillmentError";
    /** CalculatePriceFailed */
    KnownErrorResponseCode["CalculatePriceFailed"] = "CalculatePriceFailed";
    /** AppliedScopesSameAsExisting */
    KnownErrorResponseCode["AppliedScopesSameAsExisting"] = "AppliedScopesSameAsExisting";
    /** SelfServiceRefundNotSupported */
    KnownErrorResponseCode["SelfServiceRefundNotSupported"] = "SelfServiceRefundNotSupported";
    /** RefundLimitExceeded */
    KnownErrorResponseCode["RefundLimitExceeded"] = "RefundLimitExceeded";
})(exports.KnownErrorResponseCode || (exports.KnownErrorResponseCode = {}));
/** Known values of {@link ReservationBillingPlan} that the service accepts. */
exports.KnownReservationBillingPlan = void 0;
(function (KnownReservationBillingPlan) {
    /** Upfront */
    KnownReservationBillingPlan["Upfront"] = "Upfront";
    /** Monthly */
    KnownReservationBillingPlan["Monthly"] = "Monthly";
})(exports.KnownReservationBillingPlan || (exports.KnownReservationBillingPlan = {}));
/** Known values of {@link ReservationTerm} that the service accepts. */
exports.KnownReservationTerm = void 0;
(function (KnownReservationTerm) {
    /** P1Y */
    KnownReservationTerm["P1Y"] = "P1Y";
    /** P3Y */
    KnownReservationTerm["P3Y"] = "P3Y";
    /** P5Y */
    KnownReservationTerm["P5Y"] = "P5Y";
})(exports.KnownReservationTerm || (exports.KnownReservationTerm = {}));
/** Known values of {@link ReservedResourceType} that the service accepts. */
exports.KnownReservedResourceType = void 0;
(function (KnownReservedResourceType) {
    /** VirtualMachines */
    KnownReservedResourceType["VirtualMachines"] = "VirtualMachines";
    /** SqlDatabases */
    KnownReservedResourceType["SqlDatabases"] = "SqlDatabases";
    /** SuseLinux */
    KnownReservedResourceType["SuseLinux"] = "SuseLinux";
    /** CosmosDb */
    KnownReservedResourceType["CosmosDb"] = "CosmosDb";
    /** RedHat */
    KnownReservedResourceType["RedHat"] = "RedHat";
    /** SqlDataWarehouse */
    KnownReservedResourceType["SqlDataWarehouse"] = "SqlDataWarehouse";
    /** VMwareCloudSimple */
    KnownReservedResourceType["VMwareCloudSimple"] = "VMwareCloudSimple";
    /** RedHatOsa */
    KnownReservedResourceType["RedHatOsa"] = "RedHatOsa";
    /** Databricks */
    KnownReservedResourceType["Databricks"] = "Databricks";
    /** AppService */
    KnownReservedResourceType["AppService"] = "AppService";
    /** ManagedDisk */
    KnownReservedResourceType["ManagedDisk"] = "ManagedDisk";
    /** BlockBlob */
    KnownReservedResourceType["BlockBlob"] = "BlockBlob";
    /** RedisCache */
    KnownReservedResourceType["RedisCache"] = "RedisCache";
    /** AzureDataExplorer */
    KnownReservedResourceType["AzureDataExplorer"] = "AzureDataExplorer";
    /** MySql */
    KnownReservedResourceType["MySql"] = "MySql";
    /** MariaDb */
    KnownReservedResourceType["MariaDb"] = "MariaDb";
    /** PostgreSql */
    KnownReservedResourceType["PostgreSql"] = "PostgreSql";
    /** DedicatedHost */
    KnownReservedResourceType["DedicatedHost"] = "DedicatedHost";
    /** SapHana */
    KnownReservedResourceType["SapHana"] = "SapHana";
    /** SqlAzureHybridBenefit */
    KnownReservedResourceType["SqlAzureHybridBenefit"] = "SqlAzureHybridBenefit";
    /** AVS */
    KnownReservedResourceType["AVS"] = "AVS";
    /** DataFactory */
    KnownReservedResourceType["DataFactory"] = "DataFactory";
    /** NetAppStorage */
    KnownReservedResourceType["NetAppStorage"] = "NetAppStorage";
    /** AzureFiles */
    KnownReservedResourceType["AzureFiles"] = "AzureFiles";
    /** SqlEdge */
    KnownReservedResourceType["SqlEdge"] = "SqlEdge";
    /** VirtualMachineSoftware */
    KnownReservedResourceType["VirtualMachineSoftware"] = "VirtualMachineSoftware";
})(exports.KnownReservedResourceType || (exports.KnownReservedResourceType = {}));
/** Known values of {@link AppliedScopeType} that the service accepts. */
exports.KnownAppliedScopeType = void 0;
(function (KnownAppliedScopeType) {
    /** Single */
    KnownAppliedScopeType["Single"] = "Single";
    /** Shared */
    KnownAppliedScopeType["Shared"] = "Shared";
    /** ManagementGroup */
    KnownAppliedScopeType["ManagementGroup"] = "ManagementGroup";
})(exports.KnownAppliedScopeType || (exports.KnownAppliedScopeType = {}));
/** Known values of {@link InstanceFlexibility} that the service accepts. */
exports.KnownInstanceFlexibility = void 0;
(function (KnownInstanceFlexibility) {
    /** On */
    KnownInstanceFlexibility["On"] = "On";
    /** Off */
    KnownInstanceFlexibility["Off"] = "Off";
})(exports.KnownInstanceFlexibility || (exports.KnownInstanceFlexibility = {}));
/** Known values of {@link PaymentStatus} that the service accepts. */
exports.KnownPaymentStatus = void 0;
(function (KnownPaymentStatus) {
    /** Succeeded */
    KnownPaymentStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownPaymentStatus["Failed"] = "Failed";
    /** Scheduled */
    KnownPaymentStatus["Scheduled"] = "Scheduled";
    /** Cancelled */
    KnownPaymentStatus["Cancelled"] = "Cancelled";
})(exports.KnownPaymentStatus || (exports.KnownPaymentStatus = {}));
/** Known values of {@link ReservationStatusCode} that the service accepts. */
exports.KnownReservationStatusCode = void 0;
(function (KnownReservationStatusCode) {
    /** None */
    KnownReservationStatusCode["None"] = "None";
    /** Pending */
    KnownReservationStatusCode["Pending"] = "Pending";
    /** Processing */
    KnownReservationStatusCode["Processing"] = "Processing";
    /** Active */
    KnownReservationStatusCode["Active"] = "Active";
    /** PurchaseError */
    KnownReservationStatusCode["PurchaseError"] = "PurchaseError";
    /** PaymentInstrumentError */
    KnownReservationStatusCode["PaymentInstrumentError"] = "PaymentInstrumentError";
    /** Split */
    KnownReservationStatusCode["Split"] = "Split";
    /** Merged */
    KnownReservationStatusCode["Merged"] = "Merged";
    /** Expired */
    KnownReservationStatusCode["Expired"] = "Expired";
    /** Succeeded */
    KnownReservationStatusCode["Succeeded"] = "Succeeded";
})(exports.KnownReservationStatusCode || (exports.KnownReservationStatusCode = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** PendingResourceHold */
    KnownProvisioningState["PendingResourceHold"] = "PendingResourceHold";
    /** ConfirmedResourceHold */
    KnownProvisioningState["ConfirmedResourceHold"] = "ConfirmedResourceHold";
    /** PendingBilling */
    KnownProvisioningState["PendingBilling"] = "PendingBilling";
    /** ConfirmedBilling */
    KnownProvisioningState["ConfirmedBilling"] = "ConfirmedBilling";
    /** Created */
    KnownProvisioningState["Created"] = "Created";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Cancelled */
    KnownProvisioningState["Cancelled"] = "Cancelled";
    /** Expired */
    KnownProvisioningState["Expired"] = "Expired";
    /** BillingFailed */
    KnownProvisioningState["BillingFailed"] = "BillingFailed";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Split */
    KnownProvisioningState["Split"] = "Split";
    /** Merged */
    KnownProvisioningState["Merged"] = "Merged";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link SavingsPlanTerm} that the service accepts. */
exports.KnownSavingsPlanTerm = void 0;
(function (KnownSavingsPlanTerm) {
    /** P1Y */
    KnownSavingsPlanTerm["P1Y"] = "P1Y";
    /** P3Y */
    KnownSavingsPlanTerm["P3Y"] = "P3Y";
})(exports.KnownSavingsPlanTerm || (exports.KnownSavingsPlanTerm = {}));
/** Known values of {@link BillingPlan} that the service accepts. */
exports.KnownBillingPlan = void 0;
(function (KnownBillingPlan) {
    /** P1M */
    KnownBillingPlan["P1M"] = "P1M";
})(exports.KnownBillingPlan || (exports.KnownBillingPlan = {}));
/** Known values of {@link CommitmentGrain} that the service accepts. */
exports.KnownCommitmentGrain = void 0;
(function (KnownCommitmentGrain) {
    /** Hourly */
    KnownCommitmentGrain["Hourly"] = "Hourly";
})(exports.KnownCommitmentGrain || (exports.KnownCommitmentGrain = {}));
/** Known values of {@link CalculateExchangeOperationResultStatus} that the service accepts. */
exports.KnownCalculateExchangeOperationResultStatus = void 0;
(function (KnownCalculateExchangeOperationResultStatus) {
    /** Succeeded */
    KnownCalculateExchangeOperationResultStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownCalculateExchangeOperationResultStatus["Failed"] = "Failed";
    /** Cancelled */
    KnownCalculateExchangeOperationResultStatus["Cancelled"] = "Cancelled";
    /** Pending */
    KnownCalculateExchangeOperationResultStatus["Pending"] = "Pending";
})(exports.KnownCalculateExchangeOperationResultStatus || (exports.KnownCalculateExchangeOperationResultStatus = {}));
/** Known values of {@link ExchangeOperationResultStatus} that the service accepts. */
exports.KnownExchangeOperationResultStatus = void 0;
(function (KnownExchangeOperationResultStatus) {
    /** Succeeded */
    KnownExchangeOperationResultStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownExchangeOperationResultStatus["Failed"] = "Failed";
    /** Cancelled */
    KnownExchangeOperationResultStatus["Cancelled"] = "Cancelled";
    /** PendingRefunds */
    KnownExchangeOperationResultStatus["PendingRefunds"] = "PendingRefunds";
    /** PendingPurchases */
    KnownExchangeOperationResultStatus["PendingPurchases"] = "PendingPurchases";
})(exports.KnownExchangeOperationResultStatus || (exports.KnownExchangeOperationResultStatus = {}));
/** Known values of {@link OperationStatus} that the service accepts. */
exports.KnownOperationStatus = void 0;
(function (KnownOperationStatus) {
    /** Succeeded */
    KnownOperationStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownOperationStatus["Failed"] = "Failed";
    /** Cancelled */
    KnownOperationStatus["Cancelled"] = "Cancelled";
    /** Pending */
    KnownOperationStatus["Pending"] = "Pending";
})(exports.KnownOperationStatus || (exports.KnownOperationStatus = {}));
/** Known values of {@link ResourceType} that the service accepts. */
exports.KnownResourceType = void 0;
(function (KnownResourceType) {
    /** Standard */
    KnownResourceType["Standard"] = "standard";
    /** Dedicated */
    KnownResourceType["Dedicated"] = "dedicated";
    /** LowPriority */
    KnownResourceType["LowPriority"] = "lowPriority";
    /** Shared */
    KnownResourceType["Shared"] = "shared";
    /** ServiceSpecific */
    KnownResourceType["ServiceSpecific"] = "serviceSpecific";
})(exports.KnownResourceType || (exports.KnownResourceType = {}));
/** Known values of {@link QuotaRequestState} that the service accepts. */
exports.KnownQuotaRequestState = void 0;
(function (KnownQuotaRequestState) {
    /** Accepted */
    KnownQuotaRequestState["Accepted"] = "Accepted";
    /** Invalid */
    KnownQuotaRequestState["Invalid"] = "Invalid";
    /** Succeeded */
    KnownQuotaRequestState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownQuotaRequestState["Failed"] = "Failed";
    /** InProgress */
    KnownQuotaRequestState["InProgress"] = "InProgress";
})(exports.KnownQuotaRequestState || (exports.KnownQuotaRequestState = {}));
/** Known values of {@link Location} that the service accepts. */
exports.KnownLocation = void 0;
(function (KnownLocation) {
    /** Westus */
    KnownLocation["Westus"] = "westus";
    /** Eastus */
    KnownLocation["Eastus"] = "eastus";
    /** Eastus2 */
    KnownLocation["Eastus2"] = "eastus2";
    /** Northcentralus */
    KnownLocation["Northcentralus"] = "northcentralus";
    /** Westus2 */
    KnownLocation["Westus2"] = "westus2";
    /** Southcentralus */
    KnownLocation["Southcentralus"] = "southcentralus";
    /** Centralus */
    KnownLocation["Centralus"] = "centralus";
    /** Westeurope */
    KnownLocation["Westeurope"] = "westeurope";
    /** Northeurope */
    KnownLocation["Northeurope"] = "northeurope";
    /** Eastasia */
    KnownLocation["Eastasia"] = "eastasia";
    /** Southeastasia */
    KnownLocation["Southeastasia"] = "southeastasia";
    /** Japaneast */
    KnownLocation["Japaneast"] = "japaneast";
    /** Japanwest */
    KnownLocation["Japanwest"] = "japanwest";
    /** Brazilsouth */
    KnownLocation["Brazilsouth"] = "brazilsouth";
    /** Australiaeast */
    KnownLocation["Australiaeast"] = "australiaeast";
    /** Australiasoutheast */
    KnownLocation["Australiasoutheast"] = "australiasoutheast";
    /** Southindia */
    KnownLocation["Southindia"] = "southindia";
    /** Westindia */
    KnownLocation["Westindia"] = "westindia";
    /** Centralindia */
    KnownLocation["Centralindia"] = "centralindia";
    /** Canadacentral */
    KnownLocation["Canadacentral"] = "canadacentral";
    /** Canadaeast */
    KnownLocation["Canadaeast"] = "canadaeast";
    /** Uksouth */
    KnownLocation["Uksouth"] = "uksouth";
    /** Westcentralus */
    KnownLocation["Westcentralus"] = "westcentralus";
    /** Ukwest */
    KnownLocation["Ukwest"] = "ukwest";
})(exports.KnownLocation || (exports.KnownLocation = {}));
/** Known values of {@link DisplayProvisioningState} that the service accepts. */
exports.KnownDisplayProvisioningState = void 0;
(function (KnownDisplayProvisioningState) {
    /** Succeeded */
    KnownDisplayProvisioningState["Succeeded"] = "Succeeded";
    /** Expiring */
    KnownDisplayProvisioningState["Expiring"] = "Expiring";
    /** Expired */
    KnownDisplayProvisioningState["Expired"] = "Expired";
    /** Pending */
    KnownDisplayProvisioningState["Pending"] = "Pending";
    /** Processing */
    KnownDisplayProvisioningState["Processing"] = "Processing";
    /** Cancelled */
    KnownDisplayProvisioningState["Cancelled"] = "Cancelled";
    /** Failed */
    KnownDisplayProvisioningState["Failed"] = "Failed";
    /** Warning */
    KnownDisplayProvisioningState["Warning"] = "Warning";
    /** NoBenefit */
    KnownDisplayProvisioningState["NoBenefit"] = "NoBenefit";
})(exports.KnownDisplayProvisioningState || (exports.KnownDisplayProvisioningState = {}));
/** Known values of {@link UserFriendlyAppliedScopeType} that the service accepts. */
exports.KnownUserFriendlyAppliedScopeType = void 0;
(function (KnownUserFriendlyAppliedScopeType) {
    /** None */
    KnownUserFriendlyAppliedScopeType["None"] = "None";
    /** Shared */
    KnownUserFriendlyAppliedScopeType["Shared"] = "Shared";
    /** Single */
    KnownUserFriendlyAppliedScopeType["Single"] = "Single";
    /** ResourceGroup */
    KnownUserFriendlyAppliedScopeType["ResourceGroup"] = "ResourceGroup";
    /** ManagementGroup */
    KnownUserFriendlyAppliedScopeType["ManagementGroup"] = "ManagementGroup";
})(exports.KnownUserFriendlyAppliedScopeType || (exports.KnownUserFriendlyAppliedScopeType = {}));
/** Known values of {@link UserFriendlyRenewState} that the service accepts. */
exports.KnownUserFriendlyRenewState = void 0;
(function (KnownUserFriendlyRenewState) {
    /** On */
    KnownUserFriendlyRenewState["On"] = "On";
    /** Off */
    KnownUserFriendlyRenewState["Off"] = "Off";
    /** Renewed */
    KnownUserFriendlyRenewState["Renewed"] = "Renewed";
    /** NotRenewed */
    KnownUserFriendlyRenewState["NotRenewed"] = "NotRenewed";
    /** NotApplicable */
    KnownUserFriendlyRenewState["NotApplicable"] = "NotApplicable";
})(exports.KnownUserFriendlyRenewState || (exports.KnownUserFriendlyRenewState = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AvailableScopeRequest = {
    type: {
        name: "Composite",
        className: "AvailableScopeRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AvailableScopeRequestProperties"
                }
            }
        }
    }
};
const AvailableScopeRequestProperties = {
    type: {
        name: "Composite",
        className: "AvailableScopeRequestProperties",
        modelProperties: {
            scopes: {
                serializedName: "scopes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AvailableScopeProperties = {
    type: {
        name: "Composite",
        className: "AvailableScopeProperties",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SubscriptionScopeProperties"
                }
            }
        }
    }
};
const SubscriptionScopeProperties = {
    type: {
        name: "Composite",
        className: "SubscriptionScopeProperties",
        modelProperties: {
            scopes: {
                serializedName: "scopes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScopeProperties"
                        }
                    }
                }
            }
        }
    }
};
const ScopeProperties = {
    type: {
        name: "Composite",
        className: "ScopeProperties",
        modelProperties: {
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            valid: {
                serializedName: "valid",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ExtendedErrorInfo"
                }
            }
        }
    }
};
const ExtendedErrorInfo = {
    type: {
        name: "Composite",
        className: "ExtendedErrorInfo",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CatalogsResult = {
    type: {
        name: "Composite",
        className: "CatalogsResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Catalog"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            totalItems: {
                serializedName: "totalItems",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Catalog = {
    type: {
        name: "Composite",
        className: "Catalog",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingPlans: {
                serializedName: "billingPlans",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Sequence", element: { type: { name: "String" } } }
                    }
                }
            },
            terms: {
                serializedName: "terms",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            locations: {
                serializedName: "locations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            skuProperties: {
                serializedName: "skuProperties",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuProperty"
                        }
                    }
                }
            },
            msrp: {
                serializedName: "msrp",
                type: {
                    name: "Composite",
                    className: "CatalogMsrp"
                }
            },
            restrictions: {
                serializedName: "restrictions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuRestriction"
                        }
                    }
                }
            },
            tier: {
                serializedName: "tier",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            capabilities: {
                serializedName: "capabilities",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuCapability"
                        }
                    }
                }
            }
        }
    }
};
const SkuProperty = {
    type: {
        name: "Composite",
        className: "SkuProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CatalogMsrp = {
    type: {
        name: "Composite",
        className: "CatalogMsrp",
        modelProperties: {
            p1Y: {
                serializedName: "p1Y",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            p3Y: {
                serializedName: "p3Y",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            p5Y: {
                serializedName: "p5Y",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            }
        }
    }
};
const Price = {
    type: {
        name: "Composite",
        className: "Price",
        modelProperties: {
            currencyCode: {
                serializedName: "currencyCode",
                type: {
                    name: "String"
                }
            },
            amount: {
                serializedName: "amount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SkuRestriction = {
    type: {
        name: "Composite",
        className: "SkuRestriction",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            reasonCode: {
                serializedName: "reasonCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SkuCapability = {
    type: {
        name: "Composite",
        className: "SkuCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppliedReservations = {
    type: {
        name: "Composite",
        className: "AppliedReservations",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reservationOrderIds: {
                serializedName: "properties.reservationOrderIds",
                type: {
                    name: "Composite",
                    className: "AppliedReservationList"
                }
            }
        }
    }
};
const AppliedReservationList = {
    type: {
        name: "Composite",
        className: "AppliedReservationList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PurchaseRequest = {
    type: {
        name: "Composite",
        className: "PurchaseRequest",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "SkuName"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            reservedResourceType: {
                serializedName: "properties.reservedResourceType",
                type: {
                    name: "String"
                }
            },
            billingScopeId: {
                serializedName: "properties.billingScopeId",
                type: {
                    name: "String"
                }
            },
            term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            },
            billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "properties.quantity",
                type: {
                    name: "Number"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                type: {
                    name: "String"
                }
            },
            appliedScopes: {
                serializedName: "properties.appliedScopes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            appliedScopeProperties: {
                serializedName: "properties.appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            },
            renew: {
                defaultValue: false,
                serializedName: "properties.renew",
                type: {
                    name: "Boolean"
                }
            },
            reservedResourceProperties: {
                serializedName: "properties.reservedResourceProperties",
                type: {
                    name: "Composite",
                    className: "PurchaseRequestPropertiesReservedResourceProperties"
                }
            },
            reviewDateTime: {
                serializedName: "properties.reviewDateTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const SkuName = {
    type: {
        name: "Composite",
        className: "SkuName",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppliedScopeProperties = {
    type: {
        name: "Composite",
        className: "AppliedScopeProperties",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            managementGroupId: {
                serializedName: "managementGroupId",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            resourceGroupId: {
                serializedName: "resourceGroupId",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PurchaseRequestPropertiesReservedResourceProperties = {
    type: {
        name: "Composite",
        className: "PurchaseRequestPropertiesReservedResourceProperties",
        modelProperties: {
            instanceFlexibility: {
                serializedName: "instanceFlexibility",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CalculatePriceResponse = {
    type: {
        name: "Composite",
        className: "CalculatePriceResponse",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CalculatePriceResponseProperties"
                }
            }
        }
    }
};
const CalculatePriceResponseProperties = {
    type: {
        name: "Composite",
        className: "CalculatePriceResponseProperties",
        modelProperties: {
            billingCurrencyTotal: {
                serializedName: "billingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "CalculatePriceResponsePropertiesBillingCurrencyTotal"
                }
            },
            netTotal: {
                serializedName: "netTotal",
                type: {
                    name: "Number"
                }
            },
            taxTotal: {
                serializedName: "taxTotal",
                type: {
                    name: "Number"
                }
            },
            grandTotal: {
                serializedName: "grandTotal",
                type: {
                    name: "Number"
                }
            },
            isTaxIncluded: {
                serializedName: "isTaxIncluded",
                type: {
                    name: "Boolean"
                }
            },
            isBillingPartnerManaged: {
                serializedName: "isBillingPartnerManaged",
                type: {
                    name: "Boolean"
                }
            },
            reservationOrderId: {
                serializedName: "reservationOrderId",
                type: {
                    name: "String"
                }
            },
            skuTitle: {
                serializedName: "skuTitle",
                type: {
                    name: "String"
                }
            },
            skuDescription: {
                serializedName: "skuDescription",
                type: {
                    name: "String"
                }
            },
            pricingCurrencyTotal: {
                serializedName: "pricingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "CalculatePriceResponsePropertiesPricingCurrencyTotal"
                }
            },
            paymentSchedule: {
                serializedName: "paymentSchedule",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PaymentDetail"
                        }
                    }
                }
            }
        }
    }
};
const CalculatePriceResponsePropertiesBillingCurrencyTotal = {
    type: {
        name: "Composite",
        className: "CalculatePriceResponsePropertiesBillingCurrencyTotal",
        modelProperties: {
            currencyCode: {
                serializedName: "currencyCode",
                type: {
                    name: "String"
                }
            },
            amount: {
                serializedName: "amount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CalculatePriceResponsePropertiesPricingCurrencyTotal = {
    type: {
        name: "Composite",
        className: "CalculatePriceResponsePropertiesPricingCurrencyTotal",
        modelProperties: {
            currencyCode: {
                serializedName: "currencyCode",
                type: {
                    name: "String"
                }
            },
            amount: {
                serializedName: "amount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const PaymentDetail = {
    type: {
        name: "Composite",
        className: "PaymentDetail",
        modelProperties: {
            dueDate: {
                serializedName: "dueDate",
                type: {
                    name: "Date"
                }
            },
            paymentDate: {
                serializedName: "paymentDate",
                type: {
                    name: "Date"
                }
            },
            pricingCurrencyTotal: {
                serializedName: "pricingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingCurrencyTotal: {
                serializedName: "billingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingAccount: {
                serializedName: "billingAccount",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            extendedStatusInfo: {
                serializedName: "extendedStatusInfo",
                type: {
                    name: "Composite",
                    className: "ExtendedStatusInfo"
                }
            }
        }
    }
};
const ExtendedStatusInfo = {
    type: {
        name: "Composite",
        className: "ExtendedStatusInfo",
        modelProperties: {
            statusCode: {
                serializedName: "statusCode",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationOrderList = {
    type: {
        name: "Composite",
        className: "ReservationOrderList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationOrderResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationOrderResponse = {
    type: {
        name: "Composite",
        className: "ReservationOrderResponse",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "Number"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            requestDateTime: {
                serializedName: "properties.requestDateTime",
                type: {
                    name: "DateTime"
                }
            },
            createdDateTime: {
                serializedName: "properties.createdDateTime",
                type: {
                    name: "DateTime"
                }
            },
            expiryDate: {
                serializedName: "properties.expiryDate",
                type: {
                    name: "Date"
                }
            },
            expiryDateTime: {
                serializedName: "properties.expiryDateTime",
                type: {
                    name: "DateTime"
                }
            },
            benefitStartTime: {
                serializedName: "properties.benefitStartTime",
                type: {
                    name: "DateTime"
                }
            },
            originalQuantity: {
                serializedName: "properties.originalQuantity",
                type: {
                    name: "Number"
                }
            },
            term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            },
            billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            },
            planInformation: {
                serializedName: "properties.planInformation",
                type: {
                    name: "Composite",
                    className: "ReservationOrderBillingPlanInformation"
                }
            },
            reservations: {
                serializedName: "properties.reservations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationResponse"
                        }
                    }
                }
            },
            reviewDateTime: {
                serializedName: "properties.reviewDateTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ReservationOrderBillingPlanInformation = {
    type: {
        name: "Composite",
        className: "ReservationOrderBillingPlanInformation",
        modelProperties: {
            pricingCurrencyTotal: {
                serializedName: "pricingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            startDate: {
                serializedName: "startDate",
                type: {
                    name: "Date"
                }
            },
            nextPaymentDueDate: {
                serializedName: "nextPaymentDueDate",
                type: {
                    name: "Date"
                }
            },
            transactions: {
                serializedName: "transactions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PaymentDetail"
                        }
                    }
                }
            }
        }
    }
};
const ReservationsProperties = {
    type: {
        name: "Composite",
        className: "ReservationsProperties",
        modelProperties: {
            reservedResourceType: {
                serializedName: "reservedResourceType",
                type: {
                    name: "String"
                }
            },
            instanceFlexibility: {
                serializedName: "instanceFlexibility",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            appliedScopes: {
                serializedName: "appliedScopes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            appliedScopeType: {
                serializedName: "appliedScopeType",
                type: {
                    name: "String"
                }
            },
            archived: {
                serializedName: "archived",
                type: {
                    name: "Boolean"
                }
            },
            capabilities: {
                serializedName: "capabilities",
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            },
            effectiveDateTime: {
                serializedName: "effectiveDateTime",
                type: {
                    name: "DateTime"
                }
            },
            benefitStartTime: {
                serializedName: "benefitStartTime",
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedDateTime: {
                serializedName: "lastUpdatedDateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            expiryDate: {
                serializedName: "expiryDate",
                type: {
                    name: "Date"
                }
            },
            expiryDateTime: {
                serializedName: "expiryDateTime",
                type: {
                    name: "DateTime"
                }
            },
            reviewDateTime: {
                serializedName: "reviewDateTime",
                type: {
                    name: "DateTime"
                }
            },
            skuDescription: {
                serializedName: "skuDescription",
                type: {
                    name: "String"
                }
            },
            extendedStatusInfo: {
                serializedName: "extendedStatusInfo",
                type: {
                    name: "Composite",
                    className: "ExtendedStatusInfo"
                }
            },
            billingPlan: {
                serializedName: "billingPlan",
                type: {
                    name: "String"
                }
            },
            displayProvisioningState: {
                serializedName: "displayProvisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provisioningSubState: {
                serializedName: "provisioningSubState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            purchaseDate: {
                serializedName: "purchaseDate",
                type: {
                    name: "Date"
                }
            },
            purchaseDateTime: {
                serializedName: "purchaseDateTime",
                type: {
                    name: "DateTime"
                }
            },
            splitProperties: {
                serializedName: "splitProperties",
                type: {
                    name: "Composite",
                    className: "ReservationSplitProperties"
                }
            },
            mergeProperties: {
                serializedName: "mergeProperties",
                type: {
                    name: "Composite",
                    className: "ReservationMergeProperties"
                }
            },
            swapProperties: {
                serializedName: "swapProperties",
                type: {
                    name: "Composite",
                    className: "ReservationSwapProperties"
                }
            },
            appliedScopeProperties: {
                serializedName: "appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            },
            billingScopeId: {
                serializedName: "billingScopeId",
                type: {
                    name: "String"
                }
            },
            renew: {
                defaultValue: false,
                serializedName: "renew",
                type: {
                    name: "Boolean"
                }
            },
            renewSource: {
                serializedName: "renewSource",
                type: {
                    name: "String"
                }
            },
            renewDestination: {
                serializedName: "renewDestination",
                type: {
                    name: "String"
                }
            },
            renewProperties: {
                serializedName: "renewProperties",
                type: {
                    name: "Composite",
                    className: "RenewPropertiesResponse"
                }
            },
            term: {
                serializedName: "term",
                type: {
                    name: "String"
                }
            },
            userFriendlyAppliedScopeType: {
                serializedName: "userFriendlyAppliedScopeType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            userFriendlyRenewState: {
                serializedName: "userFriendlyRenewState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            utilization: {
                serializedName: "utilization",
                type: {
                    name: "Composite",
                    className: "ReservationsPropertiesUtilization"
                }
            }
        }
    }
};
const ReservationSplitProperties = {
    type: {
        name: "Composite",
        className: "ReservationSplitProperties",
        modelProperties: {
            splitDestinations: {
                serializedName: "splitDestinations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            splitSource: {
                serializedName: "splitSource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationMergeProperties = {
    type: {
        name: "Composite",
        className: "ReservationMergeProperties",
        modelProperties: {
            mergeDestination: {
                serializedName: "mergeDestination",
                type: {
                    name: "String"
                }
            },
            mergeSources: {
                serializedName: "mergeSources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ReservationSwapProperties = {
    type: {
        name: "Composite",
        className: "ReservationSwapProperties",
        modelProperties: {
            swapSource: {
                serializedName: "swapSource",
                type: {
                    name: "String"
                }
            },
            swapDestination: {
                serializedName: "swapDestination",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RenewPropertiesResponse = {
    type: {
        name: "Composite",
        className: "RenewPropertiesResponse",
        modelProperties: {
            purchaseProperties: {
                serializedName: "purchaseProperties",
                type: {
                    name: "Composite",
                    className: "PurchaseRequest"
                }
            },
            pricingCurrencyTotal: {
                serializedName: "pricingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "RenewPropertiesResponsePricingCurrencyTotal"
                }
            },
            billingCurrencyTotal: {
                serializedName: "billingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "RenewPropertiesResponseBillingCurrencyTotal"
                }
            }
        }
    }
};
const RenewPropertiesResponsePricingCurrencyTotal = {
    type: {
        name: "Composite",
        className: "RenewPropertiesResponsePricingCurrencyTotal",
        modelProperties: {
            currencyCode: {
                serializedName: "currencyCode",
                type: {
                    name: "String"
                }
            },
            amount: {
                serializedName: "amount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const RenewPropertiesResponseBillingCurrencyTotal = {
    type: {
        name: "Composite",
        className: "RenewPropertiesResponseBillingCurrencyTotal",
        modelProperties: {
            currencyCode: {
                serializedName: "currencyCode",
                type: {
                    name: "String"
                }
            },
            amount: {
                serializedName: "amount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ReservationsPropertiesUtilization = {
    type: {
        name: "Composite",
        className: "ReservationsPropertiesUtilization",
        modelProperties: {
            trend: {
                serializedName: "trend",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aggregates: {
                serializedName: "aggregates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationUtilizationAggregates"
                        }
                    }
                }
            }
        }
    }
};
const ReservationUtilizationAggregates = {
    type: {
        name: "Composite",
        className: "ReservationUtilizationAggregates",
        modelProperties: {
            grain: {
                serializedName: "grain",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            grainUnit: {
                serializedName: "grainUnit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            valueUnit: {
                serializedName: "valueUnit",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const SplitRequest = {
    type: {
        name: "Composite",
        className: "SplitRequest",
        modelProperties: {
            quantities: {
                serializedName: "properties.quantities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            reservationId: {
                serializedName: "properties.reservationId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MergeRequest = {
    type: {
        name: "Composite",
        className: "MergeRequest",
        modelProperties: {
            sources: {
                serializedName: "properties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ReservationList = {
    type: {
        name: "Composite",
        className: "ReservationList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Patch = {
    type: {
        name: "Composite",
        className: "Patch",
        modelProperties: {
            appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                type: {
                    name: "String"
                }
            },
            appliedScopes: {
                serializedName: "properties.appliedScopes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            appliedScopeProperties: {
                serializedName: "properties.appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            },
            instanceFlexibility: {
                serializedName: "properties.instanceFlexibility",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "properties.name",
                type: {
                    name: "String"
                }
            },
            renew: {
                defaultValue: false,
                serializedName: "properties.renew",
                type: {
                    name: "Boolean"
                }
            },
            renewProperties: {
                serializedName: "properties.renewProperties",
                type: {
                    name: "Composite",
                    className: "PatchPropertiesRenewProperties"
                }
            },
            reviewDateTime: {
                serializedName: "properties.reviewDateTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const PatchPropertiesRenewProperties = {
    type: {
        name: "Composite",
        className: "PatchPropertiesRenewProperties",
        modelProperties: {
            purchaseProperties: {
                serializedName: "purchaseProperties",
                type: {
                    name: "Composite",
                    className: "PurchaseRequest"
                }
            }
        }
    }
};
const OperationList = {
    type: {
        name: "Composite",
        className: "OperationList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResponse = {
    type: {
        name: "Composite",
        className: "OperationResponse",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CalculateRefundRequest = {
    type: {
        name: "Composite",
        className: "CalculateRefundRequest",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CalculateRefundRequestProperties"
                }
            }
        }
    }
};
const CalculateRefundRequestProperties = {
    type: {
        name: "Composite",
        className: "CalculateRefundRequestProperties",
        modelProperties: {
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            reservationToReturn: {
                serializedName: "reservationToReturn",
                type: {
                    name: "Composite",
                    className: "ReservationToReturn"
                }
            }
        }
    }
};
const ReservationToReturn = {
    type: {
        name: "Composite",
        className: "ReservationToReturn",
        modelProperties: {
            reservationId: {
                serializedName: "reservationId",
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CalculateRefundResponse = {
    type: {
        name: "Composite",
        className: "CalculateRefundResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RefundResponseProperties"
                }
            }
        }
    }
};
const RefundResponseProperties = {
    type: {
        name: "Composite",
        className: "RefundResponseProperties",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            billingRefundAmount: {
                serializedName: "billingRefundAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            pricingRefundAmount: {
                serializedName: "pricingRefundAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            policyResult: {
                serializedName: "policyResult",
                type: {
                    name: "Composite",
                    className: "RefundPolicyResult"
                }
            },
            billingInformation: {
                serializedName: "billingInformation",
                type: {
                    name: "Composite",
                    className: "RefundBillingInformation"
                }
            }
        }
    }
};
const RefundPolicyResult = {
    type: {
        name: "Composite",
        className: "RefundPolicyResult",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RefundPolicyResultProperty"
                }
            }
        }
    }
};
const RefundPolicyResultProperty = {
    type: {
        name: "Composite",
        className: "RefundPolicyResultProperty",
        modelProperties: {
            consumedRefundsTotal: {
                serializedName: "consumedRefundsTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            maxRefundLimit: {
                serializedName: "maxRefundLimit",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            policyErrors: {
                serializedName: "policyErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RefundPolicyError"
                        }
                    }
                }
            }
        }
    }
};
const RefundPolicyError = {
    type: {
        name: "Composite",
        className: "RefundPolicyError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RefundBillingInformation = {
    type: {
        name: "Composite",
        className: "RefundBillingInformation",
        modelProperties: {
            billingPlan: {
                serializedName: "billingPlan",
                type: {
                    name: "String"
                }
            },
            completedTransactions: {
                serializedName: "completedTransactions",
                type: {
                    name: "Number"
                }
            },
            totalTransactions: {
                serializedName: "totalTransactions",
                type: {
                    name: "Number"
                }
            },
            billingCurrencyTotalPaidAmount: {
                serializedName: "billingCurrencyTotalPaidAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingCurrencyProratedAmount: {
                serializedName: "billingCurrencyProratedAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingCurrencyRemainingCommitmentAmount: {
                serializedName: "billingCurrencyRemainingCommitmentAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            }
        }
    }
};
const RefundRequest = {
    type: {
        name: "Composite",
        className: "RefundRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RefundRequestProperties"
                }
            }
        }
    }
};
const RefundRequestProperties = {
    type: {
        name: "Composite",
        className: "RefundRequestProperties",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            reservationToReturn: {
                serializedName: "reservationToReturn",
                type: {
                    name: "Composite",
                    className: "ReservationToReturn"
                }
            },
            returnReason: {
                serializedName: "returnReason",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RefundResponse = {
    type: {
        name: "Composite",
        className: "RefundResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RefundResponseProperties"
                }
            }
        }
    }
};
const CalculateExchangeRequest = {
    type: {
        name: "Composite",
        className: "CalculateExchangeRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CalculateExchangeRequestProperties"
                }
            }
        }
    }
};
const CalculateExchangeRequestProperties = {
    type: {
        name: "Composite",
        className: "CalculateExchangeRequestProperties",
        modelProperties: {
            reservationsToPurchase: {
                serializedName: "reservationsToPurchase",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PurchaseRequest"
                        }
                    }
                }
            },
            savingsPlansToPurchase: {
                serializedName: "savingsPlansToPurchase",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanPurchaseRequest"
                        }
                    }
                }
            },
            reservationsToExchange: {
                serializedName: "reservationsToExchange",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationToReturn"
                        }
                    }
                }
            }
        }
    }
};
const SavingsPlanPurchaseRequest = {
    type: {
        name: "Composite",
        className: "SavingsPlanPurchaseRequest",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "SkuName"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            billingScopeId: {
                serializedName: "properties.billingScopeId",
                type: {
                    name: "String"
                }
            },
            term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            },
            billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            },
            appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                type: {
                    name: "String"
                }
            },
            appliedScopeProperties: {
                serializedName: "properties.appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            },
            commitment: {
                serializedName: "properties.commitment",
                type: {
                    name: "Composite",
                    className: "Commitment"
                }
            }
        }
    }
};
const CalculateExchangeOperationResultResponse = {
    type: {
        name: "Composite",
        className: "CalculateExchangeOperationResultResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CalculateExchangeResponseProperties"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "OperationResultError"
                }
            }
        }
    }
};
const CalculateExchangeResponseProperties = {
    type: {
        name: "Composite",
        className: "CalculateExchangeResponseProperties",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            netPayable: {
                serializedName: "netPayable",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            refundsTotal: {
                serializedName: "refundsTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            purchasesTotal: {
                serializedName: "purchasesTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            reservationsToPurchase: {
                serializedName: "reservationsToPurchase",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationToPurchaseCalculateExchange"
                        }
                    }
                }
            },
            savingsPlansToPurchase: {
                serializedName: "savingsPlansToPurchase",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanToPurchaseCalculateExchange"
                        }
                    }
                }
            },
            reservationsToExchange: {
                serializedName: "reservationsToExchange",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationToExchange"
                        }
                    }
                }
            },
            policyResult: {
                serializedName: "policyResult",
                type: {
                    name: "Composite",
                    className: "ExchangePolicyErrors"
                }
            }
        }
    }
};
const ReservationToPurchaseCalculateExchange = {
    type: {
        name: "Composite",
        className: "ReservationToPurchaseCalculateExchange",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PurchaseRequest"
                }
            },
            billingCurrencyTotal: {
                serializedName: "billingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            }
        }
    }
};
const SavingsPlanToPurchaseCalculateExchange = {
    type: {
        name: "Composite",
        className: "SavingsPlanToPurchaseCalculateExchange",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SavingsPlanPurchaseRequest"
                }
            },
            billingCurrencyTotal: {
                serializedName: "billingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            }
        }
    }
};
const ReservationToExchange = {
    type: {
        name: "Composite",
        className: "ReservationToExchange",
        modelProperties: {
            reservationId: {
                serializedName: "reservationId",
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            billingRefundAmount: {
                serializedName: "billingRefundAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingInformation: {
                serializedName: "billingInformation",
                type: {
                    name: "Composite",
                    className: "BillingInformation"
                }
            }
        }
    }
};
const BillingInformation = {
    type: {
        name: "Composite",
        className: "BillingInformation",
        modelProperties: {
            billingCurrencyTotalPaidAmount: {
                serializedName: "billingCurrencyTotalPaidAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingCurrencyProratedAmount: {
                serializedName: "billingCurrencyProratedAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingCurrencyRemainingCommitmentAmount: {
                serializedName: "billingCurrencyRemainingCommitmentAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            }
        }
    }
};
const ExchangePolicyErrors = {
    type: {
        name: "Composite",
        className: "ExchangePolicyErrors",
        modelProperties: {
            policyErrors: {
                serializedName: "policyErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExchangePolicyError"
                        }
                    }
                }
            }
        }
    }
};
const ExchangePolicyError = {
    type: {
        name: "Composite",
        className: "ExchangePolicyError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResultError = {
    type: {
        name: "Composite",
        className: "OperationResultError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExchangeRequest = {
    type: {
        name: "Composite",
        className: "ExchangeRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ExchangeRequestProperties"
                }
            }
        }
    }
};
const ExchangeRequestProperties = {
    type: {
        name: "Composite",
        className: "ExchangeRequestProperties",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExchangeOperationResultResponse = {
    type: {
        name: "Composite",
        className: "ExchangeOperationResultResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ExchangeResponseProperties"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "OperationResultError"
                }
            }
        }
    }
};
const ExchangeResponseProperties = {
    type: {
        name: "Composite",
        className: "ExchangeResponseProperties",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            netPayable: {
                serializedName: "netPayable",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            refundsTotal: {
                serializedName: "refundsTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            purchasesTotal: {
                serializedName: "purchasesTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            reservationsToPurchase: {
                serializedName: "reservationsToPurchase",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationToPurchaseExchange"
                        }
                    }
                }
            },
            savingsPlansToPurchase: {
                serializedName: "savingsPlansToPurchase",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanToPurchaseExchange"
                        }
                    }
                }
            },
            reservationsToExchange: {
                serializedName: "reservationsToExchange",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationToReturnForExchange"
                        }
                    }
                }
            },
            policyResult: {
                serializedName: "policyResult",
                type: {
                    name: "Composite",
                    className: "ExchangePolicyErrors"
                }
            }
        }
    }
};
const ReservationToPurchaseExchange = {
    type: {
        name: "Composite",
        className: "ReservationToPurchaseExchange",
        modelProperties: {
            reservationOrderId: {
                serializedName: "reservationOrderId",
                type: {
                    name: "String"
                }
            },
            reservationId: {
                serializedName: "reservationId",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PurchaseRequest"
                }
            },
            billingCurrencyTotal: {
                serializedName: "billingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SavingsPlanToPurchaseExchange = {
    type: {
        name: "Composite",
        className: "SavingsPlanToPurchaseExchange",
        modelProperties: {
            savingsPlanOrderId: {
                serializedName: "savingsPlanOrderId",
                type: {
                    name: "String"
                }
            },
            savingsPlanId: {
                serializedName: "savingsPlanId",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SavingsPlanPurchaseRequest"
                }
            },
            billingCurrencyTotal: {
                serializedName: "billingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationToReturnForExchange = {
    type: {
        name: "Composite",
        className: "ReservationToReturnForExchange",
        modelProperties: {
            reservationId: {
                serializedName: "reservationId",
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            billingRefundAmount: {
                serializedName: "billingRefundAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingInformation: {
                serializedName: "billingInformation",
                type: {
                    name: "Composite",
                    className: "BillingInformation"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationsListResult = {
    type: {
        name: "Composite",
        className: "ReservationsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            summary: {
                serializedName: "summary",
                type: {
                    name: "Composite",
                    className: "ReservationSummary"
                }
            }
        }
    }
};
const ReservationSummary = {
    type: {
        name: "Composite",
        className: "ReservationSummary",
        modelProperties: {
            succeededCount: {
                serializedName: "succeededCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            failedCount: {
                serializedName: "failedCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            expiringCount: {
                serializedName: "expiringCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            expiredCount: {
                serializedName: "expiredCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            pendingCount: {
                serializedName: "pendingCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            cancelledCount: {
                serializedName: "cancelledCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            processingCount: {
                serializedName: "processingCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            warningCount: {
                serializedName: "warningCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            noBenefitCount: {
                serializedName: "noBenefitCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetails"
                }
            }
        }
    }
};
const ErrorDetails = {
    type: {
        name: "Composite",
        className: "ErrorDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ChangeDirectoryRequest = {
    type: {
        name: "Composite",
        className: "ChangeDirectoryRequest",
        modelProperties: {
            destinationTenantId: {
                serializedName: "destinationTenantId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ChangeDirectoryResponse = {
    type: {
        name: "Composite",
        className: "ChangeDirectoryResponse",
        modelProperties: {
            reservationOrder: {
                serializedName: "reservationOrder",
                type: {
                    name: "Composite",
                    className: "ChangeDirectoryResult"
                }
            },
            reservations: {
                serializedName: "reservations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChangeDirectoryResult"
                        }
                    }
                }
            }
        }
    }
};
const ChangeDirectoryResult = {
    type: {
        name: "Composite",
        className: "ChangeDirectoryResult",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            isSucceeded: {
                serializedName: "isSucceeded",
                type: {
                    name: "Boolean"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CurrentQuotaLimitBase = {
    type: {
        name: "Composite",
        className: "CurrentQuotaLimitBase",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "QuotaProperties"
                }
            }
        }
    }
};
const QuotaProperties = {
    type: {
        name: "Composite",
        className: "QuotaProperties",
        modelProperties: {
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResourceName"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ResourceName = {
    type: {
        name: "Composite",
        className: "ResourceName",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExceptionResponse = {
    type: {
        name: "Composite",
        className: "ExceptionResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ServiceError"
                }
            }
        }
    }
};
const ServiceError = {
    type: {
        name: "Composite",
        className: "ServiceError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceErrorDetail"
                        }
                    }
                }
            }
        }
    }
};
const ServiceErrorDetail = {
    type: {
        name: "Composite",
        className: "ServiceErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaRequestSubmitResponse201 = {
    type: {
        name: "Composite",
        className: "QuotaRequestSubmitResponse201",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "properties.message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaLimits = {
    type: {
        name: "Composite",
        className: "QuotaLimits",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CurrentQuotaLimitBase"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaRequestDetails = {
    type: {
        name: "Composite",
        className: "QuotaRequestDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "properties.message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requestSubmitTime: {
                serializedName: "properties.requestSubmitTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            value: {
                serializedName: "properties.value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubRequest"
                        }
                    }
                }
            }
        }
    }
};
const QuotaRequestProperties = {
    type: {
        name: "Composite",
        className: "QuotaRequestProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requestSubmitTime: {
                serializedName: "requestSubmitTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubRequest"
                        }
                    }
                }
            }
        }
    }
};
const SubRequest = {
    type: {
        name: "Composite",
        className: "SubRequest",
        modelProperties: {
            limit: {
                serializedName: "limit",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResourceName"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subRequestId: {
                serializedName: "subRequestId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaRequestDetailsList = {
    type: {
        name: "Composite",
        className: "QuotaRequestDetailsList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "QuotaRequestDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CurrentQuotaLimit = {
    type: {
        name: "Composite",
        className: "CurrentQuotaLimit",
        modelProperties: {
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "properties.message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "quotaInformation.id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "quotaInformation.name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "quotaInformation.type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "quotaInformation.properties",
                type: {
                    name: "Composite",
                    className: "QuotaProperties"
                }
            }
        }
    }
};
const QuotaLimitsResponse = {
    type: {
        name: "Composite",
        className: "QuotaLimitsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CurrentQuotaLimit"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CreateGenericQuotaRequestParameters = {
    type: {
        name: "Composite",
        className: "CreateGenericQuotaRequestParameters",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CurrentQuotaLimitBase"
                        }
                    }
                }
            }
        }
    }
};
const QuotaRequestOneResourceSubmitResponse = {
    type: {
        name: "Composite",
        className: "QuotaRequestOneResourceSubmitResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "properties.message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requestSubmitTime: {
                serializedName: "properties.requestSubmitTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            idPropertiesId: {
                serializedName: "properties.properties.id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            namePropertiesName: {
                serializedName: "properties.properties.name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            typePropertiesType: {
                serializedName: "properties.properties.type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties.properties.properties",
                type: {
                    name: "Composite",
                    className: "QuotaProperties"
                }
            }
        }
    }
};
const QuotaRequestSubmitResponse = {
    type: {
        name: "Composite",
        className: "QuotaRequestSubmitResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "QuotaRequestProperties"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Commitment = {
    type: {
        name: "Composite",
        className: "Commitment",
        modelProperties: Object.assign(Object.assign({}, Price.type.modelProperties), { grain: {
                serializedName: "grain",
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const ReservationResponse = {
    type: {
        name: "Composite",
        className: "ReservationResponse",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, etag: {
                serializedName: "etag",
                type: {
                    name: "Number"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "SkuName"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ReservationsProperties"
                }
            }, kind: {
                defaultValue: "Microsoft.Compute",
                isConstant: true,
                serializedName: "kind",
                type: {
                    name: "String"
                }
            } })
    }
};
const ReservationSplitHeaders = {
    type: {
        name: "Composite",
        className: "ReservationSplitHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ReservationMergeHeaders = {
    type: {
        name: "Composite",
        className: "ReservationMergeHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ReservationUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ReservationUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ReservationOrderPurchaseHeaders = {
    type: {
        name: "Composite",
        className: "ReservationOrderPurchaseHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ReturnPostHeaders = {
    type: {
        name: "Composite",
        className: "ReturnPostHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CalculateExchangePostHeaders = {
    type: {
        name: "Composite",
        className: "CalculateExchangePostHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ExchangePostHeaders = {
    type: {
        name: "Composite",
        className: "ExchangePostHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const QuotaGetHeaders = {
    type: {
        name: "Composite",
        className: "QuotaGetHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaListHeaders = {
    type: {
        name: "Composite",
        className: "QuotaListHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaListNextHeaders = {
    type: {
        name: "Composite",
        className: "QuotaListNextHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AvailableScopeRequest: AvailableScopeRequest,
    AvailableScopeRequestProperties: AvailableScopeRequestProperties,
    AvailableScopeProperties: AvailableScopeProperties,
    SubscriptionScopeProperties: SubscriptionScopeProperties,
    ScopeProperties: ScopeProperties,
    ErrorModel: ErrorModel,
    ExtendedErrorInfo: ExtendedErrorInfo,
    CatalogsResult: CatalogsResult,
    Catalog: Catalog,
    SkuProperty: SkuProperty,
    CatalogMsrp: CatalogMsrp,
    Price: Price,
    SkuRestriction: SkuRestriction,
    SkuCapability: SkuCapability,
    AppliedReservations: AppliedReservations,
    AppliedReservationList: AppliedReservationList,
    PurchaseRequest: PurchaseRequest,
    SkuName: SkuName,
    AppliedScopeProperties: AppliedScopeProperties,
    PurchaseRequestPropertiesReservedResourceProperties: PurchaseRequestPropertiesReservedResourceProperties,
    CalculatePriceResponse: CalculatePriceResponse,
    CalculatePriceResponseProperties: CalculatePriceResponseProperties,
    CalculatePriceResponsePropertiesBillingCurrencyTotal: CalculatePriceResponsePropertiesBillingCurrencyTotal,
    CalculatePriceResponsePropertiesPricingCurrencyTotal: CalculatePriceResponsePropertiesPricingCurrencyTotal,
    PaymentDetail: PaymentDetail,
    ExtendedStatusInfo: ExtendedStatusInfo,
    ReservationOrderList: ReservationOrderList,
    ReservationOrderResponse: ReservationOrderResponse,
    ReservationOrderBillingPlanInformation: ReservationOrderBillingPlanInformation,
    ReservationsProperties: ReservationsProperties,
    ReservationSplitProperties: ReservationSplitProperties,
    ReservationMergeProperties: ReservationMergeProperties,
    ReservationSwapProperties: ReservationSwapProperties,
    RenewPropertiesResponse: RenewPropertiesResponse,
    RenewPropertiesResponsePricingCurrencyTotal: RenewPropertiesResponsePricingCurrencyTotal,
    RenewPropertiesResponseBillingCurrencyTotal: RenewPropertiesResponseBillingCurrencyTotal,
    ReservationsPropertiesUtilization: ReservationsPropertiesUtilization,
    ReservationUtilizationAggregates: ReservationUtilizationAggregates,
    Resource: Resource,
    SystemData: SystemData,
    SplitRequest: SplitRequest,
    MergeRequest: MergeRequest,
    ReservationList: ReservationList,
    Patch: Patch,
    PatchPropertiesRenewProperties: PatchPropertiesRenewProperties,
    OperationList: OperationList,
    OperationResponse: OperationResponse,
    OperationDisplay: OperationDisplay,
    CalculateRefundRequest: CalculateRefundRequest,
    CalculateRefundRequestProperties: CalculateRefundRequestProperties,
    ReservationToReturn: ReservationToReturn,
    CalculateRefundResponse: CalculateRefundResponse,
    RefundResponseProperties: RefundResponseProperties,
    RefundPolicyResult: RefundPolicyResult,
    RefundPolicyResultProperty: RefundPolicyResultProperty,
    RefundPolicyError: RefundPolicyError,
    RefundBillingInformation: RefundBillingInformation,
    RefundRequest: RefundRequest,
    RefundRequestProperties: RefundRequestProperties,
    RefundResponse: RefundResponse,
    CalculateExchangeRequest: CalculateExchangeRequest,
    CalculateExchangeRequestProperties: CalculateExchangeRequestProperties,
    SavingsPlanPurchaseRequest: SavingsPlanPurchaseRequest,
    CalculateExchangeOperationResultResponse: CalculateExchangeOperationResultResponse,
    CalculateExchangeResponseProperties: CalculateExchangeResponseProperties,
    ReservationToPurchaseCalculateExchange: ReservationToPurchaseCalculateExchange,
    SavingsPlanToPurchaseCalculateExchange: SavingsPlanToPurchaseCalculateExchange,
    ReservationToExchange: ReservationToExchange,
    BillingInformation: BillingInformation,
    ExchangePolicyErrors: ExchangePolicyErrors,
    ExchangePolicyError: ExchangePolicyError,
    OperationResultError: OperationResultError,
    ExchangeRequest: ExchangeRequest,
    ExchangeRequestProperties: ExchangeRequestProperties,
    ExchangeOperationResultResponse: ExchangeOperationResultResponse,
    ExchangeResponseProperties: ExchangeResponseProperties,
    ReservationToPurchaseExchange: ReservationToPurchaseExchange,
    SavingsPlanToPurchaseExchange: SavingsPlanToPurchaseExchange,
    ReservationToReturnForExchange: ReservationToReturnForExchange,
    ReservationsListResult: ReservationsListResult,
    ReservationSummary: ReservationSummary,
    ErrorResponse: ErrorResponse,
    ErrorDetails: ErrorDetails,
    ChangeDirectoryRequest: ChangeDirectoryRequest,
    ChangeDirectoryResponse: ChangeDirectoryResponse,
    ChangeDirectoryResult: ChangeDirectoryResult,
    CurrentQuotaLimitBase: CurrentQuotaLimitBase,
    QuotaProperties: QuotaProperties,
    ResourceName: ResourceName,
    ExceptionResponse: ExceptionResponse,
    ServiceError: ServiceError,
    ServiceErrorDetail: ServiceErrorDetail,
    QuotaRequestSubmitResponse201: QuotaRequestSubmitResponse201,
    QuotaLimits: QuotaLimits,
    QuotaRequestDetails: QuotaRequestDetails,
    QuotaRequestProperties: QuotaRequestProperties,
    SubRequest: SubRequest,
    QuotaRequestDetailsList: QuotaRequestDetailsList,
    CurrentQuotaLimit: CurrentQuotaLimit,
    QuotaLimitsResponse: QuotaLimitsResponse,
    CreateGenericQuotaRequestParameters: CreateGenericQuotaRequestParameters,
    QuotaRequestOneResourceSubmitResponse: QuotaRequestOneResourceSubmitResponse,
    QuotaRequestSubmitResponse: QuotaRequestSubmitResponse,
    Commitment: Commitment,
    ProxyResource: ProxyResource,
    ReservationResponse: ReservationResponse,
    ReservationSplitHeaders: ReservationSplitHeaders,
    ReservationMergeHeaders: ReservationMergeHeaders,
    ReservationUpdateHeaders: ReservationUpdateHeaders,
    ReservationOrderPurchaseHeaders: ReservationOrderPurchaseHeaders,
    ReturnPostHeaders: ReturnPostHeaders,
    CalculateExchangePostHeaders: CalculateExchangePostHeaders,
    ExchangePostHeaders: ExchangePostHeaders,
    QuotaGetHeaders: QuotaGetHeaders,
    QuotaListHeaders: QuotaListHeaders,
    QuotaListNextHeaders: QuotaListNextHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: "body",
    mapper: AvailableScopeRequest
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const reservationOrderId = {
    parameterPath: "reservationOrderId",
    mapper: {
        serializedName: "reservationOrderId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const reservationId = {
    parameterPath: "reservationId",
    mapper: {
        serializedName: "reservationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: "body",
    mapper: SplitRequest
};
const body2 = {
    parameterPath: "body",
    mapper: MergeRequest
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: Patch
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
const refreshSummary = {
    parameterPath: ["options", "refreshSummary"],
    mapper: {
        serializedName: "refreshSummary",
        type: {
            name: "String"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "Number"
        }
    }
};
const selectedState = {
    parameterPath: ["options", "selectedState"],
    mapper: {
        serializedName: "selectedState",
        type: {
            name: "String"
        }
    }
};
const take = {
    parameterPath: ["options", "take"],
    mapper: {
        serializedName: "take",
        type: {
            name: "Number"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const reservedResourceType = {
    parameterPath: ["options", "reservedResourceType"],
    mapper: {
        serializedName: "reservedResourceType",
        type: {
            name: "String"
        }
    }
};
const location = {
    parameterPath: ["options", "location"],
    mapper: {
        serializedName: "location",
        type: {
            name: "String"
        }
    }
};
const publisherId = {
    parameterPath: ["options", "publisherId"],
    mapper: {
        serializedName: "publisherId",
        type: {
            name: "String"
        }
    }
};
const offerId = {
    parameterPath: ["options", "offerId"],
    mapper: {
        serializedName: "offerId",
        type: {
            name: "String"
        }
    }
};
const planId = {
    parameterPath: ["options", "planId"],
    mapper: {
        serializedName: "planId",
        type: {
            name: "String"
        }
    }
};
const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
const take1 = {
    parameterPath: ["options", "take"],
    mapper: {
        serializedName: "$take",
        type: {
            name: "Number"
        }
    }
};
const body3 = {
    parameterPath: "body",
    mapper: PurchaseRequest
};
const body4 = {
    parameterPath: "body",
    mapper: ChangeDirectoryRequest
};
const body5 = {
    parameterPath: "body",
    mapper: CalculateRefundRequest
};
const body6 = {
    parameterPath: "body",
    mapper: RefundRequest
};
const body7 = {
    parameterPath: "body",
    mapper: CalculateExchangeRequest
};
const body8 = {
    parameterPath: "body",
    mapper: ExchangeRequest
};
const providerId = {
    parameterPath: "providerId",
    mapper: {
        serializedName: "providerId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const location1 = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-10-25",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const createQuotaRequest = {
    parameterPath: "createQuotaRequest",
    mapper: CurrentQuotaLimitBase
};
const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const skiptoken1 = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Reservation operations. */
class ReservationImpl {
    /**
     * Initialize a new instance of the class Reservation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List `Reservation`s within a single `ReservationOrder`.
     * @param reservationOrderId Order Id of the reservation
     * @param options The options parameters.
     */
    list(reservationOrderId, options) {
        const iter = this.listPagingAll(reservationOrderId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(reservationOrderId, options, settings);
            }
        };
    }
    listPagingPage(reservationOrderId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(reservationOrderId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(reservationOrderId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(reservationOrderId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(reservationOrderId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List of all the revisions for the `Reservation`.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    listRevisions(reservationOrderId, reservationId, options) {
        const iter = this.listRevisionsPagingAll(reservationOrderId, reservationId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listRevisionsPagingPage(reservationOrderId, reservationId, options, settings);
            }
        };
    }
    listRevisionsPagingPage(reservationOrderId, reservationId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listRevisionsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listRevisions(reservationOrderId, reservationId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listRevisionsNext(reservationOrderId, reservationId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listRevisionsPagingAll(reservationOrderId, reservationId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listRevisionsPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listRevisionsPagingPage(reservationOrderId, reservationId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List the reservations and the roll up counts of reservations group by provisioning states that the
     * user has access to in the current tenant.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAllPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Check whether the scopes from request is valid for `Reservation`.
     *
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param body Scopes to be checked for eligibility.
     * @param options The options parameters.
     */
    beginAvailableScopes(reservationOrderId, reservationId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { reservationOrderId, reservationId, body, options },
                spec: availableScopesOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Check whether the scopes from request is valid for `Reservation`.
     *
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param body Scopes to be checked for eligibility.
     * @param options The options parameters.
     */
    beginAvailableScopesAndWait(reservationOrderId, reservationId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginAvailableScopes(reservationOrderId, reservationId, body, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Split a `Reservation` into two `Reservation`s with specified quantity distribution.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed to Split a reservation item
     * @param options The options parameters.
     */
    beginSplit(reservationOrderId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { reservationOrderId, body, options },
                spec: splitOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Split a `Reservation` into two `Reservation`s with specified quantity distribution.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed to Split a reservation item
     * @param options The options parameters.
     */
    beginSplitAndWait(reservationOrderId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSplit(reservationOrderId, body, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged
     * must have same properties.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for commercial request for a reservation
     * @param options The options parameters.
     */
    beginMerge(reservationOrderId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { reservationOrderId, body, options },
                spec: mergeOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged
     * must have same properties.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for commercial request for a reservation
     * @param options The options parameters.
     */
    beginMergeAndWait(reservationOrderId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMerge(reservationOrderId, body, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List `Reservation`s within a single `ReservationOrder`.
     * @param reservationOrderId Order Id of the reservation
     * @param options The options parameters.
     */
    _list(reservationOrderId, options) {
        return this.client.sendOperationRequest({ reservationOrderId, options }, listOperationSpec$4);
    }
    /**
     * Get specific `Reservation` details.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    get(reservationOrderId, reservationId, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, options }, getOperationSpec$3);
    }
    /**
     * Updates the applied scopes of the `Reservation`.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param parameters Information needed to patch a reservation item
     * @param options The options parameters.
     */
    beginUpdate(reservationOrderId, reservationId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { reservationOrderId, reservationId, parameters, options },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the applied scopes of the `Reservation`.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param parameters Information needed to patch a reservation item
     * @param options The options parameters.
     */
    beginUpdateAndWait(reservationOrderId, reservationId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(reservationOrderId, reservationId, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Archiving a `Reservation` moves it to `Archived` state.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    archive(reservationOrderId, reservationId, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, options }, archiveOperationSpec);
    }
    /**
     * Restores a `Reservation` to the state it was before archiving.
     *
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    unarchive(reservationOrderId, reservationId, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, options }, unarchiveOperationSpec);
    }
    /**
     * List of all the revisions for the `Reservation`.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param options The options parameters.
     */
    _listRevisions(reservationOrderId, reservationId, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, options }, listRevisionsOperationSpec);
    }
    /**
     * List the reservations and the roll up counts of reservations group by provisioning states that the
     * user has access to in the current tenant.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec);
    }
    /**
     * ListNext
     * @param reservationOrderId Order Id of the reservation
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(reservationOrderId, nextLink, options) {
        return this.client.sendOperationRequest({ reservationOrderId, nextLink, options }, listNextOperationSpec$4);
    }
    /**
     * ListRevisionsNext
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation item
     * @param nextLink The nextLink from the previous successful call to the ListRevisions method.
     * @param options The options parameters.
     */
    _listRevisionsNext(reservationOrderId, reservationId, nextLink, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, nextLink, options }, listRevisionsNextOperationSpec);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const availableScopesOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/availableScopes",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AvailableScopeProperties
        },
        201: {
            bodyMapper: AvailableScopeProperties
        },
        202: {
            bodyMapper: AvailableScopeProperties
        },
        204: {
            bodyMapper: AvailableScopeProperties
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$9
};
const splitOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ReservationResponse" }
                    }
                }
            }
        },
        201: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ReservationResponse" }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ReservationResponse" }
                    }
                }
            }
        },
        204: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ReservationResponse" }
                    }
                }
            }
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body1,
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$9
};
const mergeOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ReservationResponse" }
                    }
                }
            }
        },
        201: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ReservationResponse" }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ReservationResponse" }
                    }
                }
            }
        },
        204: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ReservationResponse" }
                    }
                }
            }
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body2,
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$9
};
const listOperationSpec$4 = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [accept],
    serializer: serializer$9
};
const getOperationSpec$3 = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const updateOperationSpec$1 = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ReservationResponse
        },
        201: {
            bodyMapper: ReservationResponse
        },
        202: {
            bodyMapper: ReservationResponse
        },
        204: {
            bodyMapper: ReservationResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$9
};
const archiveOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/archive",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const unarchiveOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/unarchive",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listRevisionsOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listAllOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        refreshSummary,
        skiptoken,
        selectedState,
        take
    ],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [
        $host,
        reservationOrderId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listRevisionsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReservationOrder operations. */
class ReservationOrderImpl {
    /**
     * Initialize a new instance of the class ReservationOrder class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List of all the `ReservationOrder`s that the user has access to in the current tenant.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Calculate price for placing a `ReservationOrder`.
     * @param body Information needed for calculate or purchase reservation
     * @param options The options parameters.
     */
    calculate(body, options) {
        return this.client.sendOperationRequest({ body, options }, calculateOperationSpec);
    }
    /**
     * List of all the `ReservationOrder`s that the user has access to in the current tenant.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * Purchase `ReservationOrder` and create resource under the specified URI.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for calculate or purchase reservation
     * @param options The options parameters.
     */
    beginPurchase(reservationOrderId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { reservationOrderId, body, options },
                spec: purchaseOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Purchase `ReservationOrder` and create resource under the specified URI.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for calculate or purchase reservation
     * @param options The options parameters.
     */
    beginPurchaseAndWait(reservationOrderId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPurchase(reservationOrderId, body, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get the details of the `ReservationOrder`.
     * @param reservationOrderId Order Id of the reservation
     * @param options The options parameters.
     */
    get(reservationOrderId, options) {
        return this.client.sendOperationRequest({ reservationOrderId, options }, getOperationSpec$2);
    }
    /**
     * Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant
     * id
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed to change directory of reservation order
     * @param options The options parameters.
     */
    changeDirectory(reservationOrderId, body, options) {
        return this.client.sendOperationRequest({ reservationOrderId, body, options }, changeDirectoryOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const calculateOperationSpec = {
    path: "/providers/Microsoft.Capacity/calculatePrice",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CalculatePriceResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body3,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$8
};
const listOperationSpec$3 = {
    path: "/providers/Microsoft.Capacity/reservationOrders",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationOrderList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$8
};
const purchaseOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ReservationOrderResponse
        },
        201: {
            bodyMapper: ReservationOrderResponse
        },
        202: {
            bodyMapper: ReservationOrderResponse
        },
        204: {
            bodyMapper: ReservationOrderResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body3,
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$8
};
const getOperationSpec$2 = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationOrderResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [accept],
    serializer: serializer$8
};
const changeDirectoryOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/changeDirectory",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ChangeDirectoryResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$8
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationOrderList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operation operations. */
class OperationImpl {
    /**
     * Initialize a new instance of the class Operation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.Capacity/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$7
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing CalculateRefund operations. */
class CalculateRefundImpl {
    /**
     * Initialize a new instance of the class CalculateRefund class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Calculate price for returning `Reservations` if there are no policy errors.
     *
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for calculating refund of a reservation.
     * @param options The options parameters.
     */
    post(reservationOrderId, body, options) {
        return this.client.sendOperationRequest({ reservationOrderId, body, options }, postOperationSpec$3);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const postOperationSpec$3 = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/calculateRefund",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CalculateRefundResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body5,
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Return operations. */
class ReturnImpl {
    /**
     * Initialize a new instance of the class Return class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Return a reservation and get refund information.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for returning reservation.
     * @param options The options parameters.
     */
    beginPost(reservationOrderId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { reservationOrderId, body, options },
                spec: postOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Return a reservation and get refund information.
     * @param reservationOrderId Order Id of the reservation
     * @param body Information needed for returning reservation.
     * @param options The options parameters.
     */
    beginPostAndWait(reservationOrderId, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPost(reservationOrderId, body, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const postOperationSpec$2 = {
    path: "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/return",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReservationOrderResponse
        },
        201: {
            bodyMapper: ReservationOrderResponse
        },
        202: {
            bodyMapper: ReservationOrderResponse
        },
        204: {
            bodyMapper: ReservationOrderResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body6,
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing CalculateExchange operations. */
class CalculateExchangeImpl {
    /**
     * Initialize a new instance of the class CalculateExchange class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Calculates price for exchanging `Reservations` if there are no policy errors.
     *
     * @param body Request containing purchases and refunds that need to be executed.
     * @param options The options parameters.
     */
    beginPost(body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { body, options },
                spec: postOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Calculates price for exchanging `Reservations` if there are no policy errors.
     *
     * @param body Request containing purchases and refunds that need to be executed.
     * @param options The options parameters.
     */
    beginPostAndWait(body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPost(body, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const postOperationSpec$1 = {
    path: "/providers/Microsoft.Capacity/calculateExchange",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CalculateExchangeOperationResultResponse
        },
        201: {
            bodyMapper: CalculateExchangeOperationResultResponse
        },
        202: {
            bodyMapper: CalculateExchangeOperationResultResponse
        },
        204: {
            bodyMapper: CalculateExchangeOperationResultResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body7,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Exchange operations. */
class ExchangeImpl {
    /**
     * Initialize a new instance of the class Exchange class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns one or more `Reservations` in exchange for one or more `Reservation` purchases.
     *
     * @param body Request containing the refunds and purchases that need to be executed.
     * @param options The options parameters.
     */
    beginPost(body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { body, options },
                spec: postOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Returns one or more `Reservations` in exchange for one or more `Reservation` purchases.
     *
     * @param body Request containing the refunds and purchases that need to be executed.
     * @param options The options parameters.
     */
    beginPostAndWait(body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPost(body, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const postOperationSpec = {
    path: "/providers/Microsoft.Capacity/exchange",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ExchangeOperationResultResponse
        },
        201: {
            bodyMapper: ExchangeOperationResultResponse
        },
        202: {
            bodyMapper: ExchangeOperationResultResponse
        },
        204: {
            bodyMapper: ExchangeOperationResultResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: body8,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Quota operations. */
class QuotaImpl {
    /**
     * Initialize a new instance of the class Quota class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of current quotas (service limits) and usage for all resources. The response from the
     * list quota operation can be leveraged to request quota updates.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param options The options parameters.
     */
    list(subscriptionId, providerId, location, options) {
        const iter = this.listPagingAll(subscriptionId, providerId, location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(subscriptionId, providerId, location, options, settings);
            }
        };
    }
    listPagingPage(subscriptionId, providerId, location, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(subscriptionId, providerId, location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(subscriptionId, providerId, location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(subscriptionId, providerId, location, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(subscriptionId, providerId, location, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the current quota (service limit) and usage of a resource. You can use the response from the GET
     * operation to submit quota update request.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param resourceName The resource name for a resource provider, such as SKU name for
     *                     Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices
     * @param options The options parameters.
     */
    get(subscriptionId, providerId, location, resourceName, options) {
        return this.client.sendOperationRequest({ subscriptionId, providerId, location, resourceName, options }, getOperationSpec$1);
    }
    /**
     * Create or update the quota (service limits) of a resource to the requested value.
     *  Steps:
     *   1. Make the Get request to get the quota information for specific resource.
     *   2. To increase the quota, update the limit field in the response from Get request to new value.
     *   3. Submit the JSON to the quota request API to update the quota.
     *   The Create quota request may be constructed as follows. The PUT operation can be used to update
     * the quota.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param resourceName The resource name for a resource provider, such as SKU name for
     *                     Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices
     * @param createQuotaRequest Quota requests payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(subscriptionId, providerId, location, resourceName, createQuotaRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    subscriptionId,
                    providerId,
                    location,
                    resourceName,
                    createQuotaRequest,
                    options
                },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "original-uri"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the quota (service limits) of a resource to the requested value.
     *  Steps:
     *   1. Make the Get request to get the quota information for specific resource.
     *   2. To increase the quota, update the limit field in the response from Get request to new value.
     *   3. Submit the JSON to the quota request API to update the quota.
     *   The Create quota request may be constructed as follows. The PUT operation can be used to update
     * the quota.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param resourceName The resource name for a resource provider, such as SKU name for
     *                     Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices
     * @param createQuotaRequest Quota requests payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(subscriptionId, providerId, location, resourceName, createQuotaRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(subscriptionId, providerId, location, resourceName, createQuotaRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the quota (service limits) of this resource to the requested value.
     *   • To get the quota information for specific resource, send a GET request.
     *   • To increase the quota, update the limit field from the GET response to a new value.
     *   • To update the quota value, submit the JSON response to the quota request API to update the
     * quota.
     *   • To update the quota. use the PATCH operation.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param resourceName The resource name for a resource provider, such as SKU name for
     *                     Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices
     * @param createQuotaRequest Payload for the quota request.
     * @param options The options parameters.
     */
    beginUpdate(subscriptionId, providerId, location, resourceName, createQuotaRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    subscriptionId,
                    providerId,
                    location,
                    resourceName,
                    createQuotaRequest,
                    options
                },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "original-uri"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the quota (service limits) of this resource to the requested value.
     *   • To get the quota information for specific resource, send a GET request.
     *   • To increase the quota, update the limit field from the GET response to a new value.
     *   • To update the quota value, submit the JSON response to the quota request API to update the
     * quota.
     *   • To update the quota. use the PATCH operation.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param resourceName The resource name for a resource provider, such as SKU name for
     *                     Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices
     * @param createQuotaRequest Payload for the quota request.
     * @param options The options parameters.
     */
    beginUpdateAndWait(subscriptionId, providerId, location, resourceName, createQuotaRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(subscriptionId, providerId, location, resourceName, createQuotaRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a list of current quotas (service limits) and usage for all resources. The response from the
     * list quota operation can be leveraged to request quota updates.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param options The options parameters.
     */
    _list(subscriptionId, providerId, location, options) {
        return this.client.sendOperationRequest({ subscriptionId, providerId, location, options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(subscriptionId, providerId, location, nextLink, options) {
        return this.client.sendOperationRequest({ subscriptionId, providerId, location, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CurrentQuotaLimitBase,
            headersMapper: QuotaGetHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        providerId,
        location1,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CurrentQuotaLimitBase
        },
        201: {
            bodyMapper: CurrentQuotaLimitBase
        },
        202: {
            bodyMapper: CurrentQuotaLimitBase
        },
        204: {
            bodyMapper: CurrentQuotaLimitBase
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: createQuotaRequest,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        providerId,
        location1,
        resourceName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: CurrentQuotaLimitBase
        },
        201: {
            bodyMapper: CurrentQuotaLimitBase
        },
        202: {
            bodyMapper: CurrentQuotaLimitBase
        },
        204: {
            bodyMapper: CurrentQuotaLimitBase
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: createQuotaRequest,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        providerId,
        location1,
        resourceName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$2
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaLimits,
            headersMapper: QuotaListHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        providerId,
        location1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaLimits,
            headersMapper: QuotaListNextHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        providerId,
        location1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing QuotaRequestStatus operations. */
class QuotaRequestStatusImpl {
    /**
     * Initialize a new instance of the class QuotaRequestStatus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * For the specified Azure region (location), subscription, and resource provider, get the history of
     * the quota requests for the past year. To select specific quota requests, use the oData filter.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param options The options parameters.
     */
    list(subscriptionId, providerId, location, options) {
        const iter = this.listPagingAll(subscriptionId, providerId, location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(subscriptionId, providerId, location, options, settings);
            }
        };
    }
    listPagingPage(subscriptionId, providerId, location, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(subscriptionId, providerId, location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(subscriptionId, providerId, location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(subscriptionId, providerId, location, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(subscriptionId, providerId, location, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * For the specified Azure region (location), get the details and status of the quota request by the
     * quota request ID for the resources of the resource provider. The PUT request for the quota (service
     * limit) returns a response with the requestId parameter.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param id Quota Request ID.
     * @param options The options parameters.
     */
    get(subscriptionId, providerId, location, id, options) {
        return this.client.sendOperationRequest({ subscriptionId, providerId, location, id, options }, getOperationSpec);
    }
    /**
     * For the specified Azure region (location), subscription, and resource provider, get the history of
     * the quota requests for the past year. To select specific quota requests, use the oData filter.
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param options The options parameters.
     */
    _list(subscriptionId, providerId, location, options) {
        return this.client.sendOperationRequest({ subscriptionId, providerId, location, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param subscriptionId Azure subscription ID.
     * @param providerId Azure resource provider ID.
     * @param location Azure region.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(subscriptionId, providerId, location, nextLink, options) {
        return this.client.sendOperationRequest({ subscriptionId, providerId, location, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaRequestDetails
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        providerId,
        location1,
        id
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaRequestDetailsList
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [
        filter,
        apiVersion1,
        top,
        skiptoken1
    ],
    urlParameters: [
        $host,
        subscriptionId,
        providerId,
        location1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaRequestDetailsList
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        providerId,
        location1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
class AzureReservationAPI extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureReservationAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-reservations/9.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.reservation = new ReservationImpl(this);
        this.reservationOrder = new ReservationOrderImpl(this);
        this.operation = new OperationImpl(this);
        this.calculateRefund = new CalculateRefundImpl(this);
        this.return = new ReturnImpl(this);
        this.calculateExchange = new CalculateExchangeImpl(this);
        this.exchange = new ExchangeImpl(this);
        this.quota = new QuotaImpl(this);
        this.quotaRequestStatus = new QuotaRequestStatusImpl(this);
    }
    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     * @param subscriptionId Id of the subscription
     * @param options The options parameters.
     */
    listCatalog(subscriptionId, options) {
        const iter = this.getCatalogPagingAll(subscriptionId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getCatalogPagingPage(subscriptionId, options, settings);
            }
        };
    }
    getCatalogPagingPage(subscriptionId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* getCatalogPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._getCatalog(subscriptionId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._getCatalogNext(subscriptionId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    getCatalogPagingAll(subscriptionId, options) {
        return tslib.__asyncGenerator(this, arguments, function* getCatalogPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.getCatalogPagingPage(subscriptionId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     * @param subscriptionId Id of the subscription
     * @param options The options parameters.
     */
    _getCatalog(subscriptionId, options) {
        return this.sendOperationRequest({ subscriptionId, options }, getCatalogOperationSpec);
    }
    /**
     * Get applicable `Reservation`s that are applied to this subscription or a resource group under this
     * subscription.
     * @param subscriptionId Id of the subscription
     * @param options The options parameters.
     */
    getAppliedReservationList(subscriptionId, options) {
        return this.sendOperationRequest({ subscriptionId, options }, getAppliedReservationListOperationSpec);
    }
    /**
     * GetCatalogNext
     * @param subscriptionId Id of the subscription
     * @param nextLink The nextLink from the previous successful call to the GetCatalog method.
     * @param options The options parameters.
     */
    _getCatalogNext(subscriptionId, nextLink, options) {
        return this.sendOperationRequest({ subscriptionId, nextLink, options }, getCatalogNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getCatalogOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CatalogsResult
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        reservedResourceType,
        location,
        publisherId,
        offerId,
        planId,
        skip,
        take1
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const getAppliedReservationListOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/appliedReservations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AppliedReservations
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const getCatalogNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CatalogsResult
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};

exports.AzureReservationAPI = AzureReservationAPI;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
